(function () {
    'use strict';
    angular.module('pp.main', ['pp.core']);
    angular.module('pp.core', [
        // vendors
        'ui.router',
        'ui.bootstrap',
        'ngMessages',
        'MessageCenterModule',
        'LocalStorageModule',
        'oc.lazyLoad',
        'azureBlobUpload',
        'btford.socket-io',
        'jlareau.bowser',
        // templates
        'templates.admin',
        'templates.borrower',
        'templates.clients',
        'templates.core',
        'templates.invite',
        'templates.invoices',
        'templates.loans',
        'templates.register',
        'templates.setup',
        'templates.users',
        'templates.loans',
        'templates.lender'
    ]);
    angular.module('pp.core').config([
        '$logProvider',
        '$locationProvider',
        '$httpProvider',
        'AppGlobals',
        'localStorageServiceProvider',
        '$ocLazyLoadProvider',
        function ($logProvider, $locationProvider, $httpProvider, AppGlobals, localStorageServiceProvider, $ocLazyLoadProvider) {
            $logProvider.debugEnabled(AppGlobals.LOGGER.LOG_DEBUG);
            $locationProvider.html5Mode(true);
            $httpProvider.defaults.timeout = AppGlobals.HTTP_TIMEOUT;
            localStorageServiceProvider.setStorageType(AppGlobals.STORAGE_TYPE);
            localStorageServiceProvider.setPrefix('pp');
            $httpProvider.interceptors.push('ApiInterceptor');
            //$httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
            //$httpProvider.defaults.headers.put['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
            $httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';
        }
    ]);
    angular.module('pp.core').constant('AppGlobals', {
        // GLOBALS
        APP_TITLE: 'PeerPay',
        APP_VERSION: '0.2.0',
        DEFAULT_PROTOCOL: 'https',
        HOST: undefined,
        MANAGER: undefined,
        BASE_DOMAIN: 'peerpay.uk',
        HOST_URL: undefined,
        API_PATH: '/api/v1',
        ADMIN_PATH: '/api/admin',
        NODE_URL: undefined,
        NODE_PORT: 9001,
        APP_KEY: 'A310J5&AoyWn9QogOJDcdQIzKCP-pFC9',
        COUNTRY_CODE: 'gb',
        FLASH_TIMEOUT: 10000,
        HTTP_TIMEOUT: 4000,
        SESSION_EXPIRY: 1800,
        FILTER_TIME: 7,
        CURRENCY: 'GBP',
        LOGGER: {
            LOG_DEBUG: true,
            LOG_INFO: true,
            LOG_WARNINGS: true,
            LOG_ERRORS: true,
            POST_ERRORS: true,
            POST_WARNINGS: false
        },
        //INTERVALS
        ACCOUNTING_INTERVAL: 3,
        // 360 for production
        CLIENT_INDEX_INTERVAL: 360,
        INVOICE_INDEX_INTERVAL: 360,
        //STATES
        STATES: {
            HOME: 'summary',
            MANAGE: 'manage',
            FORBIDDEN: '403'
        },
        TERMS: {
            INVOICE_REPAYMENT_PERIOD: '48 hours',
            PLANNED_INVESTMENT_DURATION: '2 months'
        },
        DISALLOWED_LOGIN_STATES: [
            'login',
            'forbidden'
        ],
        // CLIENT SETTINGS
        CLIENT_SUSPENDED: 'suspended',
        EMAIL_DOMAIN_BLACKLIST: [
            'gmail.com',
            'hotmail.com',
            'hotmail.co.uk'
        ],
        BUTTON_LOADING_TEXT: 'Loading...',
        // MESSAGES
        EMAIL_DOMAIN_INVALID: 'Email domain is invalid',
        ACCOUNTING_CALLBACK_METHOD_ERROR: 'We couldn\'t authorize your accounting system',
        ACCOUNTING_CALLBACK_PENDING: 'We are currently fetching data from your accounting system',
        INCORRECT_LOGIN: 'Incorrect login details, please try again.',
        INVALID_PERMISSIONS: 'You do not have the required privileges to access this resource',
        INVALID_ROLE: 'You do not have the correct role to access this resource',
        ACCOUNTING_SELF_ASSESSMENT_SUCCESS: 'Your risk assessment was successfully posted',
        CLIENT_AUTHORISED: 'Client successfully authorised.',
        CLIENT_REJECTED: 'Client successfully rejected.',
        INVOICE_AUTHORISED: 'Invoice successfully authorised.',
        INVOICE_REJECTED: 'Invoice successfully rejected.',
        LOAN_OFFER_ACCEPTED: 'Loan offer accepted',
        LOAN_OFFER_DECLINED: 'Loan offer declined',
        'INVOICE_INVALID': 'The selected invoice can not be submitted',
        'INVOICE_INVAVLID_AMOUNT': 'Invoice amount is greater than borrow limit for invoice: ',
        'INVOICE_INVAVLID_CREDIT': 'Insufficient credit to borrow against invoice: ',
        CLIENT_QUERIED: 'Client Details have been successfully queried',
        CLIENT_QUERIED_UPDATED: 'Client Details have been successfully updated',
        INVALID_FORM: 'Form cannot be submitted, please check all required fields are completed.',
        //SOCKET
        SOCKET: {
            PREFIX: 'socket:',
            EVENTS: [
                'pp:invoice:updated',
                'pp:invoice:404',
                'pp:summary:updated'
            ]
        },
        //INVOICE STATUS
        INVOICE_STATUS: {
            IN_PROGRESS: [
                'submitted',
                'allocated',
                'payment_pending'
            ],
            ALLOCATED: 'allocated',
            SUBMITTED: 'submitted',
            REJECTED: [
                'rejected',
                'offer_expired',
                'loan_cancelled'
            ],
            AUTHORIZED: 'approved',
            OVERDUE: 'active_loan'
        },
        FIELD_LABELS: {
            EMAIL_DOMAIN: {
                INDIVIDUAL: 'Private email domain',
                COMPANY: 'Email domain'
            }
        },
        PAGE_TITLES: {
            INVITE: {
                BORROWER: {
                    'assessment': 'Complete Client Risk Profile',
                    default: 'Pre-Register Borrower'
                },
                LENDER: {
                    'assessment': 'Complete Client Risk Profile',
                    default: 'Pre-Register Lender'
                }
            }
        },
        CLIENT_BUTTONS: {
            BORROWER: {
                DEFAULT: [
                    {
                        title: 'Load Invoices',
                        url: '/invoices/import/list',
                        class: 'fa-clipboard'
                    },
                    {
                        title: 'Invoices Queue',
                        url: '/invoices/import/queue',
                        class: 'fa-users'
                    }
                ]
            },
            LENDER: {},
            MANAGER: {
                DEFAULT: [
                    {
                        title: 'New Borrower',
                        url: '/invite/find/borrower',
                        class: 'fa-bank'
                    },
                    {
                        title: 'New Lender Co',
                        url: '/invite/find/lender',
                        class: 'fa-clipboard'
                    },
                    {
                        title: 'New Lender Ind',
                        url: 'invite/individual/lender',
                        class: 'fa-users'
                    }
                ],
                CLIENTS: [
                    {
                        title: 'New Borrower',
                        url: '/invite/find/borrower',
                        class: 'fa-bank'
                    },
                    {
                        title: 'New Lender Co',
                        url: '/invite/find/lender',
                        class: 'fa-clipboard'
                    },
                    {
                        title: 'New Lender Ind',
                        url: 'invite/individual/lender',
                        class: 'fa-users'
                    }
                ]
            },
            PROVIDER: {
                DEFAULT: [
                    {
                        title: 'Release Loan Payments',
                        url: '/loans/list/pending',
                        class: 'fa-bank'
                    },
                    {
                        title: 'Authorise Invoices',
                        url: '/invoices/list/allocated',
                        class: 'fa-clipboard'
                    },
                    {
                        title: 'Authorise Clients',
                        url: '/clients/list/authorize',
                        class: 'fa-users'
                    }
                ],
                CLIENTS: [
                    {
                        title: 'New Borrower',
                        url: '/invite/find/borrower',
                        class: 'fa-bank'
                    },
                    {
                        title: 'New Lender Co',
                        url: '/invite/find/lender',
                        class: 'fa-clipboard'
                    },
                    {
                        title: 'New Lender Ind',
                        url: 'invite/individual/lender',
                        class: 'fa-users'
                    }
                ]
            }
        },
        //STORAGE
        STORAGE_TYPE: 'localStorage',
        STORAGE_PREFIX: 'pp',
        STORAGE_KEY: {
            ACCOUNTING: 'ppAccounting',
            AUTH: 'ppAuth',
            BORROWER: 'ppBorrower',
            CALLBACK: 'ppCallback',
            LENDER: 'ppLender',
            CLIENT: 'ppClient',
            COMPANY: 'ppCompany',
            CONFIG: 'ppConfig',
            FORM: 'ppForm',
            INVITE: 'ppInvite',
            INVOICES: 'ppInvoices',
            NOTIFICATION: 'ppNotification',
            OFFICE: 'ppOffice',
            STORAGE: 'ppStorage',
            USER: 'ppUser',
            ENCRYPT_SECRET: 'ppCryptKey',
            ENV: 'ppEnvironment',
            SYSTEM: 'ppSystem',
            LOG: 'ppLog',
            SUMMARY: 'ppSummary'
        },
        DAYS: [
            '01',
            '02',
            '03',
            '04',
            '05',
            '06',
            '07',
            '08',
            '09',
            '11',
            '11',
            '12',
            '13',
            '14',
            '15',
            '16',
            '17',
            '18',
            '19',
            '20',
            '21',
            '22',
            '23',
            '24',
            '25',
            '26',
            '27',
            '28',
            '29',
            '30',
            '31'
        ],
        MONTHS: [
            '01',
            '02',
            '03',
            '04',
            '05',
            '06',
            '07',
            '08',
            '09',
            '10',
            '11',
            '12'
        ],
        CLIENT_STATUS: {
            ACTIVE: 'Active',
            PRE_REG: 'Pre-Registration',
            REJECTED: 'Rejected',
            QUERIED: 'Queried',
            AWAITING: 'Awaiting Authorisation',
            IN_REG: 'Registration in progress'
        },
        WITHDRAWN_REASON: {
            WITHDRAWN: 'Borrower Declined Loan Offer',
            OFFER_EXPIRED: 'Loan Offer Expired',
            REJECTED: 'Loan Payment no Approved'
        }
    });
    angular.module('pp.core').run([
        'Log',
        '$window',
        '$rootScope',
        '$state',
        '$location',
        'AppGlobals',
        'ApiService',
        'EnvModel',
        'localStorageService',
        function (Log, $window, $rootScope, $state, $location, AppGlobals, ApiService, EnvModel, localStorageService) {
            var host = '';
            if ($location.$$host.indexOf('admin') == 0) {
                host = $location.$$host.substring(6);
            } else {
                host = $location.$$host;
            }
            var hostSegs = host.split('.');
            AppGlobals.MANAGER = hostSegs[0];
            ;
            AppGlobals.HOST = host;
            var url = $location.$$protocol + '://api';
            if (host) {
                url += '-' + host;
            }
            AppGlobals.HOST_URL = url;
            AppGlobals.NODE_URL = url;
            //EnvModel.setEnv();
            //change page title based on state
            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParms, from) {
                $rootScope.pageTitle = '';
                if (toState.title) {
                    $rootScope.pageTitle += toState.title;
                    $rootScope.pageTitle += ' \u2014 ';
                } else {
                    $rootScope.pageTitle += EnvModel.data.APP_TITLE;
                }
                $rootScope.previousState = from;
            });
            $rootScope.$on('$locationChangeSuccess', function () {
                $rootScope.actualLocation = $location.path();
            });
            $rootScope.$on('$stateNotFound', function (event, unfoundState, fromState, fromParams) {
                Log.error('unfound state: ' + angular.toJson(unfoundState) + ' fromState: ' + angular.toJson(fromState));    //Log.error(unfoundState.to); // "lazy.state"
                                                                                                                             //Log.error(unfoundState.toParams); // {a:1, b:2}
                                                                                                                             //Log.error(unfoundState.options); // {inherit:false} + default options
            });
        }
    ]);
    // lodash
    angular.module('pp.core').constant('_', window._);
    // StackTrace
    angular.module('pp.core').constant('StackTrace', window.StackTrace);
    angular.module('pp.core').constant('DotObject', window.DotObject);
    angular.module('pp.core').controller('ActivationCtrl', [
        'Log',
        '$scope',
        '$state',
        '$filter',
        '$uibModal',
        'Flash',
        'AuthModel',
        'NotificationModel',
        'AppGlobals',
        function (Log, $scope, $state, $filter, $uibModal, Flash, AuthModel, NotificationModel, AppGlobals) {
            NotificationModel.init();
            AuthModel.init();
            $scope.vm = NotificationModel.data;
            Log.debug('ActivationCtrl');
            Log.debug($scope.vm);
            $scope.loadingMobileToken = false;
            $scope.resolveCredentials = function () {
                if (NotificationModel.data.username && NotificationModel.data.password) {
                    return true;
                }
                // otherwise get the credentials from the failed login attempt
                if (AuthModel.data.attempt && AuthModel.data.attempt.password && AuthModel.data.attempt.username) {
                    NotificationModel.data.username = AuthModel.data.attempt.username;
                    NotificationModel.data.password = AuthModel.data.attempt.password;
                    NotificationModel.save();
                    return true;
                } else {
                    Log.error('failed to find valid credentials for mobile activation');
                    AuthModel.logout();
                    $state.go('index');
                    Flash.danger('We can\'t find a valid username and password', true);
                }
            };
            $scope.resolveCredentials();
            // $scope.logo = $scope.vm.service_manager.logo || 'img/defaults/logo.jpg';
            $scope.logo = 'img/defaults/logo.jpg';
            $scope.title = 'Welcome to PeerPay';
            $scope.mobileConfirmed = false;
            $scope.getMobileToken = function (form) {
                $scope.loadingMobileToken = true;
                NotificationModel.getMobileToken($scope.vm).then(function (success) {
                    $scope.saveMobileToken(success.data.data);
                    $scope.loadingMobileToken = false;
                }, function (error) {
                    $scope.loadingMobileToken = false;
                });
            };
            $scope.saveMobileToken = function (data) {
                Log.info('Retrieved mobile token');
                NotificationModel.data.mobileToken.tokenId = data.tokenId;
                NotificationModel.save();
                if (!$scope.vm.mobileToken.tokenId) {
                    Flash.danger('The token you submitted has been rejected. Please speak to your service manager');
                }
                return $scope.mobileConfirmed = true;
            };
            $scope.postActivateMobile = function (form) {
                $scope.loadingMobileToken = true;
                Log.debug(form);
                NotificationModel.postActivateMobile($scope.vm).then(function (success) {
                    Log.info('Posted mobile token');
                    if (AuthModel.login(success.data.data)) {
                        Log.info('Login successful');
                        $state.go('setup.' + AuthModel.data.client.clientType + '.manage');
                        Flash.success('Your account was successfully created', true);
                    } else {
                        $state.go('login');
                        Flash.warning('Your account was created, but we couldn\'t log you in. Please log in again.', true);
                    }
                    $scope.loadingMobileToken = false;
                }, function (error) {
                    $scope.loadingMobileToken = false;
                });
            };
            $scope.resendToken = function ($event, type) {
                $scope.refreshTokenSecret();
                Log.info('resending mobile token');
                $event.preventDefault();
                NotificationModel.getMobileToken().then(function (success) {
                    Flash.success('A token has been sent to your mobile phone');
                    $scope.saveMobileToken(success.data.data);
                });
            };
            $scope.refreshTokenSecret = function () {
                NotificationModel.data.mobileToken = {};
            };
        }
    ]);
    angular.module('pp.core').controller('AuthCtrl', [
        'Log',
        '$scope',
        'AuthModel',
        '$state',
        'AppGlobals',
        function (Log, $scope, AuthModel, $state, AppGlobals) {
            $scope.manager = AppGlobals.MANAGER;
            $scope.attemptsRemaining = undefined;
            $scope.throttleMsg = false;
            console.log('Auth Ctrl Home');
            $scope.credentials = {
                username: '',
                password: '',
                remember: false
            };
            $scope.login = function (form) {
                AuthModel.postLogin($scope.credentials, null, $scope.forbiddenCallback);
            };
            $scope.forbiddenCallback = function (error) {
                if (error.status !== 403) {
                    return false;
                }
                var throttleSentinel = 'have attempted to log on too many times';
                if (error.data.reason_phrase.indexOf(throttleSentinel) !== -1) {
                    return $scope.throttleMsg = error.data.reason_phrase;
                } else if (error.data.hasOwnProperty('attempts_remaining')) {
                    //remove any previously set throttle message
                    $scope.throttleMsg = false;
                    //add 1 because because humans do not count from 0
                    var attemptsRemaining = error.data.attempts_remaining + 1;
                    Log.debug('attempts remaining: ' + attemptsRemaining);
                    $scope.attemptsRemaining = attemptsRemaining;
                }
                return false;
            };
            $scope.refreshUser = function () {
                AuthModel.getMe().then(function (success) {
                    Log.info('Retreived user data');
                });
            };
            $scope.cancel = function (form, $event) {
                form.$setPristine();
                $scope.credentials.username = '';
                $scope.credentials.password = '';
                $event.preventDefault();
            };
        }
    ]);
    angular.module('pp.core').controller('BorrowerCtrl', [
        'Log',
        '$scope',
        '$state',
        'ClientModel',
        'InvoiceModel',
        'LoanModel',
        'AuthModel',
        function (Log, $scope, $state, ClientModel, InvoiceModel, LoanModel, AuthModel) {
            Log.debug('Borrower Ctrl');
            ClientModel.init();
            $scope.clients = ClientModel.data;
            $scope.invoices = InvoiceModel.data;
            $scope.loans = LoanModel.data;
            $scope.clientType = AuthModel.data.clientType;
            // Log.debug(ClientModel.data);
            Log.debug('LoanModel moe');
            Log.debug(LoanModel.data);
        }
    ]);
    angular.module('pp.core').controller('FooterCtrl', [
        '$scope',
        '$state',
        'Log',
        'AppGlobals',
        function ($scope, $state, Log, AppGlobals) {
            $scope.disabledStates = [
                'register',
                'details',
                'email'
            ];
            $scope.showFooter = function () {
                $scope.disabledStates.forEach(function (state) {
                    if ($state.current.name.indexOf(state) !== -1) {
                        return false;
                    }
                });
                return true;
            };
        }
    ]);
    angular.module('pp.core').controller('InviteClientCtrl', [
        'Log',
        '$scope',
        '$state',
        '$stateParams',
        'FormModel',
        'InviteModel',
        'AppGlobals',
        'Flash',
        'clientType',
        'FormValidator',
        function (Log, $scope, $state, $stateParams, FormModel, InviteModel, AppGlobals, Flash, clientType, FormValidator) {
            Log.debug('Invite Client Ctrl init');
            $scope.buttonText = undefined;
            $scope.loadingCompany = false;
            $scope.formValidator = FormValidator;
            var abort = function () {
                //$state.go('summary');
                Flash.danger('The client you requested could not be found', true);
            };
            var initializeScope = function () {
                // decide whether to load up saved data from the session
                var currentState = $state.current.name;
                if (currentState.indexOf('find') > 0) {
                    InviteModel.forget();
                }
                InviteModel.data.client.lenderType = $state.current.data.lenderType;
                Log.debug('type is : ' + clientType);
                //ensure the client type is set on the scope and the model
                $scope.clientType = InviteModel.data.client.clientType = clientType;
                InviteModel.save();
                $scope.vm = InviteModel.data;
                $scope.clientConfirmed = InviteModel.data.clientConfirmed;
                $scope.borrowerAssessmentComplete = InviteModel.data.borrowerAssessmentComplete;
                $scope.detailsSubmitButton = 'Complete Client Risk Analysis';
                $scope.emailDomainInvalid = AppGlobals.EMAIL_DOMAIN_INVALID;
            };
            var initializePageTitle = function () {
                function getPageTitle(page) {
                    var titleType = clientType.toUpperCase();
                    Log.debug(titleType);
                    return AppGlobals.PAGE_TITLES.INVITE[titleType][page] || AppGlobals.PAGE_TITLES.INVITE[titleType].default;
                }
                $scope.findTitle = getPageTitle('find');
                $scope.confirmTitle = getPageTitle('confirm');
                $scope.primaryTitle = getPageTitle('primary');
                $scope.assessmentTitle = getPageTitle('assessment');
                $scope.individualTitle = getPageTitle('individual');
            };
            initializeScope();
            initializePageTitle();
            // Log what ratings being selected
            $scope.rate = function (rating) {
                Log.debug('Rating Selected: ' + rating);
            };
            $scope.noRating = function () {
                Log.debug('No rating value: ' + ($scope.vm.ratingPrevent === true ? 0 : 1));
                $scope.vm.client.clientData.managerAssessment.borrowerRating = $scope.vm.ratingPrevent === true ? 0 : '1';
            };
            $scope.postFindCompany = function (form) {
                $scope.loadingCompany = true;
                $scope.buttonText = AppGlobals.BUTTON_LOADING_TEXT;
                var number = InviteModel.data.find.number;
                form.$setPristine();
                Log.info('POST FIND COMPANY');
                Log.debug(number);
                return InviteModel.findCompany(number, clientType).then(function (response) {
                    $scope.loadingCompany = false;
                    $scope.buttonText = undefined;
                });
            };
            $scope.confirmCompany = function ($event) {
                Log.debug('Confirm company');
                $event.preventDefault();
                InviteModel.data.clientConfirmed = true;
                InviteModel.save();
            };
            $scope.cancelCompanyConfirmation = function ($event) {
                $event.preventDefault();
                if (InviteModel.forget()) {
                    Log.debug('invite model has been forgotten');
                    $state.go('invite.find', { clientType: clientType });
                }
            };
            $scope.updateClient = function ($event, state) {
                $event.preventDefault();
                if (state == 'primary') {
                    Log.debug('Primary details saving:');
                }
                InviteModel.updateClient().then(function (success) {
                    Log.info('Successfully updated client. Navigating to designated state: ' + state);
                    Log.debug(InviteModel.data);
                    //sync the data with the db - in case some fields weren't updated properly
                    // this would happen if there was a silent mass assignment exception
                    InviteModel.data.client = success.data.data;
                    InviteModel.save();
                    if (state == 'primary') {
                        return $state.go('invite.user.primary', { uid: InviteModel.data.client.uid });
                    } else if (state == 'assessment') {
                        return $state.go('invite.client.assessment', { clientNumber: InviteModel.data.client.clientNumber });
                    } else if (state == 'summary') {
                        Flash.success('The client has been invited.', true);
                        return $state.go('summary');
                    } else {
                        Log.error('an invalid state was provided');
                    }
                });
            };
            // Boolean to display rating error
            $scope.ratingRequired = false;
            $scope.putAssessment = function (form) {
                Log.debug('putting manager assessment');
                Log.debug($scope);
                Log.debug(InviteModel);
                Log.debug(form);
                // Check rating is undefined - if it is we show rating required
                if (InviteModel.data.client.clientData.managerAssessment.borrowerRating == undefined) {
                    $scope.ratingRequired = true;
                    form.$valid = false;
                } else {
                    $scope.ratingRequired = false;
                    form.$valid = true;
                }
                // Required as having !ratingRequired on submit will never overwrite once invalid as
                // can't access the function to change the validation
                if (form.$valid) {
                    InviteModel.putManagerAssessment($scope.vm.client.clientName).then(function (success) {
                        Log.info('Borrower manager assessment posted');
                        InviteModel.data.client = success.data.data;
                        InviteModel.data.borrowerAssessmentComplete = true;
                        InviteModel.save();
                        $state.go('invite.client.confirm', { clientNumber: $scope.vm.client.clientNumber });
                        return true;
                    });
                    return false;
                }
            };
            $scope.cancelAssessment = function ($event) {
                $event.preventDefault();
                $state.go('invite.client.confirm', { clientNumber: $scope.vm.client.clientNumber });
            };
            $scope.exit = function ($event, form) {
                Log.debug(form);
                $event.preventDefault();
                $state.go('summary');
            };
            $scope.saveAndExit = function ($event, form) {
                Log.debug(form);
                $event.preventDefault();
                InviteModel.updateClient().then(function (success) {
                    $state.go('summary');
                    return true;
                });
            };
        }
    ]);
    angular.module('pp.core').controller('InviteUserCtrl', [
        'Log',
        '$scope',
        '$state',
        'InviteModel',
        'AppGlobals',
        'clientType',
        '$uibModal',
        function (Log, $scope, $state, InviteModel, AppGlobals, clientType, $uibModal) {
            $scope.vm = InviteModel.data;
            Log.debug('Invite User Ctrl');
            Log.debug(InviteModel);
            $scope.postInvitePrimary = function () {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/confirm-invite-primary.html',
                    scope: $scope,
                    controller: [
                        '$scope',
                        'InvoiceModel',
                        'FormModel',
                        '$uibModalInstance',
                        function ($scope, InvoiceModel, FormModel, $uibModalInstance) {
                            $scope.continue = function ($event) {
                                InviteModel.postInvitePrimary($scope.vm);    // $uibModalInstance.close(true);
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Invite Primary User Modal: ' + result);
                }, function () {
                    Log.debug('Invite Primary User Modal dismissed at: ' + new Date());
                });
            };
            /**
             * @todo fire confirmation model
             */
            $scope.cancelInvitePrimary = function ($event) {
                // InviteModel.forget();
                if (InviteModel.data.client.lenderType == 'individual') {
                    $state.go('invite.individual.lender');
                } else {
                    $state.go('invite.client.confirm', { clientNumber: InviteModel.data.client.clientNumber });
                }
                $event.preventDefault();
            };
        }
    ]);
    angular.module('pp.core').controller('NavbarCtrl', [
        '$scope',
        '$rootScope',
        '$uibModal',
        '$state',
        'AuthModel',
        'AppGlobals',
        'BaseModel',
        function ($scope, $rootScope, $uibModal, $state, AuthModel, AppGlobals, BaseModel) {
            //Log.debug($scope);
            AuthModel.init();
            $scope.manager = AppGlobals.MANAGER;
            $scope.showNav = function () {
                //return true;
                // //Log.debug($state);
                if ($state.current.name.indexOf('register') !== -1 && $state.current.name.indexOf('details') == -1 && $state.current.name.indexOf('email') == -1) {
                    return false;
                }
                return true;
            };
            $scope.isAuthenticated = false;
            $scope.navCollapsed = true;
            $scope.clientIsAuthorized = AuthModel.clientIsAuthorized();
            // $scope.clientType = AuthModel.data.client.clientType;
            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                $scope.navCollapsed = true;
            });
            //Log.debug('Auth status is currently:');
            //Log.debug($scope.isAuthenticated);
            $scope.$on('login', function () {
                $scope.isAuthenticated = true;
                $scope.user = AuthModel.data;
                $scope.clientIsAuthorized = AuthModel.clientIsAuthorized();
                $scope.clientType = AuthModel.data.client.clientType;
            });
            $scope.$on('logout', function () {
                $scope.isAuthenticated = false;
                $scope.navCollapsed = true;
                $scope.user = {};
            });
            $scope.$on('unauthorized', function () {
                $scope.isAuthenticated = false;
            });
            $scope.showInvoices = AuthModel.data.client && AuthModel.data.client.clientType == 'borrower';
            $scope.manage = function () {
                var clientType = AuthModel.data.client.clientType;
                if (clientType == 'borrower' || clientType == 'lender') {
                    return $state.go('setup.' + clientType + '.manage');
                }
                $state.go('forbidden');
            };
            $scope.clients = function () {
                var clientType = AuthModel.data.client.clientType;
                if (clientType == 'manager') {
                    return $state.go('clients.manage.list.all');
                }
            };
            $scope.about = function () {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/about.html',
                    //can't use the AuthCtrl here because it has to accept a modal instance as well
                    //todo - think of a way round this problem
                    controller: [
                        '$scope',
                        '$uibModal',
                        '$uibModalInstance',
                        'AppGlobals',
                        function ($scope, $uibModal, $uibModalInstance, AppGlobals) {
                            $scope.appVersion = AppGlobals.APP_VERSION;
                            $scope.cancel = function ($event) {
                                $event.preventDefault();
                                $uibModalInstance.close(false);
                            };
                        }
                    ]
                });
            };
            $scope.summary = function () {
                return $state.go('summary');
            };
            $scope.invoices = function () {
                return $state.go('invoices.list.all');
            };
            $scope.loans = function () {
                return $state.go('loans.list.active');
            };
            $scope.openLoginModal = function () {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/login.html',
                    //can't use the AuthCtrl here because it has to accept a modal instance as well
                    //todo - think of a way round this problem
                    controller: [
                        'Log',
                        '$scope',
                        'AuthModel',
                        '$uibModal',
                        '$uibModalInstance',
                        '$state',
                        'ApiHandler',
                        function (Log, $scope, AuthModel, $uibModal, $uibModalInstance, $state, ApiHandler) {
                            $scope.login = function () {
                                AuthModel.postLogin($scope.credentials, //success callback
                                function () {
                                    $uibModalInstance.close();
                                }, // error callback
                                function () {
                                    $uibModalInstance.close();
                                });
                            };
                            $scope.cancel = function ($event) {
                                $event.preventDefault();
                                $uibModalInstance.close(false);
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug(result);
                }, function () {
                    Log.debug('dismiss');
                });
            };
            $scope.logoutUser = function () {
                AuthModel.postLogout();
                $scope.isAuthenticated = false;
                $scope.navCollapsed = true;
            };
        }
    ]);
    angular.module('pp.core').controller('PasswordCtrl', [
        'Log',
        '$scope',
        '$stateParams',
        'AuthModel',
        function (Log, $scope, $stateParams, AuthModel) {
            Log.debug('PasswordCtrl');
            $scope.vm = {};
            $scope.getPasswordReset = function (form) {
                AuthModel.getPasswordReset({ email: $scope.vm.email }).then(function (success) {
                });
            };
            $scope.postPasswordReset = function (token) {
                var data = {
                    email: $scope.vm.email,
                    password: $scope.vm.password,
                    token: $stateParams.token
                };
                AuthModel.postPasswordReset(data).then(function (success) {
                });
            };
        }
    ]);
    angular.module('pp.core').controller('RegisterCtrl', [
        'Log',
        '$scope',
        '$state',
        '$filter',
        '$uibModal',
        'Flash',
        'AuthModel',
        'invitationData',
        'NotificationModel',
        'AppGlobals',
        function (Log, $scope, $state, $filter, $uibModal, Flash, AuthModel, invitationData, NotificationModel, AppGlobals) {
            $scope.vm = NotificationModel.data;
            $scope.loadingEmailToken = false;
            // $scope.logo = $scope.vm.service_manager.logo || 'img/defaults/logo.jpg';
            $scope.logo = 'img/defaults/logo.jpg';
            $scope.title = 'Welcome to PeerPay';
            $scope.mobileConfirmed = false;
            $scope.termsAccepted = false;
            Log.debug('RegisterCtrl');
            Log.debug($scope.vm);
            $scope.formatDate = function (date) {
                var dateOut = moment().format(dateOut);
                Log.debug('Format date');
                Log.debug(dateOut);
                return dateOut;
            };
            $scope.acceptInvitation = function () {
                $state.go('register.details');
            };
            $scope.signup = function (form) {
                form.$dirty = true;
                if (form.$valid) {
                    var clientType = NotificationModel.data.clientType;
                    $scope.termsType = 'terms' + clientType.charAt(0).toUpperCase() + clientType.substr(1) + 'UserSignup';
                    // the accept method to use on the TermsCtrl
                    $scope.acceptMethod = 'userSignup';
                    $scope.disableTermsButton = false;
                    var modalInstance = $uibModal.open({
                        animation: true,
                        scope: $scope,
                        templateUrl: 'core/modals/terms.html',
                        controller: 'TermsCtrl',
                        resolve: {
                            TermsData: [
                                'ConfigModel',
                                function (ConfigModel) {
                                    return ConfigModel.getTerms($scope.termsType, false);
                                }
                            ]
                        }
                    });
                    modalInstance.result.then(function (result) {
                        Log.debug('Modal result: ' + result);
                    }, function () {
                        Log.debug('Modal dismissed at: ' + new Date());
                    });
                }
            };
            $scope.postActivateEmail = function (form) {
                $scope.loadingEmailToken = true;
                NotificationModel.postActivateEmail($scope.vm).then(function (success) {
                    Log.info('email successfully activated');
                    //$scope.vm.emailToken = success.data.data;
                    $state.go('activate.mobile');
                    $scope.loadingEmailToken = false;
                }, function (error) {
                    $scope.loadingEmailToken = false;
                });
            };
            $scope.resendToken = function ($event, type) {
                $scope.refreshTokenSecret();
                $scope.loadingEmailToken = true;
                Log.info('resending email token');
                $event.preventDefault();
                NotificationModel.getEmailToken().then(function (success) {
                    $scope.loadingEmailToken = false;
                    NotificationModel.data.emailToken.tokenId = success.data.data.tokenId;
                    NotificationModel.save();
                    Flash.success('A token has been sent to your email address');
                    return true;
                }, function (error) {
                    $scope.loadingEmailToken = false;
                });
            };
            $scope.refreshTokenSecret = function () {
                NotificationModel.data.emailToken = {};
            };
        }
    ]);
    angular.module('pp.core').controller('SummaryCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        'SummaryModel',
        'ClientModel',
        'InvoiceModel',
        'LoanModel',
        'BankingModel',
        'UserModel',
        function (Log, $scope, $state, AuthModel, SummaryModel, ClientModel, InvoiceModel, LoanModel, BankingModel, UserModel) {
            var clientType = AuthModel.data.client.clientType;
            $scope.clientType = clientType;
            $scope.client = AuthModel.data;
            $scope.invoices = InvoiceModel.data;
            $scope.loans = LoanModel.data;
            $scope.banking = BankingModel.data;
            $scope.users = UserModel.data;
            Log.info('SUMMARY CTRL');
            Log.debug(SummaryModel);
            Log.debug($scope.invoices);
            Log.debug($scope.banking);
            $scope.vm = SummaryModel.data;
        }
    ]);
    angular.module('pp.core').controller('TermsCtrl', [
        'Log',
        '$sce',
        '$state',
        '$scope',
        'ConfigModel',
        '$uibModal',
        '$uibModalInstance',
        'TermsData',
        'NotificationModel',
        'ClientModel',
        'AuthModel',
        'AppGlobals',
        'StepParser',
        function (Log, $sce, $state, $scope, ConfigModel, $uibModal, $uibModalInstance, TermsData, NotificationModel, ClientModel, AuthModel, AppGlobals, StepParser) {
            Log.debug('terms content is: ');
            Log.debug(TermsData);
            $scope.content = $sce.trustAsHtml(TermsData);
            //$scope.content = TermsData;
            $scope.loading = false;
            Log.debug('TermsCtrl');
            Log.debug($scope.vm);
            /**
        * ACCEPT METHOD
        * you must set an "acceptMethod" property on the parent controller
        * e.g. $scope.acceptMethod = 'userSignup'
        * this will define which function is called when accepting the terms
        */
            $scope.acceptTerms = function (method) {
                $scope.buttonText = AppGlobals.BUTTON_LOADING_TEXT;
                Log.debug('Accepting terms using method: ' + method);
                return $scope[method]();
            };
            $scope.userSignup = function () {
                NotificationModel.data.acceptTerms = true;
                Log.debug(NotificationModel.data);
                $scope.loading = true;
                NotificationModel.getEmailToken().then(function (success) {
                    Log.info('Retrieved email token');
                    NotificationModel.data.emailToken.tokenId = success.data.data.tokenId;
                    NotificationModel.save();
                    $uibModalInstance.close(true);
                    $scope.loading = false;
                    $state.go('register.email');
                    return true;
                }, function (error) {
                    $scope.loading = false;
                });
            };
            $scope.manageSetup = function () {
                $scope.loading = true;
                var clientName = AuthModel.data.client.clientName;
                AuthModel.data.client.clientData.authorization.tsCsConfirmed = true;
                AuthModel.save();
                ClientModel.putClient(clientName, AuthModel.data.client).then(function (success) {
                    $uibModalInstance.close(true);
                    StepParser.refresh();
                    var state = 'setup.' + AuthModel.data.client.clientType + '.manage';
                    $scope.loading = false;
                    return $state.go(state);
                }, function (error) {
                    $scope.loading = false;
                });
            };
            $scope.closeModal = function () {
                $uibModalInstance.dismiss('cancel');
            };
            $scope.cancelTerms = function ($event) {
                $uibModalInstance.dismiss('cancel');
                $event.preventDefault();
            };
        }
    ]);
    angular.module('pp.core').controller('UserCtrl', [
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'UserModel',
        'NotificationModel',
        'AppGlobals',
        'Log',
        function ($scope, $state, AuthModel, $uibModal, UserModel, NotificationModel, AppGlobals, Log) {
            $scope.vm = UserModel.data;
            $scope.resendUserInvitation = function ($event, user) {
                Log.debug('resending user invitation');
                Log.debug(user);
                Log.debug($event);
                var element = $event.srcElement;
                NotificationModel.resendInvitation(user.username, user.invite.linkKey).then(function (success) {
                    console.log(success);
                    element.setAttribute('class', 'btn btn-success');
                    element.setAttribute('disabled', true);
                    element.innerText = 'Sent';
                });
            };
        }
    ]);
    function AccountingModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, AuthModel, InvoiceModel, BankingModel, $window, CallbackModel) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.user = AuthModel;
        this.banking = BankingModel;
        this.invoices = InvoiceModel;
        this.callback = CallbackModel;
        this.setStorageKey('ACCOUNTING');
        this.window = $window;
        this.data = {
            isAuthorized: false,
            credentials: false,
            risk: {
                analysis: undefined,
                questionnaire: undefined
            }
        };
    }
    ;
    AccountingModel.prototype = Object.create(BaseModel.prototype);
    AccountingModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel',
        'InvoiceModel',
        'BankingModel',
        '$window',
        'CallbackModel'
    ];
    AccountingModel.prototype.checkCredentials = function () {
        return this.data.isAuthorized;
    };
    // this has been depracated by the global 303 redirect callback mechanism
    //AccountingModel.prototype.getAuthorization = function(method, state) {
    //    var self = this;
    //    self.data.credentials = false;
    //    self.isAuthorized = false;
    //    self.save();
    //    self.notifier.notifyAccountingUnauthorized();
    //
    //    return self.api.get('accounting/authorize/' + method + '/' + state)
    //        .then(function (success) {
    //            Log.debug('authoriation received');
    //            self.data.credentials = success.data.data;
    //            self.save();
    //            self.window.location.href = self.data.credentials.redirect_url;
    //        }, function (error) {
    //            //todo - fire modal
    //        });
    //};
    // determine which backend controller to send the callback to
    AccountingModel.prototype.postCallback = function (credentials) {
        var self = this;
        var callbackData = self.callback.getCallbackData();
        if (!callbackData) {
            self.log.error('Valid callback data is required');
            return self.abort(500);
        }
        credentials.callback = callbackData;
        var method = callbackData.method;
        console.log('Post callback parameters');
        console.log(credentials);
        // Default callback is accounting
        var callbackUrl = 'accounting/callback';
        // Invoice callbacks
        if (method.toLowerCase().indexOf('invoice') !== -1) {
            console.log('invoice callback detected');
            callbackUrl = 'invoice/callback';
        }
        // Invoice callbacks
        if (method.toLowerCase().indexOf('bank') !== -1) {
            console.log('banking callback detected');
            callbackUrl = 'banking/callback';
        }
        return self.api.post(callbackUrl, credentials).then(function (success) {
            return self.saveCallback(success);
        }, function (error) {
            console.log('postCallback was not succesfully executed');
            self.log.error(error);    //return self.state.go(500);
        });
    };
    // determine which model to save the data on
    AccountingModel.prototype.saveCallback = function (response) {
        console.log(response);
        var self = this;
        var method = response.data.callback.method;
        var state = response.data.callback.state;
        var args = response.data.callback.args;
        self.data.isAuthorized = true;
        self.notifier.notifyAccountingAuthorized();
        console.log('saving callback for method: ' + method);
        switch (method) {
        case 'importInvoices':
            self.invoices.flashImportMsg(true);
            break;
        case 'importInvoiceContact':
            self.invoices.flashImportMsg(true);
            break;
        case 'importInvoiceById':
        case 'importInvoiceByNumber':
            self.invoices.saveInvoice('import', response.data.data);
            break;
        case 'submitInvoice':
            self.invoices.flashImportMsg(true);
            break;
        case 'getBankAccounts':
            self.banking.saveAccounts(response.data.data);
            break;
        case 'getRiskAnalysis':
            self.saveRiskAnalysis(response.data.data);
            break;
        case 'getBrandingTheme':
            self.saveBrandingTheme(response.data.data);
            break;
        case 'logCredentials':
            console.log(response);
            return self.state.go('forbidden');
        //this method is only for testing
        default:
            console.log('The method you supplied is not valid');
        }
        if (args) {
            return self.state.go(state, args);
        } else {
            return self.state.go(state);
        }
    };
    AccountingModel.prototype.getRiskAnalysis = function (state) {
        var self = this;
        var callbackState = state || self.state.current.name;
        return self.api.get('accounting/risk/analysis', { state: callbackState }).then(function (success) {
            self.saveRiskAnalysis(success.data.data);
            return self.state.go(state);
        }, function (error) {
            console.log('risk analysis was not succesfully retrieved');
            console.log(error);
        });
    };
    AccountingModel.prototype.saveRiskAnalysis = function (data) {
        this.user.init();
        this.log.debug('risk analysis was succesfully retrieved');
        this.log.debug(data);
        this.user.data.client.clientData.riskAnalysis = data;
        this.user.save();
        this.data.risk.analysis = data;
        this.save();
        return data;
    };
    AccountingModel.prototype.getBrandingTheme = function (state) {
        var callbackState = state || this.state.current.name;
        return this.api.get('accounting/branding', { state: callbackState });
    };
    AccountingModel.prototype.saveBrandingTheme = function (data) {
        var self = this;
        if (data.brandingThemeValid) {
            self.user.data.client.clientData.brandingThemeId = data.brandingThemeId;
            self.user.save();
        }
        self.data.brandingTheme = data;
        self.save();
    };
    angular.module('pp.core').service('AccountingModel', AccountingModel);
    function AuthModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, $location, $window) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('AUTH');
        this.isAuthenticated = false;
        this.errorMessage = 'We could not load the auth data';
        this.location = $location;
        this.window = $window;
        this.data = {
            attempt: {},
            client: {},
            profile: {},
            lastKnownState: false
        };
    }
    ;
    AuthModel.prototype = Object.create(BaseModel.prototype);
    AuthModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        '$location',
        '$window'
    ];
    AuthModel.prototype.saveAttempt = function (credentials) {
        this.data.attempt = credentials;
        return this.save();
    };
    AuthModel.prototype.saveLastKnownState = function (state) {
        var self = this;
        self.globals.DISALLOWED_LOGIN_STATES.forEach(function (disallowedState) {
            if (state.name && state.name.indexOf(disallowedState)) {
                self.log.debug('Refusing to save lastKnownState: ' + JSON.stringify(state));
                state = false;
            }
        });
        this.data.lastKnownState = state;
        this.save();
    };
    AuthModel.prototype.getLastKnownState = function (state) {
        return this.data.lastKnownState;
    };
    AuthModel.prototype.login = function (data) {
        if (!this.checkCredentials(data)) {
            return false;
        }
        console.log('saving data to cache: ');
        this.data = _.merge(this.data, data);
        if (this.save()) {
            console.log('login successful');
            this.notifier.notifyLogin(data.token.key);
            return this.isAuthenticated = true;
        }
        return false;
    };
    AuthModel.prototype.postLogin = function (credentials, successCb, errorCb) {
        var self = this;
        // save credentials - this is primarily used for mobile activation
        // or any situation where the password needs to be resubmitted on the next request
        self.saveAttempt(credentials);
        return self.api.post('auth/login', credentials).then(function (success) {
            self.login(success.data.data);
            if (successCb)
                successCb();
            console.log('checking for last known state');
            var lastKnownState = self.getLastKnownState();
            console.log(lastKnownState);
            if (lastKnownState) {
                self.saveLastKnownState(false);
                //reset
                if (lastKnownState.name) {
                    return self.state.go(lastKnownState.name, lastKnownState.params);
                }
                if (lastKnownState.url) {
                    return self.location.url(lastKnownState.url);
                }
            }
            return self.goHome();
        }, function (error) {
            self.log.debug(error);
            if (errorCb) {
                errorCb(error);
            }
        });
    };
    AuthModel.prototype.logout = function () {
        this.notifier.notifyLogout();
        this.flushCache();
        // KILL THE APPLICATION
        return this.window.location.href = '/login';
    };
    AuthModel.prototype.postLogout = function () {
        var self = this;
        return self.api.post('auth/logout').then(function (success) {
            self.log.debug('successfully logged out of api');
            return self.logout();    // return self.location.url('/');
                                     //self.state.go('index');
        }, function (error) {
            self.log.debug('failed to log out of api');
            return self.logout();
        });
    };
    AuthModel.prototype.check = function () {
        this.log.debug('Auth Model check');
        if (!this.checkCacheExpiry()) {
            return this.logout();
        }
        var userLength = Object.keys(this.data).length;
        if (this.isAuthenticated && userLength) {
            return true;
        }
        // check the session for an existing login
        var user = this.init();
        //Log.debug('checking user credentials');
        //Log.debug(this.checkCredentials(user));
        if (user && this.checkCredentials(user)) {
            console.log('setting cached user as auth user');
            // remember to update the notifier
            this.notifier.notifyLogin(user.token.key);
            return this.isAuthenticated = true;
        }
        //Log.debug('auth check is false');
        return false;
    };
    /**
 * Clears out the lender risk profile upon cancellation
 * as the lender risk controller has functionality that sets
 * data to the object, this needs to be reset if cancelled.
 *
 * @return {Object}
 */
    AuthModel.prototype.refreshLenderRisk = function () {
        var riskProfile = this.data.client.clientData.lenderRiskProfile;
        angular.forEach(riskProfile, function (value, key) {
            if (key != 'financialYearEnd') {
                riskProfile[key] = null;
            }
        });
        this.data.client.clientData.lenderRiskProfile = riskProfile;
        this.save();
        return this.data;
    };
    AuthModel.prototype.getUser = function () {
        var data = this.data || false;
        return data;
    };
    AuthModel.prototype.checkCredentials = function (data) {
        if (!data || !data.username || !data.role || !data.token.key || !data.token.created_at) {
            return false;
        }
        return true;
    };
    AuthModel.prototype.refreshUser = function (data) {
        var user = this.getUser();
        console.log('existing user is:');
        console.log('User data: ', user);
        console.log('Incoming data: ', data);
        if (!_.isEqual(data, user)) {
            var newUserData = _.merge(user, data);
            if (this.login(newUserData)) {
                console.log('user data refreshed');
                console.log(newUserData);
                return true;
            }
        }
        console.log('user data not refreshed');
        return false;
    };
    AuthModel.prototype.hasPermission = function (permissions) {
        if (typeof permissions == 'string') {
            //Log.debug('permission is a string');
            return this.data.permissions.indexOf(permissions) !== -1;
        }
        var res = true;
        var self = this;
        permissions.forEach(function (permission) {
            if (self.data.permissions.indexOf(permission) == -1) {
                console.log(permission + ' is false');
                res = false;
            }
        });
        return res;
    };
    AuthModel.prototype.hasRole = function (allowedRoles) {
        if (typeof allowedRoles == 'string') {
            return this.data.role.indexOf(allowedRoles) === 0;
        }
        var res = false;
        var self = this;
        allowedRoles.forEach(function (role) {
            if (self.data.role.indexOf(role) === 0) {
                res = true;
            }
        });
        return res;
    };
    AuthModel.prototype.getToken = function () {
        return this.data.token.key;
    };
    AuthModel.prototype.setToken = function (token) {
        return this.data.token.key = token;
    };
    AuthModel.prototype.getMe = function () {
        return this.api.get('me');
    };
    AuthModel.prototype.getPasswordReset = function (data) {
        return this.api.get('password', data);
    };
    AuthModel.prototype.postPasswordReset = function (data) {
        return this.api.post('password/verify', data);
    };
    AuthModel.prototype.clientIsAuthorized = function () {
        if (this.data.client) {
            if (this.data.client.clientType == 'borrower' || this.data.client.clientType == 'lender') {
                return this.data.client.clientData.authorization.clientAuthorized || false;
            }
        }
        return true;
    };
    angular.module('pp.core').service('AuthModel', AuthModel);
    function BankingModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('CLIENT');
        this.errorMessage = 'We could not load the client data';
        this.data = {
            accounts: {
                available: undefined,
                authenticate: {},
                verify: {}
            },
            lastIndex: false,
            summary: {},
            index: [],
            clientAccounts: []
        };
    }
    ;
    BankingModel.prototype = Object.create(BaseModel.prototype);
    BankingModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    BankingModel.prototype.checkCredentials = function () {
        return this.notifier.accountingAuthorized;
    };
    /**
 * Gets bank account details
 *
 * @param  {String} clientName
 * @param  {Boolean} optional accountRef (If you want to get account details for a specific account reference)
 */
    BankingModel.prototype.getAccountRefs = function (clientName, accountRef) {
        var apirUrl = '/banking/accounts/' + clientName;
        if (accountRef) {
            apirUrl += '/reference';
        }
        console.log('Accounts API URL:');
        console.log(apirUrl);
        return this.api.get(apirUrl, false, false);
    };
    /**
 * Resolves account information for each client
 * by adding into the models data and caching it for use.
 * Use case is the 'release loan' section of admin
 *
 * @param  {String} clientName
 * @return {Object}
 */
    BankingModel.prototype.resolveAccountInfo = function (clientName) {
        var self = this;
        if (!self.data.clientAccounts[clientName]) {
            return self.getAccountRefs(clientName, true).then(function (success) {
                var accountInfo = success.data.data;
                self.data.clientAccounts[clientName] = accountInfo;
                self.save();
                return accountInfo;
            });
        } else {
            return self.data.clientAccounts[clientName];
        }
    };
    /**
 * Initiates a lender depsoit
 *
 * @param  {String} name
 * @param  {Object} data - The data to save
 */
    BankingModel.prototype.putDeposit = function (name, data) {
        console.log('firing api get deposit');
        return this.api.put('/banking/deposit/' + name, data);
    };
    /**
 * Get available credit limit for a borrower
 *
 * @param  {String} name
 * @param  {Array} params optional
 * @return {Object}
 */
    BankingModel.prototype.getCreditCheck = function (name, params) {
        return this.api.get('/banking/credit/limit/' + name, params);
    };
    BankingModel.prototype.getBankAccounts = function (state) {
        var self = this;
        var callbackState = state || self.state.current.name;
        return self.api.get('banking/accounts', { state: callbackState }).then(function (success) {
            self.saveAccounts(success.data.data, state);
        }, function (error) {
            console.log('accounts were not succesfully retrieved');
            console.log(error);
        });
    };
    BankingModel.prototype.postBankAuthentication = function () {
        var self = this;
        var data = {
            accountName: self.data.accounts.authenticate.accountName,
            accountNum: self.data.accounts.authenticate.accountNum,
            sortCode: this.serializeSortcode(self.data.accounts.authenticate.sortCode)
        };
        return this.api.post('banking/accounts/authenticate', data);
    };
    BankingModel.prototype.postBankVerification = function () {
        var account = {
            accountName: this.data.accounts.verify.accountName,
            accountNum: this.data.accounts.verify.accountNum,
            sortCode: this.serializeSortcode(this.data.accounts.verify.sortCode),
            tokenSecret: this.serializeToken(this.data.accounts.verify.secret)
        };
        return this.api.post('banking/accounts/verify', account);
    };
    BankingModel.prototype.saveAccounts = function (data, state) {
        this.data.accounts.available = data;
        this.save();
        if (state) {
            return this.state.go(state);
        }
    };
    BankingModel.prototype.serializeSortcode = function (sortCode) {
        this.log.debug('Serialise Token');
        this.log.debug(sortCode);
        var sSortcode = '';
        Object.keys(sortCode).sort().forEach(function (key) {
            sSortcode += sortCode[key];
        });
        return sSortcode;
    };
    angular.module('pp.core').service('BankingModel', BankingModel);
    function BaseModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        this.data = {};
        this.log = Log;
        this.globals = AppGlobals;
        this.api = ApiService;
        this.state = $state;
        this.storage = localStorageService;
        this.flash = Flash;
        this.crypt = CryptService;
        this.notifier = AppNotifier;
        this.isInitialised = false;
        this.storageKey = undefined;
    }
    ;
    BaseModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    BaseModel.prototype.flushCache = function () {
        console.log('Flush cache');
        var keys = this.storage.keys();
        //Log.debug(keys)
        for (var i = 0; i <= keys.length; i++) {
            // Persist storage key for encrypt key
            if (keys[i] && keys[i] != this.globals.STORAGE_KEY.ENCRYPT_SECRET) {
                this.storage.remove(keys[i]);
            }
        }
        this.storage.clearAll();
    };
    BaseModel.prototype.goHome = function () {
        return this.state.go(this.globals.STATES.HOME);
    };
    BaseModel.prototype.abort = function (error, state) {
        if (error) {
            this.log.error(error);
            this.flash.danger(error, true);
        } else {
            this.flash.danger('Sorry, we could not establish a valid connection to the server. Please refresh the page.', true);
        }
        if (state) {
            return this.state.go(state);
        } else {
            return this.goHome();
        }
    };
    BaseModel.prototype.init = function () {
        if (this.isInitialised) {
            return true;
        }
        this.crypt.setSecret();
        if (!this.storageKey) {
            this.log.debug('storage key is not set');
            return false;
        }
        var data = this.getCache();
        if (data) {
            // Log.debug('previous data found');
            //Log.debug(data);
            this.data = data;
        }
        return data;
    };
    BaseModel.prototype.setStorageKey = function (key) {
        console.log(key);
        console.log(this.globals.STORAGE_KEY[key]);
        this.storageKey = this.globals.STORAGE_KEY[key];
    };
    /**
 * Encrypts data and saves data to cache
 *
 * @return {Object}
 */
    BaseModel.prototype.save = function () {
        this.setCacheTimes();
        var encrypted = this.crypt.encrypt(this.data);
        var data = { data: encrypted };
        return this.storage.set(this.storageKey, data);
    };
    /**
 * Clears the cache
 *
 * @return {Object}
 */
    BaseModel.prototype.forget = function () {
        this.data = {};
        this.refreshCache();
        return true;
    };
    /**
 * Decrypts data and gets data from cache
 *
 * @return {Object}
 */
    BaseModel.prototype.getCache = function () {
        var rawData = this.storage.get(this.storageKey);
        if (rawData && !Object.keys(rawData).length || !rawData) {
            //Log.debug('No Data to get');
            return false;
        }
        var data = this.crypt.decrypt(rawData.data);
        // this.checkCacheExpiry(data);
        return data;
    };
    BaseModel.prototype.mergeData = function (data) {
        this.data = _.merge(this.data, data);
        if (this.save()) {
            return true;
        }
        return false;
    };
    /**
 * Check whether cache expiry is up and remove from cache if so
 *
 * @param  {Object} data - Decrypted data object
 * @return {Void}
 */
    BaseModel.prototype.checkCacheExpiry = function () {
        if (this.getTimestamp() >= this.data.cacheExpire) {
            console.log('Cache timed out');
            this.storage.remove(this.storageKey);
            return false;
        }
        console.log('cache has not expired');
        return true;
    };
    /**
 * Sets cache times in data object
 *
 * @return {Void}
 */
    BaseModel.prototype.setCacheTimes = function () {
        var cachedAt = this.getTimestamp();
        var cacheExpire = cachedAt + parseInt(this.globals.SESSION_EXPIRY);
        this.data.cachedAt = cachedAt;
        this.data.cacheExpire = cacheExpire;
    };
    BaseModel.prototype.refreshCache = function () {
        return this.storage.set(this.storageKey, {});
    };
    BaseModel.prototype.log = function () {
        console.log('logging model data:');
        console.log(this.data);
    };
    BaseModel.prototype.getLength = function () {
        return Object.keys(this.data).length;
    };
    // expensive function to check if data object is initialised
    // this has been replaced by the simple initialised flag
    BaseModel.prototype.isEmpty = function () {
        var isEmpty = true;
        var self = this;
        //Log.debug('checking if model is empty. length is: ' + this.getLength() );
        var length = this.getLength();
        if (length) {
            Object.keys(self.data).forEach(function (key) {
                //Log.debug('is data object empty:' + key);
                //Log.debug(typeof(self.data[key]));
                if (typeof self.data[key] == 'string' || typeof self.data[key] == 'object' && !_.isEmpty(self.data[key]) || typeof self.data[key] == 'array' && self.data[key]) {
                    isEmpty = false;
                }
            });
        }
        //Log.debug('model isEmpty is: ' + isEmpty);
        return isEmpty;
    };
    // makes use of the lodash findIndex method which
    // allows you to pass in a matching keypair e.g. {id: 125}
    // https://lodash.com/docs#findIndex
    BaseModel.prototype.updateArrayObject = function (haystack, where, newObj) {
        var match = _.findIndex(haystack, where);
        if (match !== -1) {
            haystack.splice(match, 1, newObj);
        } else {
            haystack.push(newObj);
        }
        return haystack;
    };
    BaseModel.prototype.deleteArrayObject = function (haystack, where) {
        var match = _.findIndex(haystack, where);
        if (match !== -1) {
            this.log.debug('deleting array object from index: ' + match);
            haystack.splice(match, 1);
            this.save();
            return haystack;
        }
        this.log.debug('could not delete data matching the criteria: ' + JSON.stringify(where));
        return false;
    };
    BaseModel.prototype.serializeToken = function (obj) {
        var keys = Object.keys(obj).sort();
        var res = '';
        for (var i = 0; i < keys.length; i++) {
            res += obj[keys[i]] + '-';
        }
        return _.trim(res, '-');
    };
    BaseModel.prototype.randomString = function (x) {
        var s = '';
        while (s.length < x && x > 0) {
            var r = Math.random();
            s += r < 0.1 ? Math.floor(r * 100) : String.fromCharCode(Math.floor(r * 26) + (r > 0.5 ? 97 : 65));
        }
        return s;
    };
    BaseModel.prototype.getTimestamp = function () {
        // returns a timestamp in seconds as per php time()
        return Math.floor(Date.now() / 1000);
    };
    BaseModel.prototype.checkIndexInterval = function (lastIndex) {
        this.log.debug('last indexed at: ' + lastIndex);
        this.log.debug('index interval is: + ' + this.indexInterval);
        if (!lastIndex) {
            return true;
        }
        if (!this.indexInterval) {
            this.log.error('A valid index interval has not been set on the model');
        }
        return this.getTimestamp > lastIndex + this.indexInterval;
    };
    BaseModel.prototype.indexSummaryEntities = function (entity) {
        var self = this;
        entity = entity || 'all';
        self.log.debug('indexing summary entities for: ' + entity);
        self.api.get('/summary/entity/' + entity).then(function (success) {
            self.log.debug(success.data);
            self.log.debug(self.data);
            success.data.data.forEach(function (summary) {
                self.data.summary[summary.key] = summary;
                self.data.summary[summary.key].value = parseInt(summary.value);
            });
            self.log.debug('saved summary entities to model');
            self.log.debug(self.data.summary);
            self.save();
            return self.data.summary;
        });
    };
    BaseModel.prototype.checkAgainstSummary = function (key, summary) {
        if (summary[key]) {
            var summaryValue = summary.summary[key].value;
            var localValue = self.data[key].length;
            if (summaryValue != localValue) {
                Log.error(key + ' does not match Oracle::getAllInvoiceStatus', 'SummaryException');
            }
        }
    };
    angular.module('pp.core').service('BaseModel', BaseModel);
    function CallbackModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('CALLBACK');
        this.data = {};
        this.expiryTime = 6000;
    }
    ;
    CallbackModel.prototype = Object.create(BaseModel.prototype);
    CallbackModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel',
        'InvoiceModel',
        'BankingModel',
        '$window'
    ];
    CallbackModel.prototype.saveCallback = function (data) {
        this.data = data;
        this.save();
        return this.data;
    };
    CallbackModel.prototype.getCallbackData = function () {
        console.log('fetching callback data');
        this.init();
        if (this.checkCallbackData()) {
            return this.data;
        }
        return false;
    };
    CallbackModel.prototype.checkCallbackData = function () {
        console.log('checking callback data');
        var time = this.getTimestamp();
        console.log(time);
        console.log(this.data.cachedAt + this.expiryTime);
        return time < this.data.cachedAt + this.expiryTime;
    };
    angular.module('pp.core').service('CallbackModel', CallbackModel);
    function ClientModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, $q) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService);
        this.setStorageKey('CLIENT');
        this.errorMessage = 'We could not load the client data';
        this.indexInterval = this.globals.CLIENT_INDEX_INTERVAL;
        this.data = {
            lastIndex: false,
            summary: {},
            index: [],
            filteredIndex: []
        };
    }
    ;
    ClientModel.prototype = Object.create(BaseModel.prototype);
    ClientModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        '$q'
    ];
    ClientModel.prototype.filterIndex = function (object) {
        this.init();
        this.data.filteredIndex = [];
        this.data.filteredIndex = object;
        this.save();
    };
    /**
 * Method to query the client details on 'I have a problem'
 * when a client feels their details are incorrectly entered
 * through the initial registration stage
 *
 * @param  {String} clientName
 * @return {Object}
 */
    ClientModel.prototype.queryDetails = function (clientName) {
        return this.api.put('/client/query/' + clientName, {});
    };
    ClientModel.prototype.queryDetailsUpdated = function (clientName) {
        return this.api.put('/client/query/' + clientName + '/updated', {});
    };
    ClientModel.prototype.getIndex = function (params) {
        var self = this;
        self.log.debug('firing api index route');
        return self.api.get('/client', params);
    };
    ClientModel.prototype.getAllIndex = function () {
        var self = this;
        self.init();
        if (!self.checkIndexInterval(self.data.lastIndex)) {
            self.log.debug('has been indexed too recently, use existing data');
            self.log.debug(self.data.index);
            return self.data.index;
        }
        this.getIndex().then(function (success) {
            self.data.lastIndex = self.getTimestamp();
            self.log.debug('set lastIndex timestamp to: ' + self.data.lastIndex);
            // self.log.debug(success.data.data);
            success.data.data.forEach(function (c) {
                self.updateArrayObject(self.data.index, { clientName: c.clientName }, c);
            });
            self.save();
            self.log.debug(self.data);
            return self.data.index;
        });
    };
    ClientModel.prototype.getByName = function (name) {
        return this.api.get('/client/' + name);
    };
    ClientModel.prototype.getByNumber = function (number) {
        return this.api.get('/client/number/' + number);
    };
    ClientModel.prototype.postClient = function (data) {
        return this.api.post('/client', data);
    };
    ClientModel.prototype.putClient = function (name, data, updateOracle) {
        var endpoint = '/client/' + name;
        if (updateOracle) {
            endpoint += '/oracle';
        }
        this.log.debug('Put Client Data');
        this.log.debug(data);
        return this.api.put(endpoint, data);
    };
    /**
 * Admin Related API Methods
 */
    /**
 * If pending clients have been set it updates a client within the cache
 * so that the clients list picks up any changes to a client
 *
 * @param  {Object} client
 */
    ClientModel.prototype.updatePendingClient = function (client) {
        var self = this;
        if (self.data.hasOwnProperty('pendingClients')) {
            self.updateArrayObject(self.data.pendingClients, { uid: client.uid }, client);
        }
    };
    ClientModel.prototype.deleteClient = function (uid, params, isAdmin) {
        return this.api.delete('client/' + uid, params, isAdmin);
    };
    ClientModel.prototype.resolveClient = function (uid) {
        this.log.debug('Resolve Client ' + uid);
        var self = this;
        self.init();
        self.log.debug('Client Model Initiiated');
        self.log.debug(self.data);
        if (self.data.hasOwnProperty('pendingClients')) {
            self.log.debug('Searching Cache for client');
            var pendingClients = self.data.pendingClients;
            self.log.debug(pendingClients);
            if (pendingClients.length > 0) {
                for (var i = 0; i <= pendingClients.length; i++) {
                    if (pendingClients[i] !== undefined && pendingClients[i].uid == uid) {
                        self.log.debug('Found client in cache');
                        self.log.debug(pendingClients[i]);
                        self.data.clientToAuthorize = pendingClients[i];
                        return self.data.clientToAuthorize;
                    }
                }
                this.log.debug('End of searching cache');
            }
        }
        self.log.debug('Fetching from api as not in cache');
        return self.api.get('/client/uid/' + uid).then(function (success) {
            self.log.debug('Get Client By Number');
            self.log.debug(success);
            var clientToAuthorize = success.data.data;
            self.data.clientToAuthorize = clientToAuthorize;
            return self.data.clientToAuthorize;
        }, function (error) {
            self.log.debug(error);
            return self.abort('The client you requested could not be found');
        });
    };
    ClientModel.prototype.putSelfAssessment = function (data) {
        this.log.debug('self assessment is');
        this.log.debug(data);
        var form = {
            avgOrderSize: data.avgOrderSize,
            expectedTerm: data.expectedTerm,
            cycleContinue: data.cycleContinue,
            expandBusiness: data.expandBusiness
        };
        return this.api.put('/borrower/assessment', form);
    };
    angular.module('pp.core').service('ClientModel', ClientModel);
    function CompanyModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('COMPANY');
        this.errorMessage = 'We could not load the company data';
    }
    ;
    CompanyModel.prototype = Object.create(BaseModel.prototype);
    CompanyModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    CompanyModel.prototype.getByNumber = function (number) {
        return this.api.get('/company/' + number);
    };
    angular.module('pp.core').service('CompanyModel', CompanyModel);
    function ConfigModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, $http) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('CONFIG');
        this.http = $http;
        this.errorMessage = 'There was a problem loading the requested file.';
        this.data = { env: undefined };
    }
    ;
    ConfigModel.prototype = Object.create(BaseModel.prototype);
    ConfigModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        '$http'
    ];
    ConfigModel.prototype.get = function (name, requireOrFail) {
        var self = this;
        return self.api.get('/configuration/' + name).then(function (success) {
            console.log('saving config: ' + name);
            self.data[name] = success.data.data;
        }, function () {
            if (requireOrFail) {
                self.goHome();
            }
            self.flash.danger(self.errorMessage, requireOrFail);
        });
    };
    /**
 * Gets Terms from config - rather than setting by context it
 * overwrites the terms in the data property. Reason being theres one terms controller
 * and it's difficult/hassle to pass over which terms property to grab rather than always
 * referencing the 'terms' property for the popup.
 *
 * @todo  - look at refactoring to simplify this maybe integrate with above function?!
 *
 * @param  {String} type           The terms and conditions type
 * @param  {Boolean} requireOrFail
 */
    ConfigModel.prototype.getTerms = function (type, requireOrFail) {
        var self = this;
        self.init();
        if (self.data[type] && self.data[type].content) {
            return self.data[type].content;
        }
        return self.api.get('/configuration/' + type).then(function (success) {
            self.log.debug('saving terms: ' + type);
            self.log.debug(success.data.data);
            self.data[type] = success.data.data;
            self.save();
            return success.data.data.configData.content;
        }, function () {
            if (requireOrFail) {
                self.goHome();
            }
            self.flash.danger(self.errorMessage, requireOrFail);
        });
    };
    angular.module('pp.core').service('ConfigModel', ConfigModel);
    function EnvModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('ENV');
        this.errorMessage = 'There was a problem loading the requested env.';
        this.data = {};
    }
    ;
    EnvModel.prototype = Object.create(BaseModel.prototype);
    EnvModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    EnvModel.prototype.setEnv = function () {
        var self = this;
        return self.api.get('configuration/environment').then(function (success) {
            self.data = success.data;
        }, function (error) {
            console.log('no environment file found');
        });
    };
    angular.module('pp.core').service('EnvModel', EnvModel);
    function FormModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('FORM');
        this.errorMessage = 'There was a problem loading the requested form.';
    }
    ;
    FormModel.prototype = Object.create(BaseModel.prototype);
    FormModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    FormModel.prototype.get = function (name, requireOrFail, callback) {
        var self = this;
        self.init();
        if (self.data[name]) {
            self.log.debug('returning form from cache: ' + name);
            if (callback)
                callback(self.data[name]);
            return self.data[name];
        }
        //The api expects the form name to begin with the word 'form'
        var endpoint = 'form' + name.charAt(0).toUpperCase() + name.substr(1);
        return self.api.get('/forms/' + endpoint).then(function (success) {
            self.log.debug('successfuly retrieved form from api: ' + name);
            self.log.debug(success);
            //Log.debug('saving form: ' + name);
            self.data[name] = success.data.data;
            self.save();
            if (callback)
                callback(self.data[name]);
            return self.data[name];
        });
    };
    angular.module('pp.core').service('FormModel', FormModel);
    function InviteModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService);
        this.setStorageKey('INVITE');
        this.errorMessage = 'There was a problem loading the requested form.';
        this.data = {
            find: { number: undefined },
            clientType: undefined,
            clientConfirmed: false,
            borrowerAssessmentComplete: false,
            // client data as officially created in the db and returned from the api
            // this includes the companies house data and the details form
            client: { clientData: { managerAssessment: {} } },
            // primary user data
            primary_user: {}
        };
    }
    ;
    InviteModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService'
    ];
    InviteModel.prototype = Object.create(BaseModel.prototype);
    InviteModel.prototype.forget = function () {
        this.data = {
            find: { number: '' },
            clientType: undefined,
            clientConfirmed: false,
            borrowerAssessmentComplete: false,
            // client data as officially created in the db and returned from the api
            // includes companies house data, details form, and managerAssessment
            client: { clientData: {} },
            // primary user data
            primary_user: {}
        };
        this.refreshCache();
        return this.data;
    };
    InviteModel.prototype.findCompany = function (number, clientType) {
        var self = this;
        if (self.data.client.clientNumber == number) {
            return self.continueInvite();
        }
        return this.api.get('/company/search/' + number).then(function (success) {
            self.data.client = _.extend(self.data.client, success.data.data, { clientType: clientType });
            self.save();
            return self.state.go('invite.client.confirm', { clientNumber: self.data.client.clientNumber });
        }, function (error) {
            // At this point only need to unset the find number
            // forgetting and resetting the cache is preventing the form from
            // overriding the value in the scope again so always treated as undefined.
            self.data.find.number = '';    // self.forget();
                                           // /self.state.go('invite.find', {clientType: clientType});
        });
    };
    InviteModel.prototype.continueInvite = function () {
        this.state.go('invite.client.confirm', { clientNumber: this.data.client.clientNumber });
    };
    InviteModel.prototype.updateClient = function (state) {
        console.log('Update client: ');
        console.log(this.data.client);
        return this.api.put('/client/' + this.data.client.clientName, this.data.client);
    };
    InviteModel.prototype.getClientByNumber = function (number) {
        console.log('fetching: ' + number);
        return this.api.get('/client/number/' + number);
    };
    // resolve the client model from the api and return the clientType
    // this method supprts both clientNumber or uid as the "number" argument
    // the "type" argument is used to specify which has been used (clientNumber by default)
    InviteModel.prototype.resolveClientType = function (number, type) {
        var self = this;
        self.init();
        type = type || 'clientNumber';
        this.log.debug('resolving client type using key: ' + type);
        if (self.data.client[type] == number) {
            self.log.debug('returning client from cache');
            self.log.debug(InviteModel.data);
            if (self.data.client.clientStatus == 'confirmed') {
                return self.abort('This client has already been invited');
            }
            return self.data.client.clientType;
        }
        this.log.debug('fetching client from api using key: ' + type);
        // get the client from the db
        var endpoint = type === 'clientNumber' ? 'number' : 'uid';
        return self.api.get('/client/' + endpoint + '/' + number).then(function (success) {
            console.log(success);
            self.data.client = success.data.data;
            // has the borrower assessment been completed?
            var clientType = self.data.client.clientType;
            var assessment = self.data.client.clientData.managerAssessment;
            //Log.debug(Object.keys(assessment).length);
            if (clientType === 'borrower' && assessment && Object.keys(assessment).length) {
                self.data.borrowerAssessmentComplete = true;
            }
            // not to be confused with the clientStatus field
            // this just indicates that the user is inviting the right client
            self.data.clientConfirmed = true;
            self.save();
            console.log(self.data);
            if (self.data.client.clientStatus == 'confirmed') {
                return self.abort('This client has already been invited');
            }
            return self.data.client.clientType;
        }, function (error) {
            console.log(error);
            return self.abort('The client you requested could not be found');
        });
    };
    InviteModel.prototype.putManagerAssessment = function (clientName) {
        console.log(this.data);
        var assessment = this.data.client.clientData.managerAssessment;
        //
        //var data = {
        //    "industrySector": assessment.industrySector,
        //    "knownClientYears": assessment.knownClientYears,
        //    "turnoverPrevious": assessment.turnoverPrevious,
        //    "turnoverProjected": assessment.turnoverProjected,
        //    "avgInvoiceSize": assessment.avgInvoiceSize,
        //    "daysSalesOutstanding": assessment.daysSalesOutstanding,
        //    "invoiceFinancePrevious": assessment.invoiceFinancePrevious,
        //    "invoiceFinanceReplace": assessment.invoiceFinanceReplace,
        //    "customerBase": assessment.customerBase,
        //    "customerType": assessment.customerType,
        //    "borrowerRating": assessment.borrowerRating,
        //    "expandBusiness": assessment.expandBusiness
        //};
        return this.api.put('/borrower/assessment/' + clientName, assessment);
    };
    InviteModel.prototype.postInvitePrimary = function () {
        var self = this;
        var email = self.data.primaryUser.emailUsername + '@' + self.data.client.emailDomain;
        var data = _.extend(self.data.primaryUser, {
            clientType: self.data.client.clientType,
            clientName: self.data.client.clientName,
            email: email
        });
        return self.api.post('/auth/invite/primary', data).then(function (success) {
            console.log(success);
            if (success.status == 200) {
                self.forget();
                self.goHome();
                self.flash.success('The client was successfully invited', true);
            }
        });
    };
    angular.module('pp.core').service('InviteModel', InviteModel);
    function InvoiceModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, AuthModel) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.user = AuthModel;
        this.setStorageKey('INVOICES');
        this.indexInterval = this.globals.INVOICE_INDEX_INTERVAL;
        this.data = {
            lastImport: false,
            lastIndex: false,
            summary: {},
            index: [],
            import: [],
            importQueue: {},
            inProgress: [],
            statuses: {
                invoicesInProgress: [
                    'submitted',
                    'allocated',
                    'approved',
                    'confirmed',
                    'payment_pending'
                ],
                invoicesAllocated: 'allocated',
                invoicesSubmitted: 'submitted',
                invoicesRejected: [
                    'rejected',
                    'offer_expired',
                    'loan_cancelled'
                ],
                invoicesAuthorized: 'approved',
                invoicesOverdue: 'active_loan',
                // Borrower specifc
                invoicesPendingPayment: 'payment_pending',
                invoicesWithDrawn: 'withdrawn'
            }
        };
    }
    ;
    InvoiceModel.prototype = Object.create(BaseModel.prototype);
    InvoiceModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel'
    ];
    InvoiceModel.prototype.setTimestamp = function (save) {
        this.data.lastImport = this.getTimestamp();
        if (save) {
            this.save();
        }
    };
    InvoiceModel.prototype.getIndex = function (params) {
        return this.api.get('invoice', params);
    };
    InvoiceModel.prototype.getAllIndex = function (clientType) {
        //lenders do not see invoices
        if (clientType == 'lender')
            return true;
        var self = this;
        self.init();
        if (!self.checkIndexInterval(self.data.lastIndex)) {
            self.log.debug('has been indexed too recently, use existing data');
            self.log.debug(self.data.index);
            return self.data.index;
        }
        return self.getIndex().then(function (success) {
            self.data.index = success.data.data;
            self.save();
            return success.data.data;
        });
    };
    InvoiceModel.prototype.getCachedInvoice = function (invoiceNumber) {
        return this.api.get('invoice/cache/' + invoiceNumber);
    };
    InvoiceModel.prototype.getQueuedInvoices = function () {
        var self = this;
        var params = { invoiceStatus: 'queued' };
        return self.api.get('invoice/cache', params).then(function (success) {
            self.log.debug('retrieved queued invoices');
            self.log.debug(success);
            success.data.data.forEach(function (invoice) {
                self.saveInvoice('import', invoice);
            });
        });
    };
    InvoiceModel.prototype.updateCachedInvoiceStatus = function (status, invoiceNumbers) {
        return this.api.put('invoice/cache/status/' + status, { invoiceNumber: invoiceNumbers });
    };
    InvoiceModel.prototype.importInvoices = function (state) {
        var self = this;
        self.init();
        self.log.debug('importing invoices');
        if (!self.user.data.client.clientData.brandingThemeId) {
            self.log.debug('branding theme failed checked');
            self.flash.info('Please complete your registration', true);
            return self.state.go('setup.borrower.invoice-template');
        }
        self.log.debug(self.data.lastImport);
        self.log.debug(self.checkTimestamp());
        if (!self.checkTimestamp()) {
            self.log.debug('was updated less than 3 mins ago');
            return true;
        }
        var callbackState = state || self.state.current.name;
        return self.api.get('invoice/import', { state: callbackState }).then(function (success) {
            self.log.debug('invoices are being retrieved');
            self.flashImportMsg();
            self.setTimestamp();
            return success;
        }, function (error) {
            self.log.debug('invoices were not succesfully retrieved');
            self.log.debug(error);
        });
    };
    InvoiceModel.prototype.importInvoiceByNumber = function (number, state) {
        var self = this;
        var callbackState = state || self.state.current.name;
        return self.api.get('invoice/import/' + number, { state: callbackState }).then(function (success) {
            self.log.debug(success);
            self.saveInvoice('import', success.data.data);
        }, function (error) {
            self.log.debug('invoices were not succesfully retrieved');
            self.log.debug(error);
        });
    };
    /**
 * Retrieves an invoice contact address
 *
 * @param  {String} invoiceNumber
 * @param  {String} state
 */
    InvoiceModel.prototype.importInvoiceContact = function (invoiceNumber, state) {
        var self = this;
        self.log.debug('Get invoice contact');
        self.init();
        var callbackState = state || self.state.current.name;
        self.log.debug('Contact Callback state');
        self.log.debug(callbackState);
        return self.api.get('invoice/contact/' + invoiceNumber, { state: callbackState }).then(function (success) {
            self.log.debug('invoice contact retrieved');
            self.log.debug(success);
            return success;
        }, function (error) {
            self.log.debug('invoices contact were not succesfully retrieved');
            self.log.debug(error);
        });
    };
    InvoiceModel.prototype.submitInvoice = function (invoiceNumber, params, state) {
        var callbackState = state || this.state.current.name;
        params['state'] = callbackState;
        this.log.debug('Submit Invoice Data');
        this.log.debug(params);
        return this.api.put('invoice/submit/' + invoiceNumber, params);
    };
    InvoiceModel.prototype.checkTimestamp = function (minSeconds) {
        //the minimum seconds required to wait before reimporting the invoices
        minSeconds = minSeconds || this.globals.ACCOUNTING_INTERVAL;
        if (this.getTimestamp() < this.data.lastImport + minSeconds) {
            return false;
        }
        return true;
    };
    InvoiceModel.prototype.checkCredentials = function () {
        return this.notifier.accountingAuthorized;
    };
    InvoiceModel.prototype.saveInvoice = function (destination, invoice, state) {
        if (!invoice || !invoice.invoiceNumber) {
            this.log.error('saveInvoice requires a valid invoiceNumber', 'InvalidArgumentException', invoice);
            return false;
        }
        this.log.debug('Save invoice to destination: ' + destination);
        this.log.debug(invoice);
        if (!this.data[destination]) {
            this.data[destination] = [];
        }
        this.updateArrayObject(this.data[destination], { invoiceNumber: invoice.invoiceNumber }, invoice);
        this.save();
        this.log.debug(this.data[destination]);
        if (state) {
            this.state.go(state);
        }
        //Log.debug(this.data);
        return this.data[destination];
    };
    InvoiceModel.prototype.deleteInvoice = function (source, invoice, state) {
        if (!invoice || !invoice.invoiceNumber) {
            this.log.error('deletInvoice requires a valid invoiceNumber', 'InvalidArgumentException', invoice);
            return false;
        }
        this.log.debug('Deleting invoice from ' + source);
        this.deleteArrayObject(this.data[source], { invoiceNumber: invoice.invoiceNumber }, invoice);
        this.save();
        this.log.debug(this.data[source]);
        if (state) {
            this.state.go(state);
        }
        //Log.debug(this.data);
        return this.data[source];
    };
    InvoiceModel.prototype.flashImportMsg = function (next) {
        this.flash.success('We are currently retrieving the invoices from your accountancy system', next);
    };
    angular.module('pp.core').service('InvoiceModel', InvoiceModel);
    function LoanModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, AuthModel) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.user = AuthModel;
        this.setStorageKey('LOANS');
        this.data = {
            lastImport: false,
            loanOffer: undefined,
            summary: {},
            statuses: {
                loansPending: 'confirmed',
                loansAccepted: 'confirmed',
                loansActive: 'active_loan',
                loansCancelled: 'loan_cancelled',
                loansWithdrawn: 'withdrawn',
                loansPaymentPending: 'payment_pending',
                loansPaid: 'paid',
                loansSettled: 'settled'
            }
        };
    }
    ;
    LoanModel.prototype = Object.create(BaseModel.prototype);
    LoanModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel'
    ];
    LoanModel.prototype.getIndex = function (params) {
        return this.api.get('loan', params);
    };
    /*-----------------------------------------*\
    Borrower actions
/*-----------------------------------------*/
    /**
 * Get Loan Offers associated to a borrower
 *
 * @return {Object}
 */
    LoanModel.prototype.getLoanOffers = function () {
        console.log('Firing get loan offers');
        var self = this;
        return self.api.get('loan/offer').then(function (success) {
            console.log('Retrieved loan offers');
            console.log(success);
            self.data.loanOffers = success.data.data;
            self.save();
            return self;
        }, function (error) {
            console.log(error);
        });
    };
    /**
 * Get Lender assoicated investments

 * @return {Object}
 */
    LoanModel.prototype.getLenderInvestments = function (clientName) {
        return this.api.get('/loan/lender/' + clientName + '/investment', {});
    };
    /**
 * Retrieve a single loan offer by invoice number
 *
 * @param  {String} number
 * @return {Object}
 */
    LoanModel.prototype.getLoanOffer = function (number) {
        console.log('Firing get loan offer');
        var self = this;
        return self.api.get('loan/offer/' + number).then(function (success) {
            console.log('Retrieved loan offer');
            console.log(success);
            self.data.loanOffer = success.data.data;
            self.save();
            return self;
        }, function (error) {
            console.log(error);
        });
    };
    /**
 * Authenticates an offer and send message
 *
 * @param  {String} number - Invoice number to authenciate
 * @param  {Array} data
 * @return {Object}
 */
    LoanModel.prototype.authenticateOffer = function (number, data) {
        return this.api.post('loan/offer/' + number + '/authenticate', data);
    };
    /**
 * Verifies an offer and send message
 *
 * @param  {String} number - Invoice number to authenciate
 * @param  {Array} data
 * @return {Object}
 */
    LoanModel.prototype.verifyOffer = function (number) {
        console.log(this.data);
        var data = {
            token: this.data.loanOffer.token,
            messageType: this.data.loanOffer.messageType,
            secret: this.serializeToken(this.data.loanOffer.verify.secret)
        };
        return this.api.post('loan/offer/' + number + '/verify', data);
    };
    /**
 * Declines a loan offer
 *
 * @param  {String} number
 * @return {Object}
 */
    LoanModel.prototype.declineOffer = function (number) {
        console.log('Decline offer action');
        return this.api.put('loan/offer/' + number + '/decline', {});
    };
    angular.module('pp.core').service('LoanModel', LoanModel);
    function NotificationModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, AuthModel) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.user = AuthModel;
        this.setStorageKey('NOTIFICATION');
        this.errorMessage = 'We could not load the registration data';
        this.data = {
            // the terms modal pop up
            terms: false,
            // service manager - inviting user
            invitingUser: {},
            // email data
            emailToken: {
                a: '',
                b: '',
                c: '',
                d: ''
            },
            // mobile data
            mobileToken: {
                a: '',
                b: '',
                c: '',
                d: ''
            }
        };
    }
    ;
    NotificationModel.prototype = Object.create(BaseModel.prototype);
    NotificationModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel'
    ];
    NotificationModel.prototype.getUserByInviteToken = function (token) {
        var self = this;
        console.log('getting token: ' + token);
        return self.api.get('/notification/token/' + token).then(function (success) {
            console.log(success);
            self.data = _.extend(self.data, success.data.data);
            self.save();
            return self.data;
        }, function (error) {
            console.log('error fetching token');
            if (self.user.check()) {
                self.user.logout();
            }
            self.state.go('index');
        });
    };
    NotificationModel.prototype.forget = function () {
        this.data = {
            // the terms modal pop up
            terms: false,
            // service manager - inviting user
            invitingUser: {},
            // email data
            emailToken: {},
            // mobile data
            mobileToken: {}
        };
        this.refreshCache();
    };
    NotificationModel.prototype.getEmailToken = function () {
        var self = this;
        var data = {
            username: self.data.username,
            email: self.data.email,
            password: self.data.password,
            passwordConfirmation: self.data.passwordConfirmation,
            firstName: self.data.firstName,
            lastName: self.data.lastName,
            acceptTerms: self.data.acceptTerms,
            linkKey: self.data.linkKey
        };
        return self.api.post('/auth/token/email', data);
    };
    NotificationModel.prototype.getMobileToken = function (vm) {
        var self = this;
        var data = {
            username: self.data.username,
            mobile: self.data.mobile,
            password: self.data.password
        };
        return self.api.post('/auth/token/mobile', data);
    };
    NotificationModel.prototype.postActivateEmail = function () {
        var self = this;
        console.log('posting email token');
        console.log(self.data);
        var tokenSecret = self.serializeToken(self.data.emailToken.secret);
        console.log(tokenSecret);
        var data = {
            username: self.data.username,
            email: self.data.email,
            password: self.data.password,
            passwordConfirmation: self.data.passwordConfirmation,
            firstName: self.data.firstName,
            lastName: self.data.lastName,
            acceptTerms: self.data.acceptTerms,
            linkKey: self.data.linkKey,
            tokenKey: self.data.emailToken.tokenId,
            tokenSecret: tokenSecret
        };
        return self.api.post('/auth/activate/email/' + tokenSecret, data);
    };
    NotificationModel.prototype.postActivateMobile = function () {
        var self = this;
        var tokenSecret = self.serializeToken(self.data.mobileToken.secret);
        var data = {
            username: self.data.username,
            password: self.data.password,
            mobile: self.data.mobile,
            linkKey: self.data.linkKey,
            tokenKey: self.data.mobileToken.tokenId,
            tokenSecret: tokenSecret
        };
        return self.api.post('/auth/activate/mobile/' + tokenSecret, data);
    };
    NotificationModel.prototype.resendInvitation = function (username, linkKey) {
        var self = this;
        return self.api.post('notification/resend', {
            username: username,
            linkKey: linkKey
        });
    };
    angular.module('pp.core').service('NotificationModel', NotificationModel);
    function StorageModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, azureBlob, $timeout) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('STORAGE');
        this.blob = azureBlob;
        this.timeout = $timeout;
        this.data = {
            uploadInProgress: false,
            signature: undefined,
            // current access signature
            container: undefined,
            // list of files in container
            azure: undefined,
            // data to send to azure
            registry: {
                // uploaded files
                fundsConfirmation: [],
                purchaseOrder: [],
                invoiceEvidence: []
            }
        };
        this.fileWaitCount = 0;
        this.maxWaitCount = 5;    // 5 seconds
    }
    ;
    StorageModel.prototype = Object.create(BaseModel.prototype);
    StorageModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'azureBlob',
        '$timeout'
    ];
    StorageModel.prototype.getClientContainer = function (clientName, container, params) {
        return this.api.get('/storage/' + clientName + '/' + container, params);
    };
    StorageModel.prototype.postBlob = function (scope, signature, file, data, completionCallback) {
        var self = this;
        self.data.signature = signature;
        self.data.uploadInProgress = true;
        self.save();
        var defaultCallback = function () {
            self.saveOnCompletion(data, data.namespace, scope);
        };
        completionCallback = completionCallback || defaultCallback;
        return self.blob.upload({
            baseUrl: signature.baseUrl + '/' + data.path,
            sasToken: '?' + signature.params,
            file: file,
            complete: completionCallback
        });
    };
    StorageModel.prototype.getAccessSignature = function (type, container, resource, options) {
        var self = this;
        var url = '/storage/access/' + type + '/' + container;
        if (resource) {
            url += '/' + resource;
            options['resource'] = resource;
        }
        return self.api.get(url, options).then(function (success) {
            console.log('successfully retrieved storage url:');
            console.log(success);
            self.data.signature = success.data.shared_access_signature;
            self.save();
            return self.data.signature;
        }, function (error) {
            console.log(error);
            return self.abort();
        });
    };
    StorageModel.prototype.saveOnCompletion = function (data, registryNamespace, scope) {
        var self = this;
        var data = data || self.data.azure;
        if (!data || !Object.keys(data).length) {
            console.log('no azure file exists');
            return self.abort();
        }
        return self.api.post('/storage/registry', data).then(function (success) {
            var file = success.data.data;
            self.log.debug('saving file in registry namespace: ' + registryNamespace);
            if (!self.data.registry[registryNamespace]) {
                self.data.registry[registryNamespace] = [file];
            } else {
                self.data.registry[registryNamespace].push(file);
            }
            self.save();
            return self.finishUpload(scope, self.data.registry[registryNamespace]);
        }, function (error) {
            self.log.debug('file could not be saved to api');
            return self.finishUpload(scope, self.data.registry[registryNamespace]);
        });
    };
    StorageModel.prototype.finishUpload = function (scope, modelData) {
        var self = this;
        self.data.uploadInProgress = false;
        self.save();
        //self.log.debug(JSON.stringify(data));
        //scope.$emit('fileUpload', file);
        scope.finishUpload(modelData);
        return self.data;
    };
    StorageModel.prototype.clearRegistry = function (key) {
        if (!key || !this.data.registry || key == '*') {
            this.data.registry = {};
        } else {
            this.data.registry[key] = [];
        }
        this.save();
        return true;
    };
    StorageModel.prototype.checkFileUpload = function (key) {
        var self = this;
        self.log.debug('storage registry is:');
        self.log.debug(self.data.registry);
        //if(!self.data.registry) {
        //    if(!self.data.uploadInProgress || (self.fileWaitCount > self.maxWaitCount)) {
        //        return false;
        //    } else {
        //        self.fileWaitCount += 1;
        //        self.timeout(function(){
        //            return self.checkFileUpload();
        //        }, 1000); // wait 1 second
        //    }
        //}
        if (self.data.registry && self.data.registry[key]) {
            return true;
        }
        return false;
    };
    // determine if the user has an access signature with the correct permissions
    // resource parameter is optional
    StorageModel.prototype.hasAccess = function (container, permissions, resource) {
        if (self.data.signature && Object.keys(self.data.signature).length) {
            if (self.data.signature.container == container && permissions.indexOf(self.data.signature.permissions) !== -1 && self.data.signature.expiry > Date.now().slice(0, 8)) {
                if (!resource || resource == self.data.signature.resourceName) {
                    console.log('user already has permission to write to this container');
                    return self.data.signature;
                }
            }
        }
        return false;
    };
    StorageModel.prototype.deleteFile = function (file) {
        var self = this;
        Object.keys(self.data.registry).forEach(function (key) {
            if (self.data.registry[key].length) {
                self.deleteArrayObject(self.data.registry[key], { uid: file.uid });
                if (self.data.registry[key] === undefined) {
                    self.data.registry[key] = [];
                }
            }
        });
    };
    StorageModel.prototype.postToApi = function (folder, file) {
        //Log.debug('posting file directly to the api');
        //Log.debug(file);
        var self = this;
        var fd = new FormData();
        fd.append('file', file);
        fd.append('folder', folder);
        var opts = {
            url: self.api.getApiUrl('storage/file'),
            method: 'POST',
            data: fd,
            transformRequest: angular.identity,
            headers: { 'Content-Type': undefined }
        };
        return self.api.call(opts).then(function (success) {
            console.log(success);
        }, function (error) {
            console.log(error);
        });
    };
    angular.module('pp.core').service('StorageModel', StorageModel);
    function SummaryModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('SUMMARY');
        this.data = { summary: [] };
    }
    ;
    SummaryModel.prototype = Object.create(BaseModel.prototype);
    SummaryModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier'
    ];
    SummaryModel.prototype.index = function (params) {
        this.log.debug('Index summary data');
        var self = this;
        return this.api.get('summary').then(function (success) {
            self.log.debug('Summary index method');
            self.log.debug(success);
            success.data.data.forEach(function (summary) {
                self.data.summary[summary.key] = summary;
            });
            self.save();
            return self.data.summary;
        });
    };
    SummaryModel.prototype.getByKey = function (key) {
        this.log.debug('Get summary key: ' + key);
        return this.api.get('summary/' + name);
    };
    SummaryModel.prototype.getKeyEntities = function (key) {
        var self = this;
        self.log.debug('fetching summary data for key: ' + key);
        self.api.get('/summary' + key + '/entities').then(function (success) {
            self.log.debug(success);
            if (!self.data[key]) {
                self.data[key] = success.data.data[key];
            }
            return success.data;
        });
    };
    angular.module('pp.core').service('SummaryModel', SummaryModel);
    function UserModel(_, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier, AuthModel) {
        BaseModel.call(this, _, Log, AppGlobals, ApiService, $state, localStorageService, Flash, CryptService, AppNotifier);
        this.setStorageKey('USER');
        this.user = AuthModel;
        this.data = {
            env: undefined,
            summary: {}
        };
    }
    ;
    UserModel.prototype = Object.create(BaseModel.prototype);
    UserModel.$inject = [
        '_',
        'Log',
        'AppGlobals',
        'ApiService',
        '$state',
        'localStorageService',
        'Flash',
        'CryptService',
        'AppNotifier',
        'AuthModel'
    ];
    angular.module('pp.core').service('UserModel', UserModel);
    angular.module('pp.core').filter('amountByPerc', [
        '$filter',
        function ($filter) {
            return function (value, perc) {
                var perc = perc / 100;
                var newValue = value - value * perc;
                return $filter('customCurrency')(newValue);
            };
        }
    ]);
    angular.module('pp.core').filter('camelCaseToHuman', [
        '$filter',
        function ($filter) {
            return function (string) {
                return $filter('uppercaseFirst')(convert(string));
            };
            function convert(string) {
                return string.split(/(?=[A-Z])/).join(' ');
            }
        }
    ]);
    angular.module('pp.core').filter('clientStatusDisplay', [
        '$filter',
        'AppGlobals',
        function ($filter, AppGlobals) {
            return function (client) {
                var status = $filter('clientStatus')(client);
                return AppGlobals.CLIENT_STATUS[status.toUpperCase()];
            };
        }
    ]);
    angular.module('pp.core').filter('clientStatus', [
        'AppGlobals',
        function (AppGlobals) {
            return function (client) {
                if (client.clientStatus == 'suspended' || client.clientStatus == 'blocked') {
                    return 'rejected';
                }
                if (client.clientStatus == 'confirmed') {
                    if (client.clientData.authorization.detailsQueried == true) {
                        return 'queried';
                    }
                    if (client.clientData.authorization.clientAuthorized) {
                        return 'active';
                    }
                    if (!client.clientData.authorization.bankAccountConfirmed) {
                        return 'in_reg';
                    }
                    return 'awaiting';
                }
                if (client.clientStatus == 'unconfirmed' || client.clientStatus == 'preparation') {
                    return 'pre_reg';
                }
            };
        }
    ]);
    angular.module('pp.core').filter('customCurrency', [
        'AppGlobals',
        '$filter',
        function (AppGlobals, $filter) {
            var defaultFilter = $filter('currency');
            return function (value) {
                var envCurrency = AppGlobals.CURRENCY;
                return defaultFilter(value, getCurrencySymbol(envCurrency));
            };
            /**
     * Map currency code to their symbols
     *
     * @param  {String} code
     * @return {String}
     */
            function getCurrencySymbol(code) {
                switch (code.toUpperCase()) {
                case 'EUR':
                    return '\u20AC';
                case 'USD':
                case 'MXN':
                case 'CAD':
                case 'AUD':
                case 'NZD':
                case 'HKD':
                case 'SGD':
                case 'ARS':
                    return '$';
                case 'CNY':
                case 'JPY':
                    return '\xA5';
                case 'GBP':
                case 'GIP':
                    return '\xA3';
                case 'BRL':
                    return 'R$';
                case 'INR':
                    return 'Rp';
                case 'CHF':
                    return 'Fr';
                case 'SEK':
                case 'NOK':
                    return 'kr';
                case 'KPW':
                case 'KRW':
                    return '\u20A9';
                default:
                    return code;
                }
            }
        }
    ]);
    angular.module('pp.core').filter('daysOfMonth', [function () {
            return function (days, month) {
                if (month == '' || !month) {
                    month = '01';
                }
                var month = new Date(new Date().getFullYear(), month - 1);
                return buildDays(daysInMonth(month));
            };
            /**
     * Calculates the number of days in a given month
     *
     * @param  {Object} date
     * @return {Integer}
     */
            function daysInMonth(date) {
                var numberOfDays = new Date(date.getYear(), date.getMonth() + 1, 0).getDate();
                return numberOfDays;
            }
            /**
     * Builds up array of days
     *
     * @param  {Integer} numberOfDays
     * @return {Array}
     */
            function buildDays(numberOfDays) {
                var days = [];
                for (var i = 1; i <= numberOfDays; i++) {
                    var num = i;
                    if (i < 10) {
                        num = '0' + i;
                    }
                    days.push(num);
                }
                return days;
            }
        }]);
    angular.module('pp.core').filter('feesCurrency', [
        'AppGlobals',
        '$filter',
        function (AppGlobals, $filter) {
            var defaultFilter = $filter('currency');
            /**
     * Fees coming from Oracle are either a string
     * concatenated by a dash or just a decimal.
     * This filter explodes the string and appends the environemnt
     * currency symbol before each value and rejoins with the dash
     *
     * @param  {String} value
     * @return {String}
     */
            return function (value) {
                var splitValue = value.split('-');
                var amount = [];
                for (var i = 0; i <= splitValue.length - 1; i++) {
                    if (splitValue[i]) {
                        amount.push($filter('customCurrency')(splitValue[i]));
                    }
                }
                return amount.join('-');
            };
        }
    ]);
    angular.module('pp.core').filter('filterMultiObject', [
        'DotObject',
        '$filter',
        'AppGlobals',
        'Log',
        function (DotObject, $filter, AppGlobals, Log) {
            /**
     * Parses a key based on whether it's a single key or
     * donated by dots to represent multi level properties
     * then puts it into an object to be able to be used for filtering
     *
     * @param  {String} key
     * @param  {Object} obj
     * @param  {[type]} fObj - Objected used for filtering
     * @return {Object}
     */
            function parseKey(key, value, fObj) {
                if (key.split('.').length > 1) {
                    return DotObject.str(key, value, fObj);
                }
                fObj[key] = value;
                return fObj;
            }
            /**
     * Takes an array of objects and filters by a collection of keys
     * by making use of angulars own collection filter
     *
     * Example uses:
     *
     * {{object | filterMultiObject:{'property.nested.property': 'unconfirmed'})
     * {{object | filterMultiObject:{'property.nested.property': ['unconfirmed', 'confirmed']})
     * {{object | filterMultiObject:{'property': ['unconfirmed', 'confirmed'], 'property.nested.property': 'confirmed'})
     *
     * @param  {Array} items
     * @param  {Mixed} keyObj
     * @return {Array}
     */
            return function (items, keyObj) {
                var filterObj = {
                    data: items,
                    filteredData: [],
                    iteratedFilter: [],
                    count: 0,
                    applyFilter: function (value, key) {
                        if (this.data && this.data.length > 0) {
                            var fData = [];
                            // if (this.iteratedFilter && this.iteratedFilter.length == 0) {
                            //     this.filteredData = this.data;
                            // }
                            // Upon first iteration set the data to filter,
                            // this will then be overidden with every search
                            // to continually filter down the results
                            if (this.count == 0) {
                                this.filteredData = this.data;
                            }
                            var fObj = {};
                            if (!angular.isArray(value)) {
                                fObj = parseKey(key, value, fObj);
                                fData = fData.concat($filter('filter')(this.filteredData, fObj));
                                this.count++;
                            } else if (angular.isArray(value)) {
                                if (value.length > 0) {
                                    for (var i = 0; i < value.length; i++) {
                                        if (angular.isDefined(value[i])) {
                                            fObj = parseKey(key, value[i], fObj);
                                            fData = fData.concat($filter('filter')(this.filteredData, fObj));
                                        }
                                    }
                                }
                                this.count++;
                            }
                            this.filteredData = fData;
                        }
                    }
                };
                if (keyObj) {
                    angular.forEach(keyObj, function (obj, key) {
                        filterObj.applyFilter(obj, key);
                    });
                }
                return filterObj.filteredData;
            };
        }
    ]);
    angular.module('pp.core').filter('hasPayerurl', [
        '$sce',
        function ($sce) {
            return function (value) {
                var fileExists = value || false;
                return fileExists ? 'yes' : 'no';
            };
        }
    ]);
    angular.module('pp.core').filter('rating', [
        '$sce',
        function ($sce) {
            return function (value) {
                return value == 0 ? 'Not rated' : value;
            };
        }
    ]);
    angular.module('pp.core').filter('sanitize', [
        '$sce',
        function ($sce) {
            return function (value) {
                return $sce.trustAsHtml(value);
            };
        }
    ]);
    angular.module('pp.core').filter('searchObject', [function () {
            return function (obj, key) {
                return findByKey(obj, key);
            };
            /**
     * Retrives a value by a given property in an object
     *
     * @param {Object} object
     * @param {String} key
     * @return {String}
     */
            function findByKey(obj, key) {
                var j, key = key || '', obj = obj || {}, keys = key.split('.'), sObj = [], ssObj = [], isSelector = !!(keys.length > 0);
                var findKey = function (obj, key) {
                    var k;
                    for (k in obj) {
                        if (k === key) {
                            sObj.push(obj[k]);
                        } else if (typeof obj[k] == 'object') {
                            findKey(obj[k], key);
                        }
                    }
                };
                if (isSelector) {
                    var nKey = keys.shift();
                    findKey(obj, nKey);
                    while (keys.length > 0) {
                        nKey = keys.shift();
                        if (sObj.length > 0) {
                            ssObj = sObj.slice(0), sObj = [];
                            for (j in ssObj) {
                                findKey(ssObj[j], nKey);
                            }
                        }
                    }
                } else {
                    findKey(obj, key);
                }
                return sObj.length === 1 ? sObj.pop() : sObj;
            }
        }]);
    angular.module('pp.core').filter('selectedObjects', function () {
        return function (inputArray, selectedArray, indexBy) {
            var output = inputArray.filter(function (inputItem) {
                console.log('logging inputItem');
                console.log(inputItem);
                console.log(inputItem[indexBy]);
                for (var selected in selectedArray) {
                    if (inputItem[indexBy].indexOf(selected) != -1) {
                        return true;
                    }
                }
                return false;
            });
        };
    });
    angular.module('pp.core').filter('timeAgainst', [
        'DotObject',
        '$filter',
        'AppGlobals',
        'Log',
        function (DotObject, $filter, AppGlobals, Log) {
            return function (items, keyObj, dateKey) {
                var results = $filter('filterMultiObject')(items, keyObj);
                var fromDate = moment().subtract(AppGlobals.FILTER_TIME).unix();
                var result = [];
                for (var i = 0; i <= results.length; i++) {
                    var value = $filter('searchObject')(results[i], dateKey);
                    if (value && typeof value === 'string') {
                        var toDate = moment(value).unix();
                        if (moment(fromDate).isAfter(toDate)) {
                            result.push(results[i]);
                        }
                    }
                }
                return result;
            };
        }
    ]);
    angular.module('pp.core').filter('totalAmount', [
        'DotObject',
        '$filter',
        'AppGlobals',
        'Log',
        function (DotObject, $filter, AppGlobals, Log) {
            /**
     * Filters a collection and then rallies up the total
     * for a given key
     *
     * Example use:
     * {{(invoices | totalAmount:{'clientStatus': 'confirmed'}:'invoiceData.invoiceNetValue') }}
     *
     * @param  {Object} items
     * @param  {Object} keyObj
     * @param  {String} amountKey
     * @return {String} - Filtered currency result
     */
            return function (items, keyObj, amountKey) {
                var results = $filter('filterMultiObject')(items, keyObj);
                var totalAmount = 0;
                for (var i = 0; i <= results.length; i++) {
                    var value = $filter('searchObject')(results[i], amountKey);
                    // Search sometimes brings back an array if number is string
                    if (Array.isArray(value)) {
                        value = value[0];
                    }
                    value = Number(value);
                    if (!isNaN(+value) && isFinite(value)) {
                        totalAmount += value;
                    }
                }
                return $filter('customCurrency')(totalAmount);
            };
        }
    ]);
    angular.module('pp.core').filter('totalUnique', [
        'DotObject',
        '$filter',
        'AppGlobals',
        'Log',
        function (DotObject, $filter, AppGlobals, Log) {
            return function (items, keyObj, uniqueKey) {
                var results = $filter('filterMultiObject')(items, keyObj);
                var unique = [];
                var result = [];
                if (results.length > 0) {
                    for (var i = 0; i <= results.length - 1; i++) {
                        var value = $filter('searchObject')(results[i], uniqueKey);
                        if (value && unique.indexOf(value) == -1) {
                            unique.push(value);
                            result.push(results[i]);
                        }
                    }
                }
                return result;
            };
        }
    ]);
    angular.module('pp.core').filter('uppercaseFirst', [
        'Log',
        function (Log) {
            return function (input) {
                return !!input ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
            };
        }
    ]);
    angular.module('pp.core').filter('withdrawnReason', [
        '$filter',
        'AppGlobals',
        function ($filter, AppGlobals) {
            return function (status) {
                return AppGlobals.WITHDRAWN_REASON[status.toUpperCase()];
            };
        }
    ]);
    angular.module('pp.core').provider('$exceptionHandler', {
        $get: function (ExceptionHandler) {
            return ExceptionHandler;
        }
    });
    angular.module('pp.core').directive('allCaps', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function (input) {
                    return input ? input.toUpperCase() : '';
                });
                element.css('text-transform', 'uppercase');
            }
        };
    });
    angular.module('pp.core').directive('autoFocus', function () {
        return {
            restrict: 'A',
            link: function ($scope, $element, $attr, $form) {
                var index = parseInt($attr.tabindex);
                var max = $attr.maxlength;
                $element.on('keyup', function (e) {
                    if ($element.val().length > max - 1) {
                        var next = angular.element(document.querySelector('[tabindex="' + (index + 1) + '"]'));
                        if (next.length > 0) {
                            next[0].focus();
                            return next.triggerHandler('keyup', { which: e.which });
                        } else {
                            return false;
                        }
                        return true;
                    }
                });
            }
        };
    });
    angular.module('pp.core').directive('azureDownload', [
        'Log',
        'StorageModel',
        'AuthModel',
        'AppGlobals',
        function (Log, StorageModel, AuthModel, AppGlobals) {
            return {
                restrict: 'E',
                scope: {},
                template: '<a ng-click="downloadFile()">' + '<button class="btn btn-primary btn-block">{{downloadButtonLabel}}</button>' + '</a>',
                link: function ($scope, $element, $attrs) {
                    //Log.debug($attrs.container);
                    //Log.debug($attrs.resource);
                    $scope.sharedAccessSignature = false;
                    $scope.downloadButtonLabel = AppGlobals.BUTTON_LOADING_TEXT;
                    $scope.downloadDisabled = true;
                    $scope.downloadUrl = false;
                    $scope.files = undefined;
                    var loadInProgress = false;
                    if (!$attrs.container) {
                        Log.error('A container must be specified for the download');
                    }
                    if (!$attrs.label) {
                        Log.error('A label must be specified for the download button');
                    }
                    $scope.downloadFile = function () {
                        Log.debug('downloading file');
                        if (!$scope.downloadUrl) {
                            return false;
                        }
                        window.open($scope.downloadUrl, '_blank');    //window.location.assign($scope.downloadUrl);
                    };
                    $scope.enableDownload = function (url) {
                        Log.debug('download url: ' + url);
                        if (!url) {
                            Log.error('A valid download url must be provided.');
                            return false;
                        }
                        $scope.downloadUrl = url;
                        Log.debug('element is ok to download');
                        $scope.downloadButtonLabel = $attrs.label;
                        return true;
                    };
                    $scope.getAccessSignature = function (container, resource) {
                        var options = {
                            permissions: 'r',
                            rscd: 'file; attachment',
                            rsct: 'binary'
                        };
                        options.signedResource = resource ? 'b' : 'c';
                        StorageModel.getAccessSignature('blob', container, resource, options).then(function (response) {
                            Log.debug('shared access signature has been received');
                            Log.debug(response);
                            if (response) {
                                $scope.sharedAccessSignature = response;
                                $scope.setDownloadUrl(response);
                            }
                            loadInProgress = false;
                        });
                    };
                    $scope.setDownloadUrl = function (response) {
                        if (response.options && response.options.signedResource === 'b') {
                            //Log.debug('signed resource is for a blob: ');
                            return $scope.enableDownload(response.url);
                        }
                        if ($scope.sharedAccessSignature.options.signedResource === 'c') {
                            // permission has been granted to read any file in the container
                            // for now just grab the first file in the array
                            Log.debug('getting first item');
                            var first = response.data[0];
                            if (!first || !first.client) {
                                Log.error('No files have been returned.');
                                return false;
                            }
                            Log.debug('setting resource');
                            var resource = first.client.clientName + '/' + first.uid + '.' + first.extension;
                            Log.debug(resource);
                            var baseUrl = $scope.sharedAccessSignature.baseUrl + '/' + resource + '?';
                            return $scope.enableDownload(baseUrl + $scope.sharedAccessSignature.params);
                        }
                        Log.debug('A valid  shared access signature has not been created');
                    };
                    var initialize = function () {
                        // fetch a specific resource
                        if ($attrs.container && $attrs.resource) {
                            Log.debug('fetching access signature for specific resource: ' + $attrs.resource);
                            return $scope.getAccessSignature($attrs.container, $attrs.resource);
                        }
                        // index the whole container by client name
                        Log.debug('No azure resource specified. Checking db for relevant items');
                        //Log.debug($attrs.clientname);
                        var clientName = $attrs.clientname || AuthModel.data.client.clientName;
                        var allowedParams = [
                            'clientid',
                            'limit',
                            'extension',
                            'mimetype',
                            'name',
                            'uid'
                        ];
                        var params = { signedResource: 'c' };
                        allowedParams.forEach(function (param) {
                            if ($attrs[param]) {
                                params[param] = $attrs[param];
                            }
                        });
                        StorageModel.getClientContainer(clientName, $attrs.container, params).then(function (success) {
                            Log.debug(success);
                            $scope.sharedAccessSignature = success.data.shared_access_signature;
                            $scope.setDownloadUrl(success.data);
                        });
                    };
                    initialize();
                }
            };
        }
    ]);
    angular.module('pp.core').directive('azureUpload', [
        '_',
        '$timeout',
        '$q',
        '$document',
        'StorageModel',
        'AuthModel',
        'Log',
        'AppGlobals',
        function (_, $timeout, $q, $document, StorageModel, AuthModel, Log, AppGlobals) {
            return {
                require: 'ngModel',
                restrict: 'A',
                scope: {},
                link: function ($scope, $element, $attrs, ngModel) {
                    $scope.loadInProgress = false;
                    var sharedAccessSignature = false;
                    var uids = [];
                    var container = $attrs.container;
                    var inputName = $attrs.inputName;
                    var saveOnUpload = $attrs.saveOnUpload;
                    var limit = $attrs.limit;
                    if ($attrs.mimetypes) {
                        var allowedMimes = $attrs.mimetypes.split(',');
                    }
                    Log.debug('setting allowed mimes');
                    Log.debug(allowedMimes);
                    var opts = {
                        permissions: 'w',
                        signedResource: 'c'
                    };
                    $scope.registryLength = function () {
                        return StorageModel.data.registry[inputName] ? StorageModel.data.registry[inputName].length : 0;
                    };
                    $scope.finishUpload = function (data) {
                        //Log.debug('upload view value is');
                        //Log.debug(ngModel.$viewValue);
                        //Log.debug('upload model value is');
                        //Log.debug(ngModel.$modelValue);
                        Log.debug('finishing upload for registry: ' + JSON.stringify(StorageModel.data.registry[inputName]));
                        ngModel.$setViewValue(data);
                        ngModel.$validate();
                    };
                    $scope.$on('fileDeleted', function (event, args) {
                        Log.debug('file delete event has been listened to');
                        StorageModel.init();
                        $element.val(null);
                        ngModel.$validate();
                        Log.debug('delete view value is');
                        Log.debug(ngModel.$viewValue);
                        Log.debug('delete model value is');
                        Log.debug(ngModel.$modelValue);
                    });
                    ngModel.$validators.required = function (modelValue) {
                        Log.debug('logging model val');
                        Log.debug(modelValue);
                        Log.debug('Logging storage registry value');
                        Log.debug(JSON.stringify(StorageModel.data.registry[inputName]));
                        if ($attrs.required) {
                            var regLength = $scope.registryLength();
                            Log.debug('registry length is ' + regLength);
                            return regLength > 0;
                        } else {
                            return true;
                        }
                    };
                    ngModel.$validators.mimetypes = function (modelValue) {
                        var currentFile = $element[0].files[0];
                        Log.debug('current file is: ');
                        Log.debug(currentFile);
                        if (!allowedMimes.length || !currentFile) {
                            Log.debug('mimetype validator returning true');
                            return true;
                        }
                        var currentExt = currentFile.name.split('.').pop();
                        Log.debug('current ext is: ');
                        Log.debug(currentExt);
                        if (allowedMimes.indexOf(currentExt) == -1) {
                            Log.debug('mimetype failed validation');
                            return false;
                        }
                        Log.debug('mimetype validator returning true');
                        return true;
                    };
                    $scope.getAccessSignature = function () {
                        //Log.debug('fetching sharedAccessSignature');
                        $scope.loadInProgress = true;
                        StorageModel.getAccessSignature('blob', container, null, opts).then(function (response) {
                            //Log.debug(response);
                            if (response) {
                                $scope.loadInProgress = false;
                                sharedAccessSignature = response;
                            }
                        });
                    };
                    if (!sharedAccessSignature) {
                        $scope.getAccessSignature();
                    }
                    $scope.checkLimit = function () {
                        var regLength = $scope.registryLength();
                        Log.debug('checking for file registry limit of: ' + limit);
                        Log.debug(regLength);
                        if (limit && regLength >= limit) {
                            Log.debug('file limit has been exceeded');
                            //replace the last element
                            StorageModel.data.registry[inputName].pop();
                            StorageModel.save();
                        }
                    };
                    $scope.checkMimetypes = function (extension) {
                        Log.debug('allowed mimes are:');
                        Log.debug(allowedMimes);
                        Log.debug(extension);
                        //ngModel.$validate();
                        //ngModel.$render();
                        StorageModel.clearRegistry(inputName);
                        ngModel.$setViewValue([]);
                        if (allowedMimes && allowedMimes.indexOf(extension) == -1) {
                            return false;
                        }
                        return true;
                    };
                    $scope.uploadFile = function (file) {
                        var uid = StorageModel.randomString(32);
                        var mimetype = file.type;
                        var extension = file.name.split('.').pop();
                        var clientName = AuthModel.data.client.clientName;
                        var path = clientName + '/' + uid + '.' + extension;
                        if (!$scope.checkMimetypes(extension)) {
                            return false;
                        }
                        $scope.checkLimit();
                        uids.push(uid);
                        var fileData = {
                            uid: uid,
                            name: file.name,
                            namespace: inputName,
                            container: container,
                            mimetype: mimetype,
                            extension: extension,
                            clientName: clientName,
                            path: path
                        };
                        var completionCallback = undefined;
                        if (!saveOnUpload) {
                            completionCallback = function () {
                                StorageModel.finishUpload($scope, fileData);
                            };
                        }
                        StorageModel.postBlob($scope, sharedAccessSignature, file, fileData, completionCallback);
                    };
                    $scope.waitCount = 0;
                    $scope.maxWaitCount = 5;
                    $scope.fireUploadWhenReady = function (file) {
                        if (sharedAccessSignature) {
                            return $scope.uploadFile(file);
                        }
                        if (!$scope.loadInProgress) {
                            $scope.getAccessSignature();
                        }
                        if ($scope.waitCount < $scope.maxWaitCount) {
                            $scope.waitCount += 1;
                            return $timeout(function () {
                                $scope.fireUploadWhenReady(file);
                            }, 1000);
                        } else {
                            //Log.debug('max wait count has been exceeded');
                            return false;
                        }
                    };
                    $element.bind('change', function () {
                        Log.debug($element[0].files);
                        $scope.fireUploadWhenReady($element[0].files[0]);
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('borrowLimit', [
        'AuthModel',
        'BankingModel',
        function (AuthModel, BankingModel) {
            return {
                require: 'ngModel',
                restrict: 'A',
                link: function ($scope, $element, $attrs, ngModel) {
                    BankingModel.getCreditCheck(AuthModel.data.client.clientName).then(function (success) {
                        console.log('Success borrow limit');
                        console.log(success);
                        var borrowLimit = success.data.data.availableBorrowLimit;
                        BankingModel.data.availableBorrowLimit = borrowLimit;
                        BankingModel.save();
                        $scope.availableBorrowLimit = borrowLimit;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('capsFirst', [
        '$filter',
        function ($filter) {
            return {
                require: 'ngModel',
                link: function (scope, element, attrs, modelCtrl) {
                    console.log('CAPS FIRST!!!');
                    modelCtrl.$parsers.push(function (input) {
                        var transformedInput = input ? $filter('uppercaseFirst')(input) : '';
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                        return transformedInput;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('compileHtml', [
        '$compile',
        function ($compile) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    scope.$watch(function () {
                        return scope.$eval(attrs.compileHtml);
                    }, function (value) {
                        element.html(value);
                        $compile(element.contents())(scope);
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('configurableDropdown', [
        '_',
        'Log',
        function (_, Log) {
            return {
                restrict: 'E',
                templateUrl: 'core/forms/configurable-dropdown.html',
                link: function ($scope, $element, $attrs) {
                    $scope.logChange = function (form) {
                        Log.debug($scope);
                    };
                    var fieldName = $scope.field.name;
                    Log.debug('initializing drop down field: ' + fieldName);
                    // It is assumed that a modelRoot property exists on the parent scope.
                    // This is done in the configurable-form directive which acts as a parent directive.
                    // e.g. <configurable-form model-root="some.path"></configurable-form>
                    // This is a required attribute that acts as a container for all the ng-models.
                    // NOTE: the user's existing data will not be automatically synced
                    // with the configuration object that contains the available options.
                    // This is because each input option is itself an object containing a label
                    // and value. Each of the input's options will receive a new $$hashKey
                    // every time you load the page. By contrast, the users existing data comes
                    // from the db and is saved in a completely different object that doesn't
                    // even have a $hashkey. This is because we are creating the dropdown fields
                    // by iterating through the config object's keys, not by iterating through
                    // the user's data.
                    //
                    // In order to overcome this issue:
                    //
                    // a) check to see if the user has filled out the form previously
                    // b) if so, take the 'key' property of existing data option (e.g. "a1")
                    //    and check the config data for an option with a matching key.
                    // c) alter the current ng-model so that instead of referring to the
                    //    object that was received from the db, instead it points to the
                    //    corresponding option in the config data.
                    if ($scope.modelRoot[fieldName]) {
                        Log.debug('dropdown field has existing value');
                        Log.debug($scope.modelRoot[fieldName]);
                        var optionIndex = _.findIndex($scope.field.options, function (o) {
                            return o.key == $scope.modelRoot[fieldName].key;
                        });
                        Log.debug('existing option index is: ' + optionIndex);
                        if (optionIndex !== -1) {
                            // set the current model value to one of the options in the config
                            Log.debug('setting option object for ' + fieldName);
                            $scope.modelRoot[fieldName] = $scope.config[fieldName].options[optionIndex];
                        }
                    }
                }
            };
        }
    ]);
    angular.module('pp.core').directive('configurableForm', [
        '_',
        'Log',
        'FormModel',
        function (_, Log, FormModel) {
            return {
                restrict: 'E',
                require: '^form',
                scope: {
                    modelRoot: '=',
                    readOnly: '='
                },
                template: '<div ng-repeat="field in config track by field.order"><configurable-dropdown></configurable-dropdown></div>',
                link: function ($scope, $element, $attrs, formCtrl) {
                    Log.debug('configurable form initiated: ' + $attrs.name);
                    Log.debug('is read only: ' + $scope.readOnly);
                    if (!$attrs.name) {
                        Log.error('A valid name must be provided for the configurable form directive');
                        return false;
                    }
                    if (!$scope.modelRoot || Object.keys($scope.modelRoot).length < 1) {
                        $scope.modelRoot = {};
                    }
                    $scope.form = formCtrl;
                    FormModel.get($attrs.name, true, function (result) {
                        // a callback is passed to the FormModel to assign the
                        // configuration data to the current scope
                        $scope.config = result;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('ppListener', [
        'RootHandler',
        function (RootHandler) {
            return {
                restrict: 'A',
                link: function ($scope) {
                    $scope.$on('login', function (event, args) {
                        RootHandler.login(args);
                    });
                    $scope.$on('unauthorized', function () {
                        RootHandler.unauthorized(true);
                    });
                    $scope.$on('forbidden', function () {
                        RootHandler.forbidden();
                    });
                    $scope.$on('redirect', function (event, args) {
                        console.log('redirect event has been listened to');
                        console.log(args);
                        RootHandler.redirect(args);
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('noWhitespace', [
        'Log',
        function (Log) {
            return {
                require: 'ngModel',
                link: function (scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function (input) {
                        var output = input ? input.replace(/[^a-zA-Z0-9._-]+/g, '') : '';
                        Log.debug('parsed input as: ' + output);
                        modelCtrl.$setViewValue(output);
                        modelCtrl.$render();
                        return output;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('roundedNumber', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function (input) {
                    var transformedInput = input ? Math.round(Number(input)) : 0;
                    modelCtrl.$setViewValue(transformedInput);
                    modelCtrl.$render();
                    return transformedInput;
                });
            }
        };
    });
    angular.module('pp.core').directive('starRating', [function () {
            return {
                restrict: 'EA',
                template: '<div class="col-sm-4">' + '<ul class="star-rating" ng-class="{readonly: readonly}">' + '<li ng-repeat="star in stars" class="star" ng-class="{filled: star.filled}" ng-click="toggle($index)">' + '    <i class="fa fa-star"></i>' + '</li>' + '</ul>' + '</div>',
                scope: {
                    ratingValue: '=ngModel',
                    max: '=?',
                    onRatingSelect: '&?',
                    readonly: '=?'
                },
                link: function ($scope, $element, $attributes) {
                    if ($scope.max == undefined) {
                        $scope.max = 5;
                    }
                    function updateStars() {
                        console.log('Update stars: ' + $scope.ratingValue);
                        $scope.stars = [];
                        for (var i = 0; i < $scope.max; i++) {
                            $scope.stars.push({ filled: i < $scope.ratingValue });
                        }
                    }
                    ;
                    $scope.toggle = function (index) {
                        if ($scope.readonly == undefined || $scope.readonly === false) {
                            $scope.ratingValue = index + 1;
                            $scope.onRatingSelect({ rating: index + 1 });
                        }
                    };
                    $scope.$watch('ratingValue', function (oldValue, newValue, objectEquality) {
                        // newValue doesn't seem to be fired when ratingValue changes to 1 from 0
                        // therefore using third argument to grab the ratingValue on the $watch
                        $scope.ratingValue = objectEquality.ratingValue;
                        updateStars();
                    });
                }
            };
        }]);
    angular.module('pp.core').directive('submitButton', [
        'Log',
        'AppGlobals',
        function (Log, AppGlobals) {
            return {
                restrict: 'E',
                scope: { loading: '=loading' },
                template: '<button class="btn btn-primary btn-lg btn-full btn-drop" ng-disabled="loading" type="submit">{{buttonText}}</button>',
                link: function (scope, element, attrs) {
                    Log.debug('submit button directive');
                    Log.debug(scope);
                    Log.debug(attrs);
                    scope.buttonText = scope.loading ? AppGlobals.BUTTON_LOADING_TEXT : attrs.text || 'Submit';
                }
            };
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // OAUTH CALLBACK
            $stateProvider.state('accounting', {
                url: '/accounting',
                template: '<ui-view/>',
                parent: 'auth'    //controller: 'AccountingCtrl'
            }).state('accounting.callback', {
                url: '/callback',
                templateUrl: 'core/templates/accounting-pending.html'
            }).state('accounting.callback.xero', {
                url: '/xero?oauth_verifier&oauth_token&org',
                template: '<ui-view/>',
                onEnter: [
                    '$state',
                    '$stateParams',
                    'AccountingModel',
                    'AppGlobals',
                    'CallbackModel',
                    function ($state, $stateParams, AccountingModel, AppGlobals, CallbackModel) {
                        console.log('getting callback data');
                        AccountingModel.init();
                        var credentials = {
                            oauth_verifier: $stateParams.oauth_verifier,
                            oauth_token: $stateParams.oauth_token,
                            org: $stateParams.org
                        };
                        return AccountingModel.postCallback(credentials);
                    }
                ]
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // AUTH MIDDLEWARE
            // abstract routes that function as an auth middleware layer for the front-end
            // use them by specifying the parent property on a route eg. parent: 'guest'
            $stateProvider.state('auth', {
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    AuthUser: [
                        'AuthModel',
                        'AppNotifier',
                        function (AuthModel, AppNotifier) {
                            //Log.debug('auth middleware triggered');
                            //Log.debug(AuthModel.check());
                            if (!AuthModel.check()) {
                                console.log('auth middleware failed check');
                                return AppNotifier.notifyUnauthorized();
                            } else {
                                console.log(AuthModel.getUser());
                                return AuthModel.getUser();
                            }
                        }
                    ]
                }
            }).state('authorized', {
                parent: 'auth',
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    clientAuthorized: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.data.client.clientData.authorization.clientAuthorized) {
                                RootHandler.redirectToSetup(AuthModel.data.client.clientType);
                                return false;
                            }
                            console.log('client registration is complete');
                            return true;
                        }
                    ]
                }
            }).state('guest', {
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    GuestUser: [
                        'AuthModel',
                        '$location',
                        'Flash',
                        'AppGlobals',
                        function (AuthModel, $location, Flash, AppGlobals) {
                            //Log.debug('guest middleware triggered');
                            //Log.debug(AuthModel.check());
                            if (AuthModel.check()) {
                                console.log('Guest middleware failed: logged in user detected');
                                Flash.danger('The route you requested is only available to logged out users', true);
                                $location.url('/summary');
                                return false;
                            }    //return true;
                        }
                    ]
                }
            })    // enforces logout when accessed
.state('guest_forced', {
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    GuestUser: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            console.log('guest_enforced middleware triggered');
                            console.log(AuthModel.check());
                            if (AuthModel.check()) {
                                RootHandler.unauthorized(true);
                            }
                            return true;
                        }
                    ]
                }
            }).state('borrower', {
                parent: 'auth',
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    hasRole: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            console.log('checking roles for borrower');
                            if (!AuthModel.hasRole('borrower')) {
                                console.log('borrower check failed');
                                RootHandler.forbidden();
                                return false;
                            }
                            console.log('user has correct role');
                            return true;
                        }
                    ]
                }
            }).state('lender', {
                parent: 'auth',
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    hasRole: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('lender')) {
                                return RootHandler.forbidden();
                            }
                            return true;
                        }
                    ]
                }
            }).state('manager', {
                parent: 'auth',
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    hasRole: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('manager')) {
                                return RootHandler.forbidden();
                            }
                            return true;
                        }
                    ]
                }
            }).state('provider', {
                parent: 'auth',
                abstract: true,
                template: '<ui-view/>',
                resolve: {
                    hasRole: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('provider')) {
                                AuthModel.logout();
                                return RootHandler.forbidden();
                            }
                            return true;
                        }
                    ]
                }
            });
            // LOGIN AND LOGOUT
            $stateProvider.state('login', {
                url: '/login',
                // templateUrl: "core/auth/login.html",
                templateUrl: 'core/index/landing.html',
                parent: 'guest',
                controller: 'AuthCtrl'
            }).state('logout', {
                url: '/logout',
                resolve: {
                    logout: [
                        'AuthModel',
                        function (AuthModel) {
                            console.log('logging out');
                            AuthModel.logout();
                        }
                    ]
                }
            }).state('forbidden', {
                url: '/forbidden',
                templateUrl: 'core/abort/403.html'
            }).state('404', {
                url: '/404',
                templateUrl: 'core/abort/404.html'
            }).state('500', {
                url: '/500',
                templateUrl: 'core/abort/500.html'
            })    // PASSWORD RESET
.state('password', {
                parent: 'guest_forced',
                url: '/password',
                template: '<ui-view/>',
                controller: 'PasswordCtrl'
            }).state('password.reset', {
                url: '/reset',
                templateUrl: 'core/auth/password-reset.html'
            }).state('password.confirm', {
                url: '/confirm/{token}',
                templateUrl: 'core/auth/password-reset.html'
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            $stateProvider.state('borrowers', {
                url: '/borrowers',
                abstract: true,
                template: '<ui-view/>',
                controller: 'BorrowerCtrl',
                parent: 'auth',
                onEnter: [
                    'AuthModel',
                    'ClientModel',
                    'InvoiceModel',
                    'Log',
                    function (AuthModel, ClientModel, InvoiceModel, Log) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'lender') {
                            return true;
                        }
                        ClientModel.indexSummaryEntities('borrower');
                    }
                ]
            }).state('borrowers.invoices', {
                url: '/invoices',
                template: '<ui-view/>'
            }).state('borrowers.invoices.cancelled', {
                url: '/cancelled',
                templateUrl: 'core/borrowers/invoices/cancelled.html',
                onEnter: [
                    'AuthModel',
                    'LoanModel',
                    'Log',
                    function (AuthModel, LoanModel, Log) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'lender') {
                            return true;
                        }
                        LoanModel.indexSummaryEntities('loan');
                    }
                ]
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            //default transitions
            $urlRouterProvider.when('/invite/user/{uid}', '/invite/user/{uid}/primary');
            $urlRouterProvider.when('/invite/{clientNumber}', '/invite/{clientNumber}/confirm');
            $stateProvider.state('invite', {
                abstract: true,
                parent: 'auth',
                url: '/invite',
                template: '<ui-view/>',
                //do not declare ctrl here - as child states need different controllers
                data: {
                    //default lender type
                    lenderType: 'company'
                },
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            console.log(AuthModel.data);
                            if (!AuthModel.hasPermission('client.post')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            })    // INVITE CLIENTS
.state('invite.find', {
                url: '/find/{clientType}',
                templateUrl: 'invite/company-find.html',
                controller: 'InviteClientCtrl',
                // initializes ctrl to find a client
                resolve: {
                    clientType: [
                        '$stateParams',
                        function ($stateParams) {
                            return $stateParams.clientType;
                        }
                    ]
                }
            }).state('invite.individual', {
                url: '/individual',
                template: '<ui-view/>',
                resolve: {
                    clientType: function () {
                        return 'lender';
                    }
                },
                data: { lenderType: 'individual' },
                controller: 'InviteClientCtrl'    // re-initializes ctrl for an individual
            }).state('invite.individual.lender', {
                url: '/lender',
                templateUrl: 'invite/lender/individual.html',
                onExit: [
                    'InviteModel',
                    function (InviteModel) {
                        InviteModel.forget();
                    }
                ]
            }).state('invite.client', {
                url: '/{clientNumber}',
                template: '<ui-view/>',
                controller: 'InviteClientCtrl',
                // re-initializes ctrl to invite a client
                resolve: {
                    clientType: [
                        'InviteModel',
                        '$stateParams',
                        function (InviteModel, $stateParams) {
                            return InviteModel.resolveClientType($stateParams.clientNumber);
                        }
                    ]
                }
            }).state('invite.client.confirm', {
                url: '/confirm',
                templateUrl: 'invite/company-confirm.html'
            }).state('invite.client.assessment', {
                url: '/assessment',
                templateUrl: 'invite/borrower/assessment.html'
            })    // INVITE USERS
.state('invite.user', {
                url: '/user/{uid}',
                template: '<ui-view/>',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            console.log(AuthModel.data);
                            if (!AuthModel.hasPermission('user.post')) {
                                console.log('forbidden');
                                RootHandler.forbidden();
                            }
                        }
                    ],
                    clientType: [
                        'InviteModel',
                        '$stateParams',
                        function (InviteModel, $stateParams) {
                            var type = InviteModel.resolveClientType($stateParams.uid, 'uid');
                            console.log('setting type to: ' + type);
                            return type;
                        }
                    ]
                }
            }).state('invite.user.primary', {
                url: '/primary',
                controller: 'InviteUserCtrl',
                templateUrl: 'invite/invite-primary.html'
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // REGISTER BORROWERS AND LENDERS
            $stateProvider.state('register', {
                abstract: true,
                parent: 'guest_forced',
                url: '/register/{token}',
                controller: 'RegisterCtrl',
                template: '<ui-view/>',
                resolve: {
                    invitationData: [
                        'NotificationModel',
                        '$state',
                        '$stateParams',
                        function (NotificationModel, $state, $stateParams) {
                            var token = $stateParams.token;
                            console.log(token);
                            var cache = NotificationModel.init();
                            console.log('logging notification cache');
                            console.log(cache);
                            if (cache && Object.keys(cache).length && cache.linkKey === token) {
                                console.log('returning cached token');
                                return cache;
                            } else {
                                console.log('getting token from api');
                                return NotificationModel.getUserByInviteToken(token);
                            }
                        }
                    ]
                }
            }).state('register.accept', {
                url: '/accept',
                templateUrl: 'register/accept.html'
            }).state('register.details', {
                url: '/details',
                templateUrl: 'register/details.html'
            }).state('register.email', {
                url: '/email',
                templateUrl: 'register/email.html'
            });
            $stateProvider.state('activate', {
                abstract: true,
                parent: 'guest_forced',
                controller: 'ActivationCtrl',
                url: '/activate',
                template: '<ui-view/>'
            }).state('activate.mobile', {
                url: '/mobile',
                templateUrl: 'register/mobile.html'
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // AUTH MIDDLEWARE
            // abstract routes that function as an auth middleware layer for the front-end
            // use them by specifying the parent property on a route eg. parent: 'guest'
            $stateProvider    // PASSWORD RESET
.state('settings', {
                url: '/settings',
                templateProvider: [
                    'AuthModel',
                    '$templateCache',
                    function (AuthModel, $templateCache) {
                        //var template = "core/settings/" + AuthModel.data.client.clientType + ".html";
                        var template = 'core/settings/default.html';
                        return $templateCache.get(template);
                    }
                ]
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        function ($stateProvider) {
            $stateProvider.state('users', {
                abstract: true,
                parent: 'auth',
                url: '/users',
                template: '<ui-view/>',
                controller: 'UserCtrl',
                onEnter: [
                    'Log',
                    'UserModel',
                    function (Log, UserModel) {
                        Log.debug('fetching user summary entities');
                        UserModel.indexSummaryEntities('user');
                    }
                ]
            }).state('users.invitation', {
                url: '/invitation',
                template: '<ui-view/>'
            }).state('users.invitation.expired', {
                url: '/expired',
                templateUrl: 'users/invitation-expired.html'
            }).state('users.invitation.primary', {
                url: '/primary',
                templateUrl: 'users/primary-outstanding.html'
            });
        }
    ]);
    angular.module('pp.core').factory('ApiHandler', [
        'Log',
        '$q',
        '$injector',
        '$location',
        '$window',
        'messageCenterService',
        'AppGlobals',
        'AppNotifier',
        function (Log, $q, $injector, $location, $window, messageCenterService, AppGlobals, AppNotifier) {
            var service = {};
            service.responseSuccess = function (response) {
                if (response.data) {
                }
            };
            service.defaultError = function (error) {
                //Log.warn(error);
                return service.flashError(error);
            };
            service.addAuthHeader = function (config) {
                config.headers = config.headers || {};
                //Log.debug('setting request headers');
                //Log.debug(AppNotifier.getToken());
                var isApiCall = config.url.indexOf(AppGlobals.HOST_URL) !== -1;
                //Log.debug('setting value of isApiCall');
                //Log.debug(isApiCall);
                if (AppNotifier.check() && isApiCall) {
                    config.headers.Authorization = 'Bearer ' + AppNotifier.getToken();
                }
                return config;
            };
            service.handleBadRequest = function (response) {
                Log.info(response);
                AppNotifier.notifyDataUpdated(response.data.data);
                this.defaultError(response);
            };
            service.handleUnauthorized = function (response) {
                Log.warn('401 detected');
                //todo - check the 401 comes from our own api not an external
                AppNotifier.notifyUnauthorized();
            };
            service.handleRedirect = function (response) {
                Log.info('303 has been returned from the api');
                AppNotifier.notifyRedirect(response.data);
            };
            service.flashError = function (error) {
                var html = '';
                var customErrors = false;
                var reasonPhrase = false;
                if (error.data && error.data.hasOwnProperty('error')) {
                    customErrors = error.data.error;
                }
                if (error.data && error.data.hasOwnProperty('reason_phrase')) {
                    reasonPhrase = error.data.reason_phrase;
                }
                if (customErrors) {
                    html += '<ul>';
                    for (var i = 0; i < customErrors.length; i++) {
                        html += '<li>' + customErrors[i] + '</li>';
                    }
                    html += '</ul>';
                } else if (reasonPhrase) {
                    html = '<p>' + reasonPhrase + '</p>';
                } else {
                    html = '<p>There was a problem with your request. Please refresh the page.</p>';
                }
                messageCenterService.add('danger', html, {
                    html: true,
                    timeout: AppGlobals.FLASH_TIMEOUT
                });
            };
            return service;
        }
    ]);
    angular.module('pp.core').factory('ApiInterceptor', [
        '$window',
        '$q',
        '$injector',
        '$location',
        'ApiHandler',
        'AppGlobals',
        function ($window, $q, $injector, $location, ApiHandler, AppGlobals) {
            return {
                request: function (config) {
                    config = ApiHandler.addAuthHeader(config);
                    //Log.debug('setting config');
                    //Log.debug(config);
                    // pass the promise down the chain
                    return config;
                },
                //response: function(response) {
                //    ApiHandler.responseSuccess(response);
                //},
                responseError: function (response) {
                    // -1 CORS ERROR
                    if (response.status === -1) {
                        ApiHandler.defaultError(response);
                        //ApiHandler.handleUnauthorized();
                        // pass the promise down the chain
                        return $q.reject(response);    // 401 UNAUTHORIZED
                    } else if (response.status === 401) {
                        ApiHandler.handleUnauthorized();
                        return $q.reject(response);    // 303 REDIRECT
                    } else if (response.status === 303) {
                        ApiHandler.handleRedirect(response);
                        //not really an error these are intentional redirects
                        return $q.reject(response);
                    } else if (response.status === 400) {
                        ApiHandler.handleBadRequest(response);
                        return $q.reject(response);
                    } else {
                        ApiHandler.defaultError(response);
                        // pass the promise down the chain
                        return $q.reject(response);
                    }
                }
            };
        }
    ]);
    angular.module('pp.core').factory('ApiService', [
        '_',
        '$http',
        'AppGlobals',
        '$httpParamSerializerJQLike',
        function (_, $http, AppGlobals, $httpParamSerializerJQLike) {
            var service = {};
            service.get = function (endPoint, params, isAdminRoute) {
                var url = this.getApiUrl(endPoint, isAdminRoute);
                //Log.debug(url);
                var options = {
                    url: url,
                    method: 'GET',
                    params: params
                };
                return this.call(options);
            };
            service.post = function (endPoint, data, isAdminRoute) {
                var url = this.getApiUrl(endPoint, isAdminRoute);
                var options = {
                    url: url,
                    method: 'POST',
                    data: data
                };
                return this.call(options);
            };
            service.put = function (endPoint, data, isAdminRoute) {
                var url = this.getApiUrl(endPoint, isAdminRoute);
                var options = {
                    url: url,
                    method: 'PUT',
                    data: data
                };
                return this.call(options);
            };
            service.delete = function (endPoint, params, isAdminRoute) {
                var url = this.getApiUrl(endPoint, isAdminRoute);
                var options = {
                    url: url,
                    method: 'DELETE',
                    params: params
                };
                return this.call(options);
            };
            service.call = function (options) {
                console.log('request options are');
                console.log(options);
                console.log($http.defaults);
                return $http(options);
            };
            service.getApiUrl = function (slug, isAdminRoute, params) {
                var url = AppGlobals.HOST_URL;
                if (isAdminRoute) {
                    url += AppGlobals.ADMIN_PATH;
                } else {
                    url += AppGlobals.API_PATH;
                }
                if (slug.charAt(0) != '/') {
                    slug = '/' + slug;
                }
                url += slug;
                if (params) {
                    url += '?' + service.buildQuery(params);
                }
                if (service.validateUrl(url)) {
                    return url;
                }
                console.log('Invlaid url: ' + url);
            };
            service.validateUrl = function (url) {
                var urlregex = new RegExp('^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(/($|[a-zA-Z0-9.,?\'\\+&amp;%$#=~_-]+))*$');
                return urlregex.test(url);
            };
            service.buildQuery = function buildQuery(params) {
                var parts = [];
                for (var i in params) {
                    if (params.hasOwnProperty(i)) {
                        parts.push(encodeURIComponent(i) + '=' + encodeURIComponent(params[i]));
                    }
                }
                return parts.join('&');
            };
            return service;
        }
    ]);
    /**
 * AppNotifier does not just emit events, it also prevents circular dependencies
 * The ApiInterceptor needs a way of seeing if the user is logged in
 * but it can't depend on any service that itself uses the api (like the AuthModel)
 * otherwise it would end up depending on itself (a circular dependency)
 * this means the ApiInterceptor can only communicate with other services by emitting events
 * AppNotifier therefore stores the logged in state of the user, and handles all key auth events.
 */
    angular.module('pp.core').service('AppNotifier', [
        '$rootScope',
        function ($rootScope) {
            var service = {
                isLoggedIn: false,
                sessionToken: false,
                accountingAuthorized: false
            };
            service.getToken = function () {
                return this.sessionToken;
            };
            service.saveLogin = function (token) {
                console.log('setting auth notifier');
                this.sessionToken = token;
                this.isLoggedIn = true;
            };
            service.check = function () {
                return this.isLoggedIn ? true : false;
            };
            service.notifyLogin = function (token) {
                this.saveLogin(token);
                $rootScope.$broadcast('login');
            };
            service.notifyLogout = function () {
                $rootScope.$broadcast('logout');
            };
            service.notifyUnauthorized = function () {
                $rootScope.$broadcast('unauthorized');
            };
            service.notifyRedirect = function (data) {
                $rootScope.$broadcast('redirect', data);
            };
            service.notifyDataUpdated = function (data) {
                console.log('Notify Data Updated');
                console.log(data);
                $rootScope.$broadcast('dataUpdated', data);
            };
            service.checkAccountingAuthorization = function () {
                return this.accountingAuthorized;
            };
            service.notifyAccountingAuthorized = function () {
                this.accountingAuthorized = true;
                $rootScope.$broadcast('accountingAuthorized');
            };
            service.notifyAccountingUnauthorized = function () {
                this.accountingAuthorized = false;
                $rootScope.$broadcast('accountingUnauthorized');
            };
            return service;
        }
    ]);
    angular.module('pp.core').factory('AzureManager', [
        'Log',
        'StorageModel',
        'AppGlobals',
        'Flash',
        function (Log, StorageModel, AppGlobals, Flash) {
            var service = {};
            service.checkFileUpload = function ($event, key) {
                if (!StorageModel.checkFileUpload(key)) {
                    $event.preventDefault();
                    Log.error('file upload failure');
                    Log.debug(StorageModel.data.registry);
                    Log.debug('storage key is: ' + key);
                    return false;
                }
                Log.debug('file is valid');
                return true;
            };
            service.init = function ($scope) {
                $scope.fileLoading = false;
                $scope.deleteFile = function (file) {
                    StorageModel.deleteFile(file);
                    Log.debug('broadcasting delete event');
                    $scope.$broadcast('fileDeleted', { file: file });
                };
            };
            return service;
        }
    ]);
    angular.module('pp.core').factory('AzureService', [
        'Log',
        '$http',
        azureBlob
    ]);
    function azureBlob(Log, $http) {
        var service = {
            DefaultBlockSize: 1024 * 32    // Default to 32KB
        };
        /* config: {
     baseUrl: // baseUrl for blob file uri (i.e. http://<accountName>.blob.core.windows.net/<container>/<blobname>),
     sasToken: // Shared access signature querystring key/value prefixed with ?,
     file: // File object using the HTML5 File API,
     progress: // progress callback function,
     complete: // complete callback function,
     error: // error callback function,
     blockSize: // Use this to override the DefaultBlockSize
     } */
        service.upload = function (config) {
            var state = service.initializeState(config);
            var reader = new FileReader();
            reader.onloadend = function (evt) {
                if (evt.target.readyState == FileReader.DONE && !state.cancelled) {
                    // DONE == 2
                    var uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];
                    var requestData = new Uint8Array(evt.target.result);
                    Log.log(uri);
                    $http.put(uri, requestData, {
                        headers: {
                            'x-ms-blob-type': 'BlockBlob',
                            'Content-Type': state.file.type
                        },
                        transformRequest: []
                    }).success(function (data, status, headers, config) {
                        Log.log(data);
                        Log.log(status);
                        state.bytesUploaded += requestData.length;
                        var percentComplete = (parseFloat(state.bytesUploaded) / parseFloat(state.file.size) * 100).toFixed(2);
                        if (state.progress)
                            state.progress(percentComplete, data, status, headers, config);
                        service.uploadFileInBlocks(reader, state);
                    }).error(function (data, status, headers, config) {
                        Log.log(data);
                        Log.log(status);
                        if (state.error)
                            state.error(data, status, headers, config);
                    });
                }
            };
            service.uploadFileInBlocks(reader, state);
            return {
                cancel: function () {
                    state.cancelled = true;
                }
            };
        };
        service.initializeState = function (config) {
            var blockSize = service.DefaultBlockSize;
            if (config.blockSize)
                blockSize = config.blockSize;
            var maxBlockSize = blockSize;
            // Default Block Size
            var numberOfBlocks = 1;
            var file = config.file;
            var fileSize = file.size;
            if (fileSize < blockSize) {
                maxBlockSize = fileSize;
                Log.log('max block size = ' + maxBlockSize);
            }
            if (fileSize % maxBlockSize == 0) {
                numberOfBlocks = fileSize / maxBlockSize;
            } else {
                numberOfBlocks = parseInt(fileSize / maxBlockSize, 10) + 1;
            }
            Log.log('total blocks = ' + numberOfBlocks);
            return {
                maxBlockSize: maxBlockSize,
                //Each file will be split in 256 KB.
                numberOfBlocks: numberOfBlocks,
                totalBytesRemaining: fileSize,
                currentFilePointer: 0,
                blockIds: new Array(),
                blockIdPrefix: 'block-',
                bytesUploaded: 0,
                submitUri: null,
                file: file,
                baseUrl: config.baseUrl,
                sasToken: config.sasToken,
                fileUrl: config.baseUrl + config.sasToken,
                progress: config.progress,
                complete: config.complete,
                error: config.error,
                cancelled: false
            };
        };
        service.uploadFileInBlocks = function (reader, state) {
            if (!state.cancelled) {
                if (state.totalBytesRemaining > 0) {
                    Log.log('current file pointer = ' + state.currentFilePointer + ' bytes read = ' + state.maxBlockSize);
                    var fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);
                    var blockId = state.blockIdPrefix + service.pad(state.blockIds.length, 6);
                    Log.log('block id = ' + blockId);
                    state.blockIds.push(btoa(blockId));
                    reader.readAsArrayBuffer(fileContent);
                    state.currentFilePointer += state.maxBlockSize;
                    state.totalBytesRemaining -= state.maxBlockSize;
                    if (state.totalBytesRemaining < state.maxBlockSize) {
                        state.maxBlockSize = state.totalBytesRemaining;
                    }
                } else {
                    service.commitBlockList(state);
                }
            }
        };
        service.commitBlockList = function (state) {
            var uri = state.fileUrl + '&comp=blocklist';
            Log.log(uri);
            var requestBody = '<?xml version="1.0" encoding="utf-8"?><BlockList>';
            for (var i = 0; i < state.blockIds.length; i++) {
                requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';
            }
            requestBody += '</BlockList>';
            Log.log(requestBody);
            $http.put(uri, requestBody, { headers: { 'x-ms-blob-content-type': state.file.type } }).success(function (data, status, headers, config) {
                Log.log(data);
                Log.log(status);
                if (state.complete)
                    state.complete(data, status, headers, config);
            }).error(function (data, status, headers, config) {
                Log.log(data);
                Log.log(status);
                if (state.error)
                    state.error(data, status, headers, config);    // called asynchronously if an error occurs
                                                                   // or server returns response with an error status.
            });
        };
        service.pad = function (number, length) {
            var str = '' + number;
            while (str.length < length) {
                str = '0' + str;
            }
            return str;
        };
        return service;
    }
    ;
    angular.module('pp.core').factory('CryptService', [
        'AppGlobals',
        function (AppGlobals) {
            var service = { secret: null };
            /**
     * Sets the secret key for the encryption
     *
     * @todo - think up how to do this, also to save into localstorage to be used
     *         over and over
     */
            service.setSecret = function () {
                if (!this.secret) {
                    this.secret = AppGlobals.APP_KEY;
                }
            };
            /**
     * Encrypts the data provided
     *
     * @param  {Object} data
     * @return {Object}
     */
            service.encrypt = function (data) {
                if (this.secret) {
                    var encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), this.secret);
                    return encrypted.toString();
                }
                return false;
            };
            /**
     * Decrypt the data provided
     *
     * @param  {Object} data
     * @return {Object}
     */
            service.decrypt = function (data) {
                if (this.secret) {
                    var bytes = CryptoJS.AES.decrypt(data, this.secret);
                    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
                    return decryptedData;
                }
                return false;
            };
            return service;
        }
    ]);
    angular.module('pp.core').service('DefaultSocket', [
        'Log',
        'socketFactory',
        'AppGlobals',
        'AuthModel',
        'EnvModel',
        function (Log, socketFactory, AppGlobals, AuthModel, EnvModel) {
            Log.debug('Firing DefaultSocket');
            var payload = AuthModel.data.token.key;
            //var secret = AuthModel.data.token.secret;
            //var encrypted = CryptoJS.AES.encrypt(payload, secret)
            var url = AppGlobals.NODE_URL + ':' + AppGlobals.NODE_PORT + '?token=' + payload;
            var socket = io.connect(url);
            return socket;
        }
    ]);
    angular.module('pp.core').factory('ExceptionHandler', [
        '$log',
        '$window',
        'StackTrace',
        'AppGlobals',
        'Log',
        function ($log, $window, StackTrace, AppGlobals, Log) {
            function ExceptionHandler(exception, cause) {
                $log.error.apply($log, arguments);
                Log.report(exception, cause);
            }
            return ExceptionHandler;
        }
    ]);
    angular.module('pp.core').service('Flash', [
        'AppGlobals',
        'Log',
        'messageCenterService',
        function (AppGlobals, Log, messageCenterService) {
            var service = {};
            service.getOptions = function (next) {
                var options = { timeout: AppGlobals.FLASH_TIMEOUT };
                if (next) {
                    options.next = messageCenterService.status.next;
                }
                return options;
            };
            service.success = function (msg, next) {
                messageCenterService.add('success', msg, service.getOptions(next));
            };
            service.danger = function (msg, next) {
                messageCenterService.add('danger', msg, service.getOptions(next));
            };
            service.info = function (msg, next) {
                messageCenterService.add('info', msg, service.getOptions(next));
            };
            service.warning = function (msg, next) {
                messageCenterService.add('warning', msg, service.getOptions(next));
            };
            return service;
        }
    ]);
    angular.module('pp.core').service('FormValidator', [
        'Log',
        'Flash',
        'AppGlobals',
        function (Log, Flash, AppGlobals) {
            Log.debug('FORM VALIDATOR SERVICE');
            var service = {};
            service.isValid = function (form) {
                if (form.$valid) {
                    return true;
                } else {
                    Flash.danger(AppGlobals.INVALID_FORM, true);
                    return false;
                }
            };
            return service;
        }
    ]);
    angular.module('pp.core').service('Log', [
        'AppGlobals',
        '$log',
        'StackTrace',
        '$window',
        function (AppGlobals, $log, StackTrace, $window) {
            var service = { user: undefined };
            service.info = function (message) {
                if (AppGlobals.LOGGER.LOG_INFO) {
                    $log.info(message);
                }
            };
            // angular provides native support for disabling debugging
            // this is set by the $logProvider in the config block
            service.debug = function (message) {
                $log.debug(message);
            };
            service.warn = function (message, name, data, dontReport) {
                if (AppGlobals.LOGGER.LOG_WARNINGS) {
                    $log.warn(message);
                }
                if (AppGlobals.LOGGER.POST_WARNINGS && !dontReport) {
                    return service.createError(message, name);
                }
            };
            service.error = function (message, name, data, dontReport) {
                if (AppGlobals.LOGGER.LOG_ERRORS) {
                    $log.error(message);
                }
                if (AppGlobals.LOGGER.POST_ERRORS && !dontReport) {
                    return service.createError(message, name, data);
                }
            };
            service.createError = function (message, name, data) {
                var err = new Error(message);
                if (name) {
                    err.name = name;
                }
                return service.report(err, angular.toJson(data));
            };
            service.report = function (exception, cause) {
                var message = exception.toString().slice(6);
                StackTrace.fromError(exception).then(function (stackframes) {
                    // if the stack points to the current file then rewind by 1
                    if (stackframes[0].fileName.indexOf('LogService' > -1)) {
                        stackframes.splice(0, 1);
                    }
                    service._post(message, stackframes, cause);
                });
            };
            service.setUser = function (token) {
                this.user = token;
            };
            service._post = function (message, stackframes, cause) {
                try {
                    var url = AppGlobals.NODE_URL + AppGlobals.ADMIN_PATH + '/log';
                    var callback = function (data) {
                        console.log('exception has been posted to server');
                    };
                    var formData = {
                        url: $window.location.href,
                        stackTrace: stackframes,
                        message: message,
                        timestamp: service.getTimestamp(),
                        cause: cause || ''
                    };
                    return service._call('POST', url, formData, callback);
                } catch (loggingError) {
                    // For Developers - log the log-failure.
                    $log.warn('Error logging failed');
                    $log.log(loggingError);
                }
            };
            service._call = function (method, url, formData, callback) {
                var xhr;
                if (typeof XMLHttpRequest !== 'undefined')
                    xhr = new XMLHttpRequest();
                else {
                    var versions = [
                        'MSXML2.XmlHttp.5.0',
                        'MSXML2.XmlHttp.4.0',
                        'MSXML2.XmlHttp.3.0',
                        'MSXML2.XmlHttp.2.0',
                        'Microsoft.XmlHttp'
                    ];
                    for (var i = 0, len = versions.length; i < len; i++) {
                        try {
                            xhr = new ActiveXObject(versions[i]);
                            break;
                        } catch (e) {
                        }
                    }    // end for
                }
                xhr.onreadystatechange = ensureReadiness;
                function ensureReadiness() {
                    if (xhr.readyState < 4) {
                        return;
                    }
                    if (xhr.status !== 200) {
                        return;
                    }
                    // all is well
                    if (xhr.readyState === 4) {
                        callback(xhr);
                    }
                }
                xhr.open(method, url, true);
                xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
                xhr.send(angular.toJson(formData));
            };
            service.getTimestamp = function () {
                return Math.floor(Date.now() / 1000);
            };
            return service;
        }
    ]);
    angular.module('pp.core').service('RootHandler', [
        '$state',
        'Log',
        '$window',
        '$timeout',
        '$location',
        'Flash',
        'AppGlobals',
        'AuthModel',
        'CallbackModel',
        '$uibModal',
        function ($state, Log, $window, $timeout, $location, Flash, AppGlobals, AuthModel, CallbackModel, $uibModal) {
            var service = { redirectInProgress: false };
            service.login = function (token) {
            };
            service.forbidden = function () {
                $location.url('/forbidden');
                Flash.danger(AppGlobals.INVALID_PERMISSIONS, true);
            };
            service.notFound = function (data) {
                Log.error('404 not found for call: ' + angular.toJson(data));
                return $state.go('404');
            };
            service.unauthorized = function (refresh) {
                Log.debug('Root handler unauthorized');
                Log.debug('setting lastKnownState to: ' + $state.current.name);
                AuthModel.saveLastKnownState({
                    name: $state.current.name,
                    params: $state.params,
                    url: $location.$$url
                });
                AuthModel.flushCache();
                return $window.location.href = '/login';
            };
            service.recoverState = function (lastKnownState) {
                if (!lastKnownState) {
                    return $state.go(AppGlobals.STATES.HOME);
                }
                if (lastKnownState.name) {
                    return $state.go(lastKnownState.name, lastKnownState.params);
                }
                if (lastKnownState.url) {
                    return $location.url(lastKnownState.url);
                }
            };
            service.redirect = function (data) {
                Log.info('RootHandler has been instructed to redirect. ');
                Log.info(data);
                if (!data.redirect_url && !data.state) {
                    Log.error('the redirect method requires a valid url or state');
                    return false;
                }
                if (data.callback) {
                    CallbackModel.saveCallback(data.callback);
                }
                if (data.modal) {
                    return service.redirectFromModal(data);
                } else if (data.state && data.stateParams) {
                    return $state.go(data.state, data.stateParams);
                } else if (data.state) {
                    return $state.go(data.state);
                } else if (data.redirect_url) {
                    return service.redirectToUrl(data.redirect_url);
                }
            };
            service.redirectToUrl = function (url) {
                if (url.indexOf('http') == 0) {
                    return $window.window.location.href = url;
                }
                return $location.url(url);
            };
            service.redirectFromModal = function (data) {
                Log.info('Redirect modal triggered');
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/default.html',
                    controller: [
                        '$scope',
                        '$uibModal',
                        '$uibModalInstance',
                        function ($scope, $uibModal, $uibModalInstance) {
                            $scope.modalTitle = data.modal.modalTitle;
                            $scope.modalMessage = data.modal.modalBody;
                            $scope.continue = function ($event) {
                                $uibModalInstance.close(true);
                                service.redirectToUrl(data.redirect_url);
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
            };
            service.redirectToSetup = function (clientType) {
                Flash.danger('Please complete the setup process to begin using the site.', true);
                return $state.go('setup.' + clientType + '.manage');
            };
            return service;
        }
    ]);
    angular.module('pp.core').service('SocketService', [
        'Log',
        'socketFactory',
        'DefaultSocket',
        'AppGlobals',
        function (Log, socketFactory, DefaultSocket, AppGlobals) {
            var socket = socketFactory({
                //prefix: AppGlobals.SOCKET_PREFIX,
                ioSocket: DefaultSocket
            });
            console.log(AppGlobals.SOCKET.EVENTS);
            socket.forward(AppGlobals.SOCKET.EVENTS);
            return socket;
        }
    ]);
    angular.module('pp.core').factory('StackTrace', function () {
        // "printStackTrace" is a global object.
        return { print: printStackTrace };
    });
    angular.module('pp.core').directive('compareTo', [function () {
            return {
                require: 'ngModel',
                restrict: 'A',
                scope: { otherModelValue: '=compareTo' },
                link: function ($scope, $element, $attr, ngModel) {
                    ngModel.$validators.compareTo = function (modelValue) {
                        return modelValue == $scope.otherModelValue;
                    };
                    $scope.$watch('otherModelValue', function () {
                        ngModel.$validate();
                    });
                }
            };
        }]);
    angular.module('pp.core').directive('decimalPlace', [function () {
            return {
                require: 'ngModel',
                link: function (scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function (inputValue) {
                        var inputValue = String(inputValue);
                        if (!inputValue.match(/^\d+(\.\d{0,2})?$/)) {
                            modelCtrl.$setValidity('decimal', false);
                            return undefined;
                        }
                        modelCtrl.$setValidity('decimal', true);
                        return inputValue;
                    });
                }
            };
        }]);
    angular.module('pp.core').directive('emailDomain', [
        'AppGlobals',
        function (AppGlobals) {
            /**
     * Blacklist of domains to check email against
     *
     * @type {Array}
     */
            var blackList = AppGlobals.EMAIL_DOMAIN_BLACKLIST;
            /**
     * Regex for validating domain is valid format
     *
     * @type {RegExp}
     */
            var emailRegex = /([A-Za-z0-9-]+\.([A-Za-z]{3,}|[A-Za-z]{2}\.[A-Za-z]{2}|[A-za-z]{2}))\b/;
            return {
                require: 'ngModel',
                restrict: 'A',
                link: function ($scope, $element, $attr, ngModel) {
                    console.log('logging blacklists');
                    console.log(blackList);
                    var emptyObj = {};
                    if (emptyObj) {
                        console.log('empty obj exists');
                    } else {
                        console.log('empty obj does not');
                    }
                    ngModel.$validators.emailDomain = function (modelValue) {
                        if (modelValue) {
                            var whiteCheck = ngModel.$isEmpty(modelValue) || emailRegex.test(modelValue);
                            // If lender type attribute is lender we do not do black list check
                            if ($attr.lenderType != 'individual') {
                                var blackCheck = emailBlackList(modelValue);
                                console.log('Domain result: ' + whiteCheck + ' ' + blackCheck);
                                return whiteCheck && blackCheck;
                            } else {
                                console.log('Individual Domain result: ' + whiteCheck);
                                return whiteCheck;
                            }
                        }
                    };
                    /**
             * Validates domain of email against black list
             *
             * @param  {String} value
             * @return {Boolean}
             */
                    function emailBlackList(value) {
                        return blackList.indexOf(value) === -1;
                    }
                }
            };
        }
    ]);
    angular.module('pp.core').directive('numbersOnly', [function () {
            return {
                require: 'ngModel',
                link: function (scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function (inputValue) {
                        var transformedInput = inputValue ? inputValue.replace(/[^\d.-]/g, '') : null;
                        if (transformedInput != inputValue) {
                            modelCtrl.$setViewValue(transformedInput);
                            modelCtrl.$render();
                        }
                        return transformedInput;
                    });
                }
            };
        }]);
    angular.module('pp.core').directive('percAmountValidation', [
        'Log',
        function (Log) {
            return {
                require: 'ngModel',
                restrict: 'A',
                scope: { otherModelValue: '=percAmountValidation' },
                link: function ($scope, $element, $attr, ngModel) {
                    ngModel.$validators.percAmountValidation = function (modelValue) {
                        var perc = Number($scope.otherModelValue);
                        var field = Number(modelValue);
                        return !(perc > 0 && field <= 0 || perc == 0 && field > 0);
                    };
                    $scope.$watch('otherModelValue', function () {
                        ngModel.$validate();
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('percValidation', [
        'Log',
        function (Log) {
            return {
                require: 'ngModel',
                restrict: 'A',
                scope: { otherModelValue: '=percValidation' },
                link: function ($scope, $element, $attr, ngModel) {
                    ngModel.$validators.minPerc = function (modelValue) {
                        var perc = Number($scope.otherModelValue);
                        var field = Number(modelValue);
                        return !(perc > 0 && field <= 0 || perc == 0 && field > 0);
                    };
                    ngModel.$validators.maxPerc = function (modelValue) {
                        var perc = Number($scope.otherModelValue);
                        var field = Number(modelValue);
                        return !(perc > 0 && field > 10);
                    };
                    $scope.$watch('otherModelValue', function () {
                        ngModel.$validate();
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('phoneNumber', [
        'Log',
        '$window',
        'AppGlobals',
        function (Log, $window, AppGlobals) {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function ($scope, $element, $attrs, modelCtrl) {
                    $scope.countryCode = AppGlobals.COUNTRY_CODE;
                    Log.debug('phone directive country code: ' + $scope.countryCode);
                    $scope.phoneUtils = $window.phoneUtils;
                    Log.debug($scope.phoneUtils);
                    $scope.formatter = function (input) {
                        try {
                            input = input.replace(/([^0-9|+])/g, '');
                            var formatted = $scope.phoneUtils.formatInternational(input, $scope.countryCode);
                            Log.debug('output from libphonenumber: ' + formatted);
                            modelCtrl.$setViewValue(formatted);
                            modelCtrl.$render();
                            return formatted || '';
                        } catch (e) {
                            Log.debug(e);
                        }
                    };
                    modelCtrl.$validators.mobile = function (modelValue) {
                        Log.debug('check is mobile: ' + modelValue);
                        try {
                            var type = $scope.phoneUtils.getNumberType(modelValue, $scope.countryCode);
                            if (type && type == 'MOBILE') {
                                Log.debug('is valid uk mobile');
                                return true;
                            }
                            Log.debug('phone type: ' + type);
                        } catch (e) {
                            Log.debug(e);
                        }
                        return false;
                    };
                    modelCtrl.$parsers.push(function (input) {
                        var output = input ? $scope.formatter(input) : '';
                        Log.debug('running phone parser: ' + input + ' : ' + output);
                        return output;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('smallerOrEqual', [
        'Log',
        function (Log) {
            return {
                require: 'ngModel',
                restrict: 'A',
                scope: { otherModelValue: '=smallerOrEqual' },
                link: function ($scope, $element, $attr, ngModel) {
                    ngModel.$validators.smallerOrEqual = function (modelValue) {
                        Log.debug('model value is: ' + modelValue);
                        Log.debug('other model value is: ' + $scope.otherModelValue);
                        return Number(modelValue) <= Number($scope.otherModelValue);
                    };
                    $scope.$watch('otherModelValue', function () {
                        ngModel.$validate();
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('borrowerCreditDetails', [
        'Log',
        'BankingModel',
        function (Log, BankingModel) {
            return {
                restrict: 'AE',
                scope: { clientName: '@clientName' },
                templateUrl: 'clients/manage/borrower-credit-details.html',
                link: function ($scope, $element, $attr, $form) {
                    Log.info('Borrower Credit Details: ' + $scope.clientName);
                    BankingModel.getCreditCheck($scope.clientName).then(function (success) {
                        $scope.creditInfo = success.data.data;
                    });
                }
            };
        }
    ]);
    angular.module('pp.core').directive('borrowerInvoiceList', [
        'Log',
        'InvoiceModel',
        function (Log, InvoiceModel) {
            return {
                restrict: 'AE',
                scope: {
                    type: '@type',
                    clientName: '@clientName'
                },
                template: '<div ng-include="getInvoiceListTemplate()"></div>',
                link: function ($scope, $element, $attr, $form) {
                    Log.info('BORROWER INVOICE LIST DIRECTIVE');
                    $scope.invoiceList = InvoiceModel.data;
                    $scope.getInvoiceListTemplate = function () {
                        var tmpl = 'clients/manage/borrower-' + $scope.type + '.html';
                        return tmpl;
                    };
                }
            };
        }
    ]);
    angular.module('pp.core').directive('clientDetails', [
        'Log',
        'AppGlobals',
        'FormModel',
        'AuthModel',
        function (Log, AppGlobals, FormModel, AuthModel) {
            return {
                restrict: 'AE',
                require: '^form',
                scope: {
                    client: '=',
                    readOnly: '='
                },
                templateUrl: 'clients/templates/client-details.html',
                link: function ($scope, $element, $attr, formCtrl) {
                    Log.debug('client details directive initiated');
                    $scope.form = formCtrl;
                    $scope.disableForm = $scope.readOnly ? true : false;
                    Log.debug('is read only: ' + $scope.readOnly);
                    $scope.domainLabel = AuthModel.data.client.lenderType == 'individual' ? AppGlobals.FIELD_LABELS.EMAIL_DOMAIN.INDIVIDUAL : AppGlobals.FIELD_LABELS.EMAIL_DOMAIN.COMPANY;
                    var primary = $scope.client.primaryUser;
                    $scope.normalizedPrimary = primary ? primary.firstName + ' ' + primary.lastName : undefined;
                    $scope.emailDomainInvalid = AppGlobals.EMAIL_DOMAIN_INVALID;
                }
            };
        }
    ]);
    angular.module('pp.core').directive('displayAuthorizeClient', [function () {
            return {
                restrict: 'E',
                scope: { clientToAuthorize: '=' },
                link: function ($scope, $elem, $atts) {
                    // Need to rebind parent as click events are in AuthClientCtrl
                    $scope.authorize = $scope.$parent;
                    console.log('Display Authorise Client Directive:');
                    console.log($scope.clientToAuthorize);
                    $scope.getAuthorizeClientTemplate = function () {
                        var tmpl = 'admin/clients/' + $scope.clientToAuthorize.clientType + '/authorize.html';
                        console.log('Loading template: ' + tmpl);
                        return tmpl;
                    };
                },
                template: '<div ng-include="getAuthorizeClientTemplate()"></div>'
            };
        }]);
    angular.module('pp.core').directive('fileUpload', [
        'AzureManager',
        function (AzureManager) {
            return {
                restrict: 'E',
                templateUrl: 'core/forms/fileUpload.html',
                link: function ($scope, $element, $attrs) {
                    AzureManager.init($scope);
                }
            };
        }
    ]);
    angular.module('pp.core').directive('headerButtons', [
        '$filter',
        'AppGlobals',
        'AuthModel',
        function ($filter, AppGlobals, AuthModel) {
            return {
                restrict: 'E',
                scope: {
                    title: '@title',
                    host: '@host',
                    type: '@type'
                },
                templateUrl: 'core/headers/header-buttons.html',
                link: function ($scope, $element, $attrs, $form) {
                    $scope.clientType = AuthModel.data.client.clientType;
                    var buttons = AppGlobals.CLIENT_BUTTONS[$scope.clientType.toUpperCase()];
                    $scope.clientIsAuthorized = AuthModel.clientIsAuthorized();
                    if ($scope.type) {
                        buttons = buttons[$scope.type.toUpperCase()];
                    } else {
                        buttons = buttons['DEFAULT'];
                    }
                    $scope.buttons = buttons;
                    $scope.subTitle = $scope.host ? $scope.host : $attrs.subTitle;
                    if ($scope.clientType == 'provider') {
                        $scope.subTitle = $filter('uppercaseFirst')(AppGlobals.MANAGER);
                    }
                }
            };
        }
    ]);
    angular.module('pp.core').directive('infoLabel', [function () {
            return {
                restrict: 'E',
                scope: { value: '=value' },
                template: '<div ng-style="maxWidth" class="inline-block margin-x-sm">' + '<div class="bg-ppLightBlue padding-lg">' + '<h3>{{value}}</h3>' + '<p class="paddingless">{{description}}</p>' + '</div> </div>',
                link: function ($scope, $element, $attrs) {
                    $scope.description = $attrs.description;
                    $scope.maxWidth = $attrs.maxWidth || { 'max-width': '140px' };
                }
            };
        }]);
    angular.module('pp.core').directive('loginBox', [function () {
            return {
                restrict: 'E',
                templateUrl: 'core/auth/login-box.html'
            };
        }]);
    angular.module('pp.core').directive('manageBorrowerTabs', [function () {
            return {
                restrict: 'E',
                scope: {
                    active: '@active',
                    clientName: '@clientName'
                },
                templateUrl: 'clients/manage/borrower-tabs.html',
                link: function ($scope, $element, $attr, $form) {
                    $scope.activeClass = function (item) {
                        return $scope.active == item ? 'active' : '';
                    };
                }
            };
        }]);
    angular.module('pp.core').directive('managerLogo', [function () {
            return {
                restrict: 'E',
                template: '<div class="row"><div class="col-md-4 col-md-offset-4" style="min-width: 470px; min-height: 200px;">' + '<div class="img-manager-logo img-background-fit"></div>' + '</div></div>'
            };
        }]);
    angular.module('pp.core').directive('navMenu', [function () {
            return {
                restrict: 'E',
                templateUrl: 'core/navbar/menu.html'
            };
        }]);
    angular.module('pp.core').directive('ppFooter', [function () {
            return {
                restrict: 'E',
                controller: 'FooterCtrl',
                templateUrl: function (elem, attrs) {
                    if (attrs.type) {
                        return 'core/footer/' + attrs.type + '.html';
                    }
                    return 'core/footer/default.html';
                }
            };
        }]);
    angular.module('pp.core').directive('ppNavbar', [
        'Log',
        function (Log) {
            return {
                restrict: 'E',
                controller: 'NavbarCtrl',
                templateUrl: function (elem, attrs) {
                    Log.debug('NAVIGATION DIRECTIVE');
                    Log.debug(attrs.type);
                    if (attrs.type) {
                        return 'core/navbar/' + attrs.type + '.html';
                    }
                    return 'core/navbar/default.html';
                }
            };
        }
    ]);
    angular.module('pp.core').directive('riskLevel', [function () {
            return {
                restrict: 'E',
                scope: { level: '=' },
                templateUrl: 'admin/invoices/risk-level.html',
                link: function ($scope, $element, $attr, $form) {
                    switch ($scope.level) {
                    case 'Low':
                        console.log('low');
                        $scope.riskClass = 'success';
                        break;
                    case 'Medium':
                        console.log('medium');
                        $scope.riskClass = 'warning';
                        break;
                    case 'High':
                        console.log('high');
                        $scope.riskClass = 'danger';
                        break;
                    }
                }
            };
        }]);
    // angular.module('pp.core').directive('displayAuthorizeClient', [function() {
    //     return {
    //         restrict: 'E',
    //         scope: {
    //             clientToAuthorize: '='
    //         },
    //         link: function ($scope, $elem, $atts) {
    //             // Need to rebind parent as click events are in AuthClientCtrl
    //             $scope.authorize = $scope.$parent;
    //             Log.debug('Display Authorise Client Directive:');
    //             Log.debug($scope.clientToAuthorize);
    //             $scope.getAuthorizeClientTemplate = function () {
    //                 var tmpl = "admin/clients/" + $scope.clientToAuthorize.clientType + "/authorize.html";
    //                 Log.debug("Loading template: " + tmpl);
    //                 return tmpl;
    //             }
    //         },
    //         template: '<div ng-include="getAuthorizeClientTemplate()"></div>'
    //     };
    // }]);
    angular.module('pp.core').directive('setupSidebar', [function () {
            return {
                restrict: 'E',
                templateUrl: function (elem, attrs) {
                    if (attrs.type) {
                        return 'setup/borrower/sidebar/' + attrs.type + '.html';
                    }
                    return 'setup/borrower/sidebar/default.html';
                }
            };
        }]);
    angular.module('pp.main').config([
        '$locationProvider',
        '$httpProvider',
        'AppGlobals',
        'localStorageServiceProvider',
        '$ocLazyLoadProvider',
        function ($locationProvider, $httpProvider, AppGlobals, localStorageServiceProvider, $ocLazyLoadProvider) {
            $ocLazyLoadProvider.config({
                modules: [
                    {
                        name: 'templates.admin',
                        files: ['js/temptaes-admin.js']
                    },
                    {
                        name: 'templates.borrower',
                        files: ['js/templates-borrower.js']
                    },
                    {
                        name: 'templates.register',
                        files: ['js/templates-register.js']
                    },
                    {
                        name: 'templates.setup',
                        files: ['js/templates-setup.js']
                    },
                    {
                        name: 'templates.invite',
                        files: ['js/templates-invite.js']
                    }
                ]
            });
        }
    ]);
    angular.module('pp.main').controller('BankAccountCtrl', [
        '_',
        'Log',
        '$scope',
        '$state',
        'BankingModel',
        'ClientModel',
        'AuthModel',
        'AppGlobals',
        function (_, Log, $scope, $state, BankingModel, ClientModel, AuthModel, AppGlobals) {
            BankingModel.init();
            $scope.vm = BankingModel.data;
            $scope.clientType = AuthModel.data.client.clientType;
            $scope.client = AuthModel.data.client;
            $scope.loadingAuthentication = false;
            $scope.loadingVerification = false;
            $scope.buttonText = undefined;
            Log.debug(BankingModel);
            $scope.getBankAccounts = function ($event, state) {
                $event.preventDefault();
                Log.info('getBankAccounts for state: ' + state);
                Log.info($scope.vm);
                return BankingModel.getBankAccounts(state);
            };
            $scope.inputAccount = function ($event, form) {
                Log.debug(form);
                if (form.$valid) {
                    $state.go('setup.' + $scope.clientType + '.accounts.authenticate.info');
                }
            };
            $scope.selectAccount = function ($event) {
                $event.preventDefault();
                $state.go('setup.' + $scope.clientType + '.accounts.authenticate.info');
            };
            $scope.confirmAccount = function ($event) {
                $event.preventDefault();
                $state.go('setup.' + $scope.clientType + '.accounts.authenticate.confirm');
            };
            $scope.backToManage = function () {
                $state.go('setup.' + $scope.clientType + '.manage');
            };
            $scope.backToStart = function () {
                if ($scope.clientType == 'borrower') {
                    $state.go('setup.' + $scope.clientType + '.accounts.authenticate.select');
                } else {
                    $state.go('setup.lender.accounts.authenticate');
                }
            };
            $scope.postBankAuthentication = function ($event, form) {
                $scope.loadingAuthentication = true;
                $scope.buttonText = AppGlobals.BUTTON_LOADING_TEXT;
                BankingModel.postBankAuthentication().then(function (success) {
                    Log.info('successfully posted bank test');
                    Log.debug(success.data);
                    // this has already been set in the back end
                    // now it just needs to be updated in the front end
                    AuthModel.data.client.clientData.authorization.bankAccountTestSent = true;
                    AuthModel.data.client.clientData.authorization.bankAccountTestSentInProgress = true;
                    AuthModel.save();
                    // $scope.vm.accounts = {};
                    var state = 'setup.' + $scope.clientType + '.accounts.sent';
                    Log.debug('navigating to state: ' + state);
                    $state.go(state);
                    $scope.loadingAuthentication = false;
                    $scope.buttonText = undefined;
                });
            };
            $scope.postBankVerification = function (form) {
                $scope.loadingVerification = true;
                $scope.buttonText = AppGlobals.BUTTON_LOADING_TEXT;
                BankingModel.postBankVerification().then(function (success) {
                    Log.info('successfully posted bank check');
                    $scope.accountVerified = true;
                    // this has already been set in the back end
                    // now it just needs to be updated in the front end
                    AuthModel.data.client.clientData.authorization.bankAccountConfirmed = true;
                    AuthModel.data.client.clientData.authorization.bankAccountTestSentInProgress = false;
                    AuthModel.save();
                    // $scope.vm.accounts = {};
                    $state.go('setup.' + $scope.clientType + '.accounts.success');
                    $scope.loadingVerification = false;
                    $scope.buttonText = undefined;
                }, function (error) {
                    $scope.loadingVerification = false;
                    $scope.buttonText = undefined;
                });
            };
            $scope.complete = function () {
                return $state.go('setup.' + $scope.clientType + '.manage');
            };
        }
    ]);
    angular.module('pp.main').controller('ClientCtrl', [
        'Log',
        '$rootScope',
        '$scope',
        '$state',
        'RootHandler',
        'AuthModel',
        'ClientModel',
        'InvoiceModel',
        'LoanModel',
        'AppGlobals',
        '$uibModal',
        'Flash',
        function (Log, $rootScope, $scope, $state, RootHandler, AuthModel, ClientModel, InvoiceModel, LoanModel, AppGlobals, $uibModal, Flash) {
            Log.debug('Client MODEL INIT');
            ClientModel.init();
            Log.debug('Client Ctrl');
            Log.debug(ClientModel);
            Log.debug(LoanModel);
            var clientType = AuthModel.data.client.clientType;
            $scope.vm = AuthModel.data;
            $scope.clientType = clientType;
            $scope.clients = ClientModel.data;
            $scope.invoices = InvoiceModel.data;
            $scope.loans = LoanModel.data;
            switch ($state.current.name) {
            case 'clients.manage.action.borrower.active':
                $scope.type = 'active';
                break;
            case 'clients.manage.action.borrower.withdrawn':
                $scope.type = 'withdrawn';
                break;
            case 'clients.manage.action.borrower.overdue':
                $scope.type = 'overdue';
                break;
            }
            /**
             * Save the client details for a 'queried' client
             */
            $scope.saveClientDetails = function (form) {
                ClientModel.data.clientToManage.clientData.authorization.detailsQueried = false;
                ClientModel.save();
                ClientModel.putClient(ClientModel.data.clientToManage.clientName, ClientModel.data.clientToManage).then(function (success) {
                    // Once this has been done send the message
                    ClientModel.queryDetailsUpdated(ClientModel.data.clientToManage.clientName).then(function (success) {
                        Flash.success(AppGlobals.CLIENT_QUERIED_UPDATED, true);
                        $state.go('clients.manage.list.all');
                    });
                });
            };
            /**
             * Go to edit details page for a given client
             */
            $scope.editClientDetails = function (clientName) {
                $state.go('clients.manage.action.edit', { clientName: clientName });
            };
            $scope.goBack = function () {
                if ($rootScope.previousState.name != '') {
                    $state.go($rootScope.previousState, { clientName: ClientModel.data.clientToManage.clientName });
                } else {
                    $state.go('clients.manage.list.all');
                }
            };
            /**
             * Action to go back to manage list
             */
            $scope.backToManage = function () {
                $state.go('clients.manage.list.all');
            };
            /**
             * View Lender/Borrower current activity
             *
             * @param  {Object} client
             */
            $scope.viewClientActivity = function (client) {
                var clientType = client.clientType;
                var clientName = client.clientName;
                var state = 'clients.manage.action.' + clientType;
                if (clientType == 'borrower') {
                    state += '.active';
                }
                $state.go(state, { clientName: clientName });
            };
            /**
             * View client details from a manage page
             *
             * @param  {String} clientName
             */
            $scope.viewClientDetails = function (clientName) {
                $state.go('clients.manage.action.details', { clientName: clientName });
            };
            $scope.continueInvite = function (client) {
                Log.debug('continue invite for client ' + client.clientName);
                var data = {
                    redirect_url: 'invite/' + client.clientNumber + '/confirm',
                    modal: {
                        modalTitle: 'Invite ' + client.clientDesc,
                        modalBody: 'Would you like to continue with the invitation?'
                    }
                };
                return RootHandler.redirectFromModal(data);
            };
            $scope.deleteClient = function (client) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/default.html',
                    controller: [
                        'Log',
                        '$scope',
                        'ClientModel',
                        '$uibModalInstance',
                        function (Log, $scope, ClientModel, $uibModalInstance) {
                            $scope.modalTitle = 'Would you like to delete this invite?';
                            $scope.modalMessage = 'You are deleting ' + client.clientDesc + '. Please confirm that you would like to delete this client.';
                            $scope.continue = function ($event) {
                                return ClientModel.deleteClient(client.clientNumber).then(function (success) {
                                    ClientModel.deleteArrayObject(ClientModel.data.index, { clientNumber: client.clientNumber });
                                    $uibModalInstance.close(true);
                                    return true;
                                }, function (error) {
                                    Log.error('error deleting client: ' + angular.toJson(client));
                                    $uibModalInstance.close(false);
                                    return false;
                                });
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Delete client modal result: ' + result);
                }, function () {
                    Log.debug('Delete client modal dismissed at: ' + new Date());
                });
            };
        }
    ]);
    angular.module('pp.main').controller('ConfirmDepositCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'ConfigModel',
        'BankingModel',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, ConfigModel, BankingModel) {
            var clientName = AuthModel.data.client.clientName;
            // var vm.depositLoaded = ClientModel.client.depositLoaded;
            Log.debug('Confirm Deposit Ctrl');
            Log.debug(BankingModel.data);
            $scope.vm = AuthModel.data;
            $scope.vm.accounts = BankingModel.data;
            $scope.cancelConfirmDeposit = function ($event) {
                $event.preventDefault();
                $state.go('setup.lender.manage');
            };
            /**
         * Initiate Payment
         */
            $scope.paymentInitiated = function ($event) {
                $event.preventDefault();
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/confirm-deposit.html',
                    scope: $scope,
                    controller: [
                        'Log',
                        '$scope',
                        '$uibModal',
                        '$uibModalInstance',
                        'BankingModel',
                        function (Log, $scope, $uibModal, $uibModalInstance, BankingModel) {
                            Log.debug('Auth Model');
                            Log.debug(AuthModel);
                            $scope.vm = AuthModel.data;
                            /**
                     * Handles functionality once user confirms deposit
                     *
                     * @param  {Object} $event [description]
                     * @return {Boolean}
                     */
                            $scope.confirmDeposit = function ($event) {
                                var putData = { 'depositAmount': AuthModel.data.client.clientData.lenderRiskProfile.depositAmount };
                                BankingModel.putDeposit(AuthModel.data.client.clientName, putData).then(function (success) {
                                    Log.info('Put Deposit Response');
                                    // Update flag on the fly locally
                                    AuthModel.data.client.clientData.authorization.depositPaymentConfirmed = true;
                                    AuthModel.data.client.clientData.depositPaymentExpected = true;
                                    AuthModel.save();
                                    $uibModalInstance.close(true);
                                    $state.go('setup.lender.manage');
                                });
                            };
                            /**
                     * Handles cancellation of confirm deposit modal
                     *
                     * @param  {Object} $event
                     */
                            $scope.closeConfirmDeposit = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
            };
        }
    ]);
    angular.module('pp.main').controller('InvestmentCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        'ClientModel',
        'AppGlobals',
        '$uibModal',
        function (Log, $scope, $state, AuthModel, ClientModel, AppGlobals, $uibModal) {
            Log.debug('Investment Ctrl');
            $scope.vm = AuthModel.data;
            $scope.value = '\xA31,300.00';
            $scope.description = 'Total capital';
        }
    ]);
    angular.module('pp.main').controller('InvoiceCtrl', [
        'Log',
        '$scope',
        '$state',
        'InvoiceModel',
        function (Log, $scope, $state, InvoiceModel) {
            Log.debug('Invoice Ctrl');
            InvoiceModel.init();
            $scope.vm = InvoiceModel.data;
            Log.debug($scope.vm);
        }
    ]);
    angular.module('pp.main').controller('InvoiceImportCtrl', [
        'Log',
        '$scope',
        '$state',
        '$uibModal',
        'AppGlobals',
        'InvoiceModel',
        'DefaultSocket',
        'Flash',
        'SocketService',
        function (Log, $scope, $state, $uibModal, AppGlobals, InvoiceModel, DefaultSocket, Flash, SocketService) {
            InvoiceModel.init();
            $scope.vm = InvoiceModel.data;
            Log.debug('InvoiceImportCtrl');
            $scope.$on('socket:pp:invoice:updated', function (event, data, callback) {
                console.log('child scope has listened to pp:invoice:updated');
                InvoiceModel.saveInvoice('import', data.invoice);
                callback(data);
            });
            $scope.$on('socket:pp:invoice:404', function (event, data, callback) {
                console.log('child scope has listened to pp:invoice:404');
                Flash.danger('We couldn\'t find any invoices', true);
                callback(data);
            });
        }
    ]);
    angular.module('pp.main').controller('InvoiceImportListCtrl', [
        'Log',
        '$scope',
        '$state',
        '$uibModal',
        'AppGlobals',
        'InvoiceModel',
        'DefaultSocket',
        'Flash',
        function (Log, $scope, $state, $uibModal, AppGlobals, InvoiceModel, DefaultSocket, Flash) {
            InvoiceModel.init();
            $scope.vm = InvoiceModel.data;
            Log.debug('InvoiceImportListCtrl');
            $scope.importSelectedInvoices = function ($event) {
                $event.preventDefault();
                Log.debug('importing selected invoices');
                Log.debug($scope.vm.importQueue);
                var checkboxCount = false;
                for (var prop in $scope.vm.importQueue) {
                    //Log.debug(prop);
                    if ($scope.vm.importQueue[prop] == true) {
                        Log.debug('Invoice number has been checked: ' + $scope.vm.importQueue[prop]);
                        checkboxCount = true;
                    }
                }
                if (!checkboxCount) {
                    Log.debug('No invoices have been checked');
                    Flash.danger('Please select one or more invoices to import');
                    return false;
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'borrower/invoices/modals/import-confirm.html',
                    controller: 'InvoiceModalCtrl',
                    scope: $scope
                });
                modalInstance.result.then(function (result) {
                    $scope.vm = InvoiceModel.data;
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
            };
        }
    ]);
    angular.module('pp.main').controller('InvoiceIndvCtrl', [
        'Log',
        '$scope',
        '$state',
        '$timeout',
        'AzureManager',
        'AuthModel',
        'ConfigModel',
        '$uibModal',
        'ClientModel',
        'CompanyModel',
        'AppGlobals',
        'InvoiceModel',
        'DefaultSocket',
        'Flash',
        'individualInvoice',
        'creditCheck',
        'StorageModel',
        function (Log, $scope, $state, $timeout, AzureManager, AuthModel, ConfigModel, $uibModal, ClientModel, CompanyModel, AppGlobals, InvoiceModel, DefaultSocket, Flash, individualInvoice, creditCheck, StorageModel) {
            AzureManager.init($scope);
            Log.debug('INDV INVOICE CTRL');
            Log.debug('Credit Check');
            Log.debug(creditCheck);
            Log.debug('Individual Invoice');
            Log.debug(individualInvoice);
            // Check status is queued or requeued
            //
            // Check that the borrower’s availableBorrowLimit is >= invoiceValue
            $scope.vm = {};
            $scope.individualInvoice = individualInvoice;
            $scope.creditCheck = creditCheck;
            $scope.vm.invoice = individualInvoice;
            $scope.vm.creditCheck = creditCheck;
            $scope.storage = StorageModel.data;
            $scope.loadingAddress = true;
            $scope.loadingPayer = false;
            $scope.loadingSubmission = false;
            $scope.buttonText = 'Submit Invoice';
            InvoiceModel.importInvoiceContact(individualInvoice.invoiceNumber, 'invoices.individual.submit').then(function (success) {
                individualInvoice.invoiceData.contactAddress = success.data.data.invoiceData.contactAddress;
                $scope.vm.invoice = individualInvoice;
                // Display the address details now it's loaded.
                $scope.loadingAddress = false;
            });
            $scope.cancelSubmit = function ($event) {
                $event.preventDefault();
                //Log.debug($scope.siForm);
                $state.go('invoices.import.queue');
            };
            $scope.checkPayer = function (callback) {
                $scope.loadingPayer = true;
                $scope.buttonText = 'Loading...';
                CompanyModel.getByNumber($scope.vm.customerCompanyNumber).then(function (success) {
                    Log.debug('retrieved payer from companies house');
                    Log.debug(success);
                    $scope.payer = success.data.data;
                    $scope.buttonText = 'Accept & Submit Invoice';
                    if (callback)
                        callback();
                    return true;
                }, function (error) {
                    $scope.loadingPayer = false;
                    $scope.buttonText = 'Submit Invoice';
                });
            };
            /**
         * Submits the invoice
         *
         * @param  {Object} $event
         */
            $scope.submitInvoice = function () {
                Log.debug('Submit Invoice Action');
                Log.debug('Using credit check: ');
                Log.debug(creditCheck);
                $scope.checkPayer($scope.openAcceptanceModal);
            };
            $scope.openAcceptanceModal = function () {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'borrower/invoices/modals/submit-invoice.html',
                    resolve: {
                        TermsData: [
                            'Log',
                            'ConfigModel',
                            function (Log, ConfigModel) {
                                Log.debug('Resolve correct terms');
                                // Sets the terms a specific as context from config table
                                return ConfigModel.getTerms('termsUserSubmitInvoice', false);
                            }
                        ]
                    },
                    scope: $scope,
                    controller: 'InvoiceSubmitCtrl'
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Confirm Terms Modal result: ' + result);
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
            };
            // ------- Socket Listeners -------
            DefaultSocket.on('pp:invoice:updated', function (message, callback) {
                Log.debug('pp:invoice:updated - contact imported');
                Log.debug(message);
                individualInvoice.invoiceData.contactAddress = message.invoice.invoiceData.contactAddress;
                $scope.vm.invoice = individualInvoice;
                // Display the address details now it's loaded.
                $scope.loadingAddress = false;
                callback(message);
            });
            DefaultSocket.on('pp:invoice:404', function (message, callback) {
                Log.debug('pp:invoice event has been registered');
                Flash.danger('We couldn\'t find any invoices');
            });
            $scope.$on('dataUpdated', function (event, data) {
                console.log(event, data);
                Log.info('400 Bad request brought back updated invoice data');
                $scope.vm.invoice = data;
            });
            $scope.logRegistry = function () {
                StorageModel.init();
                console.log(JSON.stringify(StorageModel.data.registry));
            };
            //pre load the terms prior to submission
            ConfigModel.getTerms('termsUserSubmitInvoice', false);
        }
    ]);
    angular.module('pp.main').controller('InvoiceModalCtrl', [
        '_',
        'Log',
        '$scope',
        '$uibModal',
        '$uibModalInstance',
        'InvoiceModel',
        '$state',
        'Flash',
        '$filter',
        function (_, Log, $scope, $uibModal, $uibModalInstance, InvoiceModel, $state, Flash, $filter) {
            $scope.invoices = InvoiceModel.data.list;
            Log.debug('import queue is being loaded');
            Log.debug($scope.vm.importQueue);
            // get the list of selected invoices
            var selected = [];
            for (var s in $scope.vm.importQueue) {
                //the check box may be false so can't use Object.keys
                if ($scope.vm.importQueue[s]) {
                    selected.push(s);
                }
            }
            //display the selected invoices in the modal box
            $scope.selected = InvoiceModel.data.import.filter(function (input) {
                for (var i = 0; i < selected.length; i++) {
                    if (input['invoiceNumber'].indexOf(selected[i]) != -1) {
                        Log.debug('is true');
                        return true;
                    }
                }
                return false;
            });
            $scope.cancelImport = function ($event) {
                $uibModalInstance.close(true);
            };
            $scope.confirmImport = function ($event) {
                if (!$scope.selected.length) {
                    Log.debug('none selected');
                    $uibModalInstance.dismiss('cancel');
                    Flash.danger('please select at least one invoice');
                }
                Log.debug('selected invoices are:');
                Log.debug($scope.selected);
                var params = _.map($scope.selected, 'invoiceNumber');
                Log.debug('filtered invoice numbers are:');
                Log.debug(params);
                InvoiceModel.updateCachedInvoiceStatus('queued', params).then(function (success) {
                    Log.info(success.data);
                    for (var i = 0; i < success.data.data.length; i++) {
                        //Log.debug('handling queued invoice');
                        //Log.debug(success.data.data[i]);
                        InvoiceModel.saveInvoice('import', success.data.data[i]);
                    }
                    InvoiceModel.data.importQueue = {};
                    InvoiceModel.save();
                    $state.go('invoices.import.queue');
                });
                $uibModalInstance.dismiss('cancel');
                $event.preventDefault();
            };
        }
    ]);
    angular.module('pp.main').controller('InvoiceOfferCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'LoanModel',
        'Flash',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, LoanModel, Flash) {
            Log.debug('INVOICE OFFER CTRL');
            // Loads specific offer
            $scope.offer = LoanModel.data.loanOffer;
            $scope.offerDisabled = false;
            console.log(LoanModel.data);
            var expiryTs = new Date(LoanModel.data.loanOffer.expiresOnDate);
            expiryTs = expiryTs.getTime();
            var nowDate = Date.now();
            nowDate = new Date(nowDate).getTime();
            if (nowDate > expiryTs) {
                $scope.offerDisabled = true;
            }
            $scope.backToList = function ($event) {
                $event.preventDefault();
                $state.go('invoices.list.offers');
            };
            /**
         * Verifies the invoice loan offer
         *
         * @param  {Object} $event
         */
            $scope.verifyOffer = function ($event) {
                LoanModel.verifyOffer(LoanModel.data.loanOffer.invoiceNumber).then(function (success) {
                    Flash.success(AppGlobals.LOAN_OFFER_ACCEPTED, true);
                    $state.go('loans.offers.individual.complete');
                    $event.preventDefault();
                });
            };
            /**
         * Submits the invoice
         *
         * @param  {Object} $event
         */
            $scope.sendToken = function ($event) {
                Log.debug(LoanModel);
                $event.preventDefault();
                Log.info('Submit Invoice Action');
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'borrower/loans/modals/accept-offer.html',
                    resolve: {
                        TermsData: [
                            'Log',
                            'ConfigModel',
                            function (Log, ConfigModel) {
                                return ConfigModel.getTerms('termsUserAcceptLoanOffer', false);
                            }
                        ]
                    },
                    controller: [
                        'Log',
                        '$scope',
                        '$sce',
                        '$uibModalInstance',
                        'TermsData',
                        'LoanModel',
                        function (Log, $scope, $sce, $uibModalInstance, TermsData, LoanModel) {
                            $scope.content = $sce.trustAsHtml(TermsData);
                            $scope.messageType = { name: 'text' };
                            // Compile and send token
                            $scope.sendToken = function () {
                                Log.info('Send Token Action');
                                var params = {
                                    messageType: $scope.messageType.name,
                                    invoiceLabel: LoanModel.data.loanOffer.invoiceLabel
                                };
                                Log.debug(params);
                                LoanModel.authenticateOffer(LoanModel.data.loanOffer.invoiceNumber, params).then(function (success) {
                                    Log.info('retrieved token id');
                                    LoanModel.data.loanOffer.token = success.data.data.tokenId;
                                    LoanModel.data.loanOffer.messageType = $scope.messageType.name;
                                    LoanModel.save();
                                    $uibModalInstance.close(true);
                                    $state.go('loans.offers.individual.verify');
                                });
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Confirm Terms Modal result: ' + result);
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
            };
            /**
         * Declines offer
         *
         * @param  {Object} $event
         */
            $scope.declineOffer = function ($event) {
                $event.preventDefault();
                Log.info('Submit Invoice Action');
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'borrower/loans/modals/decline-offer.html',
                    controller: [
                        'Log',
                        '$scope',
                        '$uibModalInstance',
                        function (Log, $scope, $uibModalInstance) {
                            $scope.declineLoanOffer = function (form) {
                                LoanModel.declineOffer(LoanModel.data.loanOffer.invoiceNumber).then(function (success) {
                                    Flash.success(AppGlobals.LOAN_OFFER_DECLINED, true);
                                    $state.go('invoices.list.offers');
                                    $uibModalInstance.close(true);
                                });
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Confirm Terms Modal result: ' + result);
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
            };
        }
    ]);
    angular.module('pp.main').controller('InvoiceQueueCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'InvoiceModel',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, InvoiceModel) {
            InvoiceModel.init();
            $scope.vm = InvoiceModel.data;
            Log.debug('Invoice Queue Ctrl');
            Log.debug($scope.vm);
            $scope.viewInvoice = function ($event, invoiceNumber) {
                $event.preventDefault();
                Log.info('View Invoice:' + invoiceNumber);
                $state.go('invoices.individual.submit', { invoiceNumber: invoiceNumber });
            };
            $scope.removeInvoice = function ($event, invoice) {
                $event.preventDefault();
                Log.info('Remove invoice');
                Log.debug(invoice);
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'borrower/invoices/modals/delete-invoice.html',
                    controller: [
                        'Log',
                        '$scope',
                        '$uibModalInstance',
                        'Flash',
                        function (Log, $scope, $uibModalInstance, Flash) {
                            $scope.confirm = function ($event) {
                                invoice.invoiceStatus = 'unqueued';
                                InvoiceModel.updateCachedInvoiceStatus('unqueued', invoice.invoiceNumber).then(function (success) {
                                    InvoiceModel.deleteInvoice('import', invoice);
                                    $uibModalInstance.close(true);
                                }, function (error) {
                                    Flash.danger('There was a problem removing the invoice. Please refresh the page');
                                    $uibModalInstance.dismiss('cancel');
                                });
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Delete invoice modal result: ' + result);
                    $scope.vm = InvoiceModel.data;
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
            };
        }
    ]);
    angular.module('pp.main').controller('InvoiceSubmitCtrl', [
        'Log',
        '$state',
        '$scope',
        '$sce',
        '$uibModalInstance',
        'InvoiceModel',
        'TermsData',
        'StorageModel',
        'AppGlobals',
        function (Log, $state, $scope, $sce, $uibModalInstance, InvoiceModel, TermsData, StorageModel, AppGlobals) {
            $scope.loadingPayer = false;
            $scope.buttonText = 'Accept & Submit Invoice';
            $scope.content = $sce.trustAsHtml(TermsData);
            $scope.INVOICE_REPAYMENT_PERIOD = AppGlobals.TERMS.INVOICE_REPAYMENT_PERIOD;
            Log.debug('Submit Invoice Modal fired');
            $scope.showComplete = false;
            $scope.invoiceNumber = $scope.individualInvoice.invoiceNumber;
            $scope.confirm = function ($event, form) {
                $scope.buttonText = 'Loading...';
                $scope.loadingSubmission = true;
                Log.debug('Get customer number');
                Log.debug($scope.individualInvoice.invoiceNumber, $scope.creditCheck.borrowAmount);
                var number = $scope.vm.customerCompanyNumber;
                var invoiceParams = {
                    'payerCompanyNumber': number,
                    'borrowAmount': $scope.creditCheck.borrowAmount,
                    'files': StorageModel.data.registry.invoiceEvidence
                };
                Log.debug('Inoice submit params');
                Log.debug(invoiceParams);
                InvoiceModel.submitInvoice($scope.individualInvoice.invoiceNumber, invoiceParams).then(function (success) {
                    Log.info('Fired Submit invoice');
                    StorageModel.data.registry.invoiceEvidence = [];
                    StorageModel.save();
                    $scope.banking = success.data;
                    Log.info('Update Invoice Queue');
                    $scope.individualInvoice.invoiceStatus = 'submitted';
                    InvoiceModel.saveInvoice('import', $scope.individualInvoice);
                    $scope.loadingSubmission = false;
                    $scope.buttonText = 'Ok';
                    $scope.showComplete = true;
                }, function (error) {
                    $scope.buttonText = 'Ok';
                    $scope.loadingSubmission = false;
                });
            };
            $scope.complete = function ($event) {
                $uibModalInstance.close(true);
                $state.go('invoices.import.queue');
                $event.preventDefault();
            };
            $scope.cancel = function ($event) {
                if (!$scope.showComplete) {
                    $uibModalInstance.dismiss('cancel');
                    $event.preventDefault();
                } else {
                    $scope.complete($event);
                }
            };
        }
    ]);
    angular.module('pp.main').controller('LenderRiskProfileCtrl', [
        '$filter',
        'Log',
        '$scope',
        '$state',
        'AzureManager',
        'AuthModel',
        'ClientModel',
        'FormModel',
        'StorageModel',
        'AppGlobals',
        'ConfigModel',
        '$uibModal',
        function ($filter, Log, $scope, $state, AzureManager, AuthModel, ClientModel, FormModel, StorageModel, AppGlobals, ConfigModel, $uibModal) {
            AzureManager.init($scope);
            $scope.riskProfileSubmitted = false;
            $scope.percentageError = false;
            $scope.vm = AuthModel.data;
            $scope.storage = StorageModel.data;
            Log.debug('Lender Risk Profile Ctrl');
            Log.debug($scope.vm);
            $scope.months = AppGlobals.MONTHS;
            $scope.days = AppGlobals.DAYS;
            $scope.readOnly = AuthModel.data.client.clientData.authorization.clientAuthorized ? true : false;
            // Datepicker End
            if (!$scope.vm.client.clientData.authorization.clientAuthorized) {
                // Default Risk Amounts
                $scope.vm.client.clientData.lenderRiskProfile.lowRiskAmount = 0;
                $scope.vm.client.clientData.lenderRiskProfile.mediumRiskAmount = 0;
                $scope.vm.client.clientData.lenderRiskProfile.highRiskAmount = 0;
                AuthModel.data.client.clientData.lenderRiskProfile.maxInvPctLowRisk = null;
                AuthModel.data.client.clientData.lenderRiskProfile.maxInvPctMediumRisk = null;
                AuthModel.data.client.clientData.lenderRiskProfile.maxInvPctHighRisk = null;
                AuthModel.data.client.clientData.lenderRiskProfile.maxAmountLowRisk = null;
                AuthModel.data.client.clientData.lenderRiskProfile.maxAmountMediumRisk = null;
                AuthModel.data.client.clientData.lenderRiskProfile.maxAmountHighRisk = null;
            }
            /**
         * This is a bit messy but it ensures the default max percentage value
         * is only displayed once it's corresponding select menu has been selected
         */
            var setDefaultMaxPerc = function () {
                var minPerc = 5;
                if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage != null && $scope.vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage != 0 && ($scope.vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk == null || $scope.vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk == '')) {
                    $scope.vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk = minPerc;
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage > 0) {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk = minPerc;
                    } else {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk = 0;
                    }
                }
                if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage != null && $scope.vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage != 0 && $scope.vm.client.clientData.lenderRiskProfile.maxInvPctMediumRisk == null) {
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage > 0) {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctMediumRisk = minPerc;
                    } else {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctMediumRisk = 0;
                    }
                }
                if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage != null && $scope.vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage != 0 && $scope.vm.client.clientData.lenderRiskProfile.maxInvPctHighRisk == null) {
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage > 0) {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctHighRisk = minPerc;
                    } else {
                        $scope.vm.client.clientData.lenderRiskProfile.maxInvPctHighRisk = 0;
                    }
                }
            };
            var percentages = [];
            for (var i = 0; i <= 100; i++) {
                if (i % 5 == 0) {
                    percentages.push(i);
                }
            }
            $scope.percentages = percentages;
            $scope.percentageError = false;
            /**
         * As the Maximum lend periods are dynamic from the config
         * this could be further engineered but ATM keeping it simple.
         *
         * IF an associated percentage is zero then the lend period is not required
         *
         * @param  {String} key
         * @return {Boolean}
         */
            $scope.lendPeriodRequired = function (key) {
                if (key == 'maxPeriodLowRisk') {
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage == 0) {
                        return false;
                    }
                }
                if (key == 'maxPeriodMediumRisk') {
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage == 0) {
                        return false;
                    }
                }
                if (key == 'maxPeriodHighRisk') {
                    if ($scope.vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage == 0) {
                        return false;
                    }
                }
                return true;
            };
            $scope.isValid = function (form, $event) {
                if (form.$valid && $scope.checkPercentages() && AzureManager.checkFileUpload($event, 'fundsConfirmation')) {
                    return true;
                }
                Log.debug(form);
                Log.debug('form is not valid');
                return false;
            };
            $scope.calculateRiskTotals = function () {
                setDefaultMaxPerc();
                var amount = AuthModel.data.client.clientData.lenderRiskProfile.depositAmount;
                var defaultPerc = 10;
                var lowPerc = $scope.vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage;
                var mediumPerc = $scope.vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage;
                var highPerc = $scope.vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage;
                Log.debug('Calculate Risk Totals');
                // Low Risk
                var lowRiskAmount = calculatePerc(amount, lowPerc);
                $scope.vm.client.clientData.lenderRiskProfile.lowRiskAmount = Math.round(lowRiskAmount);
                if (lowRiskAmount > 0) {
                    var maxAmountLowRisk = calculatePerc(lowRiskAmount, defaultPerc);
                    $scope.vm.client.clientData.lenderRiskProfile.maxAmountLowRisk = Math.round(maxAmountLowRisk);
                }
                // Medium Risk
                var mediumRiskAmount = calculatePerc(amount, mediumPerc);
                $scope.vm.client.clientData.lenderRiskProfile.mediumRiskAmount = Math.round(mediumRiskAmount);
                if (mediumRiskAmount > 0) {
                    var maxAmountMediumRisk = calculatePerc(mediumRiskAmount, defaultPerc);
                    $scope.vm.client.clientData.lenderRiskProfile.maxAmountMediumRisk = Math.round(maxAmountMediumRisk);
                }
                // High Risk
                var highRiskAmount = calculatePerc(amount, highPerc);
                $scope.vm.client.clientData.lenderRiskProfile.highRiskAmount = Math.round(highRiskAmount);
                if (highRiskAmount > 0) {
                    var maxAmountHighRisk = calculatePerc(highRiskAmount, defaultPerc);
                    $scope.vm.client.clientData.lenderRiskProfile.maxAmountHighRisk = Math.round(maxAmountHighRisk);
                }
            };
            function calculatePerc(amount, perc) {
                Log.debug('Calculate Perc of: ' + amount + ' ' + perc);
                return Number(amount * (perc / 100));
            }
            $scope.checkPercentages = function (calcTotals) {
                // If set recalculate totals
                // as this function runs on submit to validate, don't want to change values
                // but if the dropdown changes we want to pick that event up and change to totals
                if (calcTotals) {
                    $scope.calculateRiskTotals();
                }
                var lowPerc = parseInt(AuthModel.data.client.clientData.lenderRiskProfile.lendSpreadLowPercentage || 0);
                var mediumPerc = parseInt(AuthModel.data.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage || 0);
                var highPerc = parseInt(AuthModel.data.client.clientData.lenderRiskProfile.lendSpreadHighPercentage || 0);
                var percTotal = lowPerc + mediumPerc + highPerc;
                Log.debug(lowPerc, mediumPerc, highPerc);
                Log.debug('Total Percentage Value: ' + percTotal);
                if (100 != percTotal) {
                    // Log.debug('Total perc not 100');
                    $scope.percentageError = true;
                    return false;
                }
                $scope.percentageError = false;
                return true;
            };
            // fires a confirmation box
            $scope.confirmRiskProfile = function (form, $event) {
                $event.preventDefault();
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/risk-profile-terms.html',
                    controller: [
                        'Log',
                        '$scope',
                        'ClientModel',
                        'AuthModel',
                        '$uibModalInstance',
                        function (Log, $scope, ClientModel, AuthModel, $uibModalInstance) {
                            $scope.vm = AuthModel.data;
                            $scope.todaysDate = new Date();
                            $scope.putRiskProfile = function (form) {
                                // Concat the financialYear End
                                // todo - THIS NEEDS TO BE RETURNED FROM COMPANIES HOUSE INSTEAD
                                //if (AuthModel.data.client.clientData.lenderRiskProfile.financialYearEndDay) {
                                //    AuthModel.data.client.clientData.lenderRiskProfile.financialYearEnd = AuthModel.data.client.clientData.lenderRiskProfile.financialYearEndDay + '/' + AuthModel.data.client.clientData.lenderRiskProfile.financialYearEndMonth;
                                //
                                //    // Remove the keys so they're not saved
                                //    delete AuthModel.data.client.clientData.lenderRiskProfile.financialYearEndDay;
                                //    delete AuthModel.data.client.clientData.lenderRiskProfile.financialYearEndMonth;
                                //}
                                AuthModel.data.client.clientData.authorization.clientCompletedRiskProfile = true;
                                Log.debug('Lender Risk Profile Data to save:');
                                console.log(AuthModel.data.client);
                                ClientModel.putClient(AuthModel.data.client.clientName, AuthModel.data.client, true).then(function (success) {
                                    Log.info('Lender Risk Profile saved');
                                    AuthModel.data.client = success.data.data;
                                    AuthModel.save();
                                    $uibModalInstance.close(true);
                                    $state.go('setup.lender.manage');
                                });
                            };
                            $scope.cancelAcceptRisk = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Risk Confirm Terms Modal result: ' + result);
                }, function () {
                    Log.debug('Risk Confirm Modal dismissed at: ' + new Date());
                });
            };
            $scope.cancelRiskProfile = function ($event) {
                $scope.vm = AuthModel.refreshLenderRisk();
                $event.preventDefault();
                $state.go('setup.lender.manage');
            };
        }
    ]);
    angular.module('pp.main').controller('LenderTermsCtrl', [
        'Log',
        '$scope',
        '$state',
        '$sce',
        'lenderTermsOfService',
        'lenderSophisticatedInvestor',
        'AuthModel',
        'ClientModel',
        'AppGlobals',
        function (Log, $scope, $state, $sce, lenderTermsOfService, lenderSophisticatedInvestor, AuthModel, ClientModel, AppGlobals) {
            $scope.lenderTermsOfService = $sce.trustAsHtml(lenderTermsOfService);
            $scope.lenderSophisticatedInvestor = $sce.trustAsHtml(lenderSophisticatedInvestor);
            Log.debug('LenderTermsCtrl');
            Log.debug($scope);
            // values required inside the terms
            $scope.LENDER_NAME = AuthModel.data.firstName + ' ' + AuthModel.data.lastName;
            $scope.COMPANY_NAME = AuthModel.data.client.clientDesc;
            $scope.PLANNED_INVESTMENT_DURATION = AppGlobals.TERMS.PLANNED_INVESTMENT_DURATION;
            $scope.confirmLenderTerms = function () {
                AuthModel.data.client.clientData.authorization.tsCsConfirmed = true;
                AuthModel.save();
                // @todo - may refactor and have controller in the modal
                ClientModel.putClient(AuthModel.data.client.clientName, AuthModel.data.client).then(function (success) {
                    $state.go('setup.lender.manage');
                });
            };
            $scope.cancelLenderTerms = function ($event) {
                $event.preventDefault();
                $state.go('setup.' + AuthModel.data.client.clientType + '.manage');
            };
        }
    ]);
    angular.module('pp.main').controller('LoanOfferCtrl', [
        'Log',
        '$scope',
        '$state',
        'LoanModel',
        function (Log, $scope, $state, LoanModel) {
            Log.debug('Loan Offer Ctrl');
            $scope.vm = LoanModel.data;
            Log.debug($scope.vm);
            $scope.viewOffer = function ($event, invoiceNumber) {
                $event.preventDefault();
                Log.info('View Invoice Offer:' + invoiceNumber);
                Log.info('Redirecting to state: invoices.offers.individual.accept');
                $state.go('loans.offers.individual.accept', { id: invoiceNumber });
            };
        }
    ]);
    angular.module('pp.main').controller('LoansCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'LoanModel',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, LoanModel) {
            LoanModel.init();
            $scope.vm = LoanModel.data;
            Log.debug('Invoice Ctrl');
            Log.debug($scope.vm);
            $scope.viewOffer = function ($event, invoiceNumber) {
                $event.preventDefault();
                Log.debug('View Invoice Offer:' + invoiceNumber);
                Log.debug('Redirecting to state: loans.offers.individual.accept');
                $state.go('loans.offers.individual.accept', { id: invoiceNumber });
            };
        }
    ]);
    angular.module('pp.main').controller('RiskCtrl', [
        '_',
        'Log',
        '$scope',
        '$state',
        'AccountingModel',
        'AuthModel',
        function (_, Log, $scope, $state, AccountingModel, AuthModel) {
            $scope.title = $state.current.data.title;
            AccountingModel.init();
            $scope.vm = AuthModel.data;
            $scope.clientType = AuthModel.data.client.clientType;
            //$scope.vm.client.clientData.selfAssessment = {};
            $scope.cancelRisk = function ($event) {
                $state.go('setup.borrower.manage');
                $event.preventDefault();
            };
            $scope.getRiskAnalysis = function ($event, state) {
                $event.preventDefault();
                Log.debug('getRiskAnalysis for state: ' + state);
                Log.debug($scope.vm);
                return AccountingModel.getRiskAnalysis('setup.borrower.risk.info', state);
            };
            $scope.viewRiskAnalysis = function ($event) {
                $event.preventDefault();
                $state.go('setup.borrower.risk.info');
            };
            $scope.acceptAnalysis = function ($event) {
                $event.preventDefault();
                var state = 'setup.' + AuthModel.data.client.clientType + '.risk.questionnaire';
                $state.go(state);
            };
        }
    ]);
    angular.module('pp.main').controller('RiskQuestionnaireCtrl', [
        '_',
        'Log',
        '$scope',
        '$state',
        'AccountingModel',
        'AuthModel',
        'ClientModel',
        'FormModel',
        'Flash',
        'AppGlobals',
        function (_, Log, $scope, $state, AccountingModel, AuthModel, ClientModel, FormModel, Flash, AppGlobals) {
            $scope.vm = AuthModel.data;
            $scope.putSelfAssessment = function () {
                Log.debug('putting self assessment');
                Log.debug($scope.vm.client.clientData.selfAssessment);
                return ClientModel.putSelfAssessment($scope.vm.client.clientData.selfAssessment).then(function (success) {
                    Log.info('successfully posted self assessment');
                    var state = 'setup.' + AuthModel.data.client.clientType + '.manage';
                    // Mass assigment issue
                    AuthModel.data.client = _.extend(AuthModel.data.client, success.data);
                    // Update local user with clientCompletedRiskProfile flag
                    AuthModel.data.client.clientData.authorization['clientCompletedRiskProfile'] = true;
                    AuthModel.save();
                    $state.go(state);
                    Flash.success(AppGlobals.ACCOUNTING_SELF_ASSESSMENT_SUCCESS, true);
                });
            };
            $scope.logAuthModel = function () {
                Log.debug(AuthModel.data);
            };
            $scope.logForm = function (form) {
                Log.info(form);
            };
        }
    ]);
    angular.module('pp.main').controller('SetupCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'ConfigModel',
        'Flash',
        'StepParser',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, ConfigModel, Flash, StepParser) {
            Log.debug('SetupCtrl');
            $scope.vm = AuthModel.data;
            $scope.clientType = AuthModel.data.client.clientType;
            $scope.companyConfirmBtn = AuthModel.data.client.lenderType != 'individual' ? 'Company Details' : 'Individual Details';
            $scope.config = ConfigModel.data;
            var primary = AuthModel.data.client.primaryUser;
            $scope.normalizedPrimary = primary ? primary.firstName + ' ' + primary.lastName : undefined;
            var clientName = AuthModel.data.client.clientName;
            $scope.backToManage = function () {
                $state.go('setup.' + $scope.clientType + '.manage');
            };
            $scope.redirectTo = function (route) {
                $state.go(route);
            };
            //Setup Steps
            $scope.steps = StepParser;
            $scope.getStepStatus = StepParser.getStepStatus;
            /**
         * Action to updates user details in /setup/borrower/user
         *
         * @return void
         */
            $scope.saveUserDetails = function () {
                ClientModel.putClient(clientName, AuthModel.data).then(function (success) {
                    Log.info('successfully updated client');
                    return $state.go('setup.borrower.manage');
                });
            };
            /**
         * Action for confirmation clients details are correct
         * Sets companyDetailsConfirmed in clientData to true
         *
         * @return void
         */
            $scope.confirmDetailsCorrect = function () {
                // Update the Auth Model
                AuthModel.data.client.clientData.authorization.companyDetailsConfirmed = true;
                AuthModel.save();
                // In a toss up whether to have this specific function for setting the flags
                // or just an update on the client api @ash
                ClientModel.putClient(clientName, AuthModel.data.client).then(function (success) {
                    $state.go('setup.' + $scope.clientType + '.manage');
                });
            };
            $scope.reportProblem = function ($event) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'core/modals/confirm-query-details.html',
                    scope: $scope,
                    resolve: {
                        AuthModel: [
                            'AuthModel',
                            function (AuthModel) {
                                return AuthModel;
                            }
                        ]
                    },
                    controller: [
                        '$uibModalInstance',
                        'ClientModel',
                        function ($uibModalInstance, ClientModel) {
                            $scope.confirm = function ($event) {
                                ClientModel.queryDetails(AuthModel.data.client.clientName).then(function (success) {
                                    $uibModalInstance.close(true);
                                });
                                $event.preventDefault();
                            };
                            $scope.cancel = function ($event) {
                                $uibModalInstance.dismiss('cancel');
                                $event.preventDefault();
                            };
                        }
                    ]
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Confirm Details result: ' + result);
                    // Response true we change steps to reflect
                    if (result) {
                        Flash.success(AppGlobals.CLIENT_QUERIED, true);
                        $state.go('setup.' + $scope.clientType + '.manage');    //$uibModalInstance.close(true);
                    } else {
                        Log.error('Error confirming query details');
                    }
                }, function () {
                    Log.debug('Confirm Modal dismissed at: ' + new Date());
                });
                $event.preventDefault();
            };
            /**
         * Confirm Terms and Conditions popup
         * @todo  - Need an angular
         *
         * @param  {Object} $event
         */
            $scope.confirmBorrowerTerms = function ($event) {
                $event.preventDefault();
                var clientType = AuthModel.data.client.clientType;
                $scope.termsType = 'terms' + clientType.charAt(0).toUpperCase() + clientType.substr(1) + 'TermsOfService';
                $scope.acceptMethod = 'manageSetup';
                $scope.disableTermsButton = false;
                if (AuthModel.data.client.clientData.authorization.clientAuthorized) {
                    $scope.disableTermsButton = true;
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    scope: $scope,
                    templateUrl: 'core/modals/terms.html',
                    controller: 'TermsCtrl',
                    resolve: {
                        TermsData: [
                            'ConfigModel',
                            function (ConfigModel) {
                                return ConfigModel.getTerms($scope.termsType, false);
                            }
                        ]
                    }
                });
                modalInstance.result.then(function (result) {
                    Log.debug('Modal result: ' + result);
                    // AuthModel.data.client.clientData.authorization.tsCsConfirmed = true;
                    // AuthModel.save();
                    // $scope.vm = AuthModel.data;
                    Log.debug('Scope reset');
                }, function () {
                    Log.debug('Modal dismissed at: ' + new Date());
                });
            };
        }
    ]);
    angular.module('pp.main').controller('SetupManageCtrl', [
        'Log',
        '$scope',
        '$state',
        'AuthModel',
        '$uibModal',
        'ClientModel',
        'AppGlobals',
        'ConfigModel',
        'Flash',
        function (Log, $scope, $state, AuthModel, $uibModal, ClientModel, AppGlobals, ConfigModel, Flash) {
            Log.debug('SetupManageCtrl');
            $scope.vm = AuthModel.data;
            $scope.clientType = AuthModel.data.client.clientType;
            $scope.companyConfirmBtn = AuthModel.data.client.lenderType != 'individual' ? 'Company Details' : 'Individual Details';
            $scope.config = ConfigModel.data;
            var primary = AuthModel.data.client.primaryUser;
            $scope.normalizedPrimary = primary ? primary.firstName + ' ' + primary.lastName : undefined;
        }
    ]);
    angular.module('pp.main').controller('SetupTemplateCtrl', [
        'Log',
        '$scope',
        '$state',
        'AccountingModel',
        'AuthModel',
        function (Log, $scope, $state, AccountingModel, AuthModel) {
            $scope.templateDownloaded = false;
            $scope.vm = AccountingModel.data;
            $scope.client = AuthModel.data.client;
            $scope.showTemplateCheckButton = function ($event) {
                //$event.preventDefault();
                Log.debug('show template check button');
                return $scope.templateDownloaded = true;
            };
            $scope.checkTemplate = function ($event) {
                var self = this;
                $event.preventDefault();
                Log.info('checking template');
                AccountingModel.getBrandingTheme().then(function (success) {
                    Log.info('Retrieved branding themes');
                    if (success.data.data.brandingThemeValid) {
                        AuthModel.data.client.clientData.brandingThemeId = success.data.data.brandingThemeId;
                        AuthModel.save();
                    }
                    AccountingModel.data.brandingTheme = success.data.data;
                    AccountingModel.save();
                });
            };
            $scope.finish = function ($event) {
                $event.preventDefault();
                $state.go('setup.borrower.manage');
            };
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            $stateProvider.state('clients', {
                url: '/clients',
                abstract: true,
                template: '<ui-view/>',
                controller: 'ClientCtrl',
                parent: 'auth',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                        }
                    ]
                }
            }).state('clients.list', {
                url: '/list',
                template: '<ui-view/>',
                onEnter: [
                    'AuthModel',
                    'ClientModel',
                    'Log',
                    function (AuthModel, ClientModel, Log) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'borrower' || clientType == 'lender') {
                            return true;
                        }
                        ClientModel.indexSummaryEntities('client');
                        ClientModel.indexSummaryEntities('borrower');
                        ClientModel.indexSummaryEntities('lender');
                    }
                ]    //todo - add resolver for client html
            }).state('clients.list.active', {
                url: '/{clientType}/active',
                templateProvider: [
                    '$stateParams',
                    '$templateCache',
                    function ($stateParams, $templateCache) {
                        var template = 'core/clients/summary/clients-' + $stateParams.clientType + '-active.html';
                        var template = 'clients/clients-' + $stateParams.clientType + '-active.html';
                        return $templateCache.get(template);
                    }
                ]
            }).state('clients.list.progress', {
                url: '/{clientType}/progress',
                templateProvider: [
                    '$stateParams',
                    '$templateCache',
                    function ($stateParams, $templateCache) {
                        var template = 'clients/clients-' + $stateParams.clientType + '-inprogress.html';
                        return $templateCache.get(template);
                    }
                ]
            }).state('clients.list.waiting', {
                url: '/waiting',
                templateUrl: 'clients/clients-waiting.html'
            }).state('clients.list.rejected', {
                url: '/rejected',
                templateUrl: 'clients/clients-rejected.html'
            })    // Client Management for operator
.state('clients.manage', {
                url: '/manage',
                template: '<ui-view/>',
                controller: 'ClientCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole([
                                    'provider',
                                    'manager'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('clients.manage.list', {
                url: '/list',
                template: '<ui-view/>',
                // Requires a reolve rather than onEnter as data will be filtered
                // by the URL param by states (e.g /borrower/active) - so the data
                // needs to be available before the next state can handle it
                resolve: {
                    ClientModel: [
                        'ClientModel',
                        function (ClientModel) {
                            ClientModel.init();
                            // Pull back all clients with status
                            var params = {
                                clientStatus: [
                                    'preparation',
                                    'unconfirmed',
                                    'confirmed',
                                    'authorised',
                                    'suspended',
                                    'blocked'
                                ],
                                clientType: [
                                    'borrower',
                                    'lender'
                                ]
                            };
                            return ClientModel.getIndex(params).then(function (success) {
                                ClientModel.data.index = success.data.data;
                                ClientModel.save();
                                return ClientModel;
                            });
                        }
                    ]
                }
            }).state('clients.manage.list.all', {
                url: '/all',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/list.html',
                onEnter: [
                    'ClientModel',
                    function (ClientModel) {
                        // Reset with index from main route
                        ClientModel.filterIndex(ClientModel.data.index);
                    }
                ]
            }).state('clients.manage.list.active', {
                url: '/{clientType}/active',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/list.html',
                onEnter: [
                    '$filter',
                    '$stateParams',
                    'ClientModel',
                    function ($filter, $stateParams, ClientModel) {
                        ClientModel.init();
                        var filter = {
                            'clientData.authorization.clientAuthorized': true,
                            'clientType': $stateParams.clientType
                        };
                        var active = $filter('filterMultiObject')(ClientModel.data.index, filter);
                        ClientModel.filterIndex(active);
                    }
                ]
            }).state('clients.manage.action', {
                url: '/{clientName}',
                template: '<ui-view/>',
                resolve: {
                    ClientModel: [
                        'InvoiceModel',
                        'ClientModel',
                        '$stateParams',
                        function (InvoiceModel, ClientModel, $stateParams) {
                            /**
                         * @todo  - refactor to using resolve and uid to stay consistent
                         *          with the authorise admin
                         */
                            return ClientModel.getByName($stateParams.clientName).then(function (success) {
                                ClientModel.data.clientToManage = success.data.data;
                                ClientModel.save();
                                return ClientModel;
                            });
                        }
                    ]
                }
            }).state('clients.manage.action.details', {
                url: '/details',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/client-details.html'
            }).state('clients.manage.action.edit', {
                url: '/edit',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/client-details-edit.html'
            }).state('clients.manage.action.lender', {
                url: '/lender',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/lender.html',
                onEnter: [
                    'Log',
                    'LoanModel',
                    'ClientModel',
                    function (Log, LoanModel, ClientModel) {
                        var clientName = ClientModel.data.clientToManage.clientName;
                        LoanModel.getLenderInvestments(clientName).then(function (success) {
                            Log.debug('Get Lender Investments');
                            Log.debug(success);
                            LoanModel.data.lenderInvestments = success.data.data;
                            LoanModel.save();
                        });
                    }
                ]
            }).state('clients.manage.action.borrower', {
                url: '/borrower',
                template: '<ui-view/>',
                controller: 'ClientCtrl',
                onEnter: [
                    'ClientModel',
                    'InvoiceModel',
                    function (ClientModel, InvoiceModel) {
                        InvoiceModel.data[ClientModel.data.clientToManage.clientName] = {};
                        var params = {
                            invoiceStatus: InvoiceModel.data.statuses.invoicesOverdue,
                            clientName: ClientModel.data.clientToManage.clientName
                        };
                        InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data[ClientModel.data.clientToManage.clientName]['activeLoansList'] = success.data.data;
                            InvoiceModel.save();
                        });
                    }
                ]
            }).state('clients.manage.action.borrower.active', {
                url: '/active',
                controller: 'ClientCtrl',
                onEnter: [
                    'ClientModel',
                    'InvoiceModel',
                    function (ClientModel, InvoiceModel) {
                        var params = {
                            invoiceStatus: InvoiceModel.data.statuses.invoicesInProgress,
                            clientName: ClientModel.data.clientToManage.clientName
                        };
                        InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data[ClientModel.data.clientToManage.clientName]['activeInvoiceList'] = success.data.data;
                            InvoiceModel.save();
                        });
                    }
                ],
                templateUrl: 'clients/manage/borrower.html'
            }).state('clients.manage.action.borrower.withdrawn', {
                url: '/withdrawn',
                controller: 'ClientCtrl',
                onEnter: [
                    'ClientModel',
                    'InvoiceModel',
                    function (ClientModel, InvoiceModel) {
                        var params = {
                            invoiceStatus: InvoiceModel.data.statuses.invoicesWithDrawn,
                            clientName: ClientModel.data.clientToManage.clientName
                        };
                        InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data[ClientModel.data.clientToManage.clientName]['withdrawnInvoiceList'] = success.data.data;
                            InvoiceModel.save();
                        });
                    }
                ],
                templateUrl: function () {
                    return 'clients/manage/borrower.html';
                }
            }).state('clients.manage.action.borrower.overdue', {
                url: '/overdue',
                controller: 'ClientCtrl',
                templateUrl: 'clients/manage/borrower.html'
            });
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // INDEX
            $stateProvider.state('index', {
                url: '/',
                parent: 'guest',
                templateUrl: 'core/index/landing.html',
                controller: 'AuthCtrl'
            }).state('about', {
                url: '/about',
                templateUrl: 'core/index/about.html'
            }).state('terms', {
                url: '/terms',
                templateUrl: 'core/index/terms.html'
            }).state('pricing', {
                url: '/pricing',
                templateUrl: 'core/index/pricing.html'
            }).state('contact', {
                url: '/contact',
                templateUrl: 'core/index/contact.html'
            });    // HOME
                   // $stateProvider
                   //     .state("summary", {
                   //         url: "/summary",
                   //         parent: 'auth',
                   //         controller: 'SummaryCtrl',
                   //         templateProvider: ['AuthModel', '$templateCache', function (AuthModel, $templateCache) {
                   //             var template = "core/summary/" + AuthModel.data.client.clientType + "/main.html";
                   //             var template = "core/summary/manager/main.html";
                   //             return $templateCache.get(template);
                   //         }]
                   //         ,
                   //         resolve: {
                   //             'borrowers': ['AuthModel', 'ClientModel', function (AuthModel, ClientModel) {
                   //                 var clientType = AuthModel.data.client.clientType;
                   //                 if (clientType == 'borrower' || clientType == 'lender') {
                   //                     return true;
                   //                 }
                   //                 var params = {
                   //                     'clientType': 'borrower'
                   //                 };
                   //                 return ClientModel.getIndex(params)
                   //                     .then(function (success) {
                   //                         return success.data.data;
                   //                     });
                   //             }],
                   //             'lenders': ['AuthModel', 'ClientModel', function (AuthModel, ClientModel) {
                   //                 var clientType = AuthModel.data.client.clientType;
                   //                 if (clientType == 'borrower' || clientType == 'lender') {
                   //                     return true;
                   //                 }
                   //                 var params = {
                   //                     'clientType': 'lender'
                   //                 };
                   //                 return ClientModel.getIndex(params)
                   //                     .then(function (success) {
                   //                         return success.data.data;
                   //                     });
                   //             }],
                   //             'invoices': ['AuthModel', 'InvoiceModel', function (AuthModel, InvoiceModel) {
                   //                 var clientType = AuthModel.data.client.clientType;
                   //                 if (clientType == 'lender') {
                   //                     return true;
                   //                 }
                   //                 var admin = true;
                   //                 var client = false;
                   //                 if (clientType == 'borrower') {
                   //                     client = true;
                   //                     admin = false;
                   //                 }
                   //                 return InvoiceModel.getIndex(null, client, admin)
                   //                     .then(function (success) {
                   //                         console.log(success)
                   //                         return success.data.data;
                   //                     });
                   //             }],
                   //             'creditCheck': ['AuthModel', 'BankingModel', function (AuthModel, BankingModel) {
                   //                 var clientType = AuthModel.data.client.clientType;
                   //                 if (clientType != 'borrower') {
                   //                     return true;
                   //                 }
                   //                 return BankingModel.getCreditCheck(AuthModel.data.client.clientName)
                   //                     .then(function (success) {
                   //                         return success.data.data;
                   //                     });
                   //             }]
                   //         }
                   //     })
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        function ($stateProvider) {
            $stateProvider.state('investments', {
                abstract: true,
                parent: 'lender',
                url: '/investments',
                template: '<ui-view/>',
                controller: 'InvestmentCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasPermission('investment.get')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('investments.manage', {
                url: '/manage',
                templateUrl: 'lender/investments/manage.html'
            });
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        function ($stateProvider) {
            $stateProvider.state('invoices', {
                abstract: true,
                parent: 'auth',
                //role middleware
                url: '/invoices',
                template: '<ui-view/>',
                controller: 'InvoiceCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasPermission('invoice.get')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.import', {
                url: '/import',
                template: '<ui-view/>',
                controller: 'InvoiceImportCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.import.list', {
                url: '/list',
                controller: 'InvoiceImportListCtrl',
                templateUrl: 'borrower/invoices/import-invoices.html',
                onEnter: [
                    'Log',
                    'InvoiceModel',
                    function (Log, InvoiceModel) {
                        Log.debug('onEnter invoice import list');
                        Log.debug(InvoiceModel.data);
                        return InvoiceModel.importInvoices('invoices.import.list');
                    }
                ],
                onExit: [
                    'InvoiceModel',
                    function (InvoiceModel) {
                        InvoiceModel.data.importQueue = {};
                        InvoiceModel.save();
                    }
                ]
            }).state('invoices.import.queue', {
                url: '/queue',
                templateUrl: 'borrower/invoices/invoice-queue.html',
                controller: 'InvoiceQueueCtrl',
                onEnter: [
                    'InvoiceModel',
                    'Log',
                    function (InvoiceModel, Log) {
                        InvoiceModel.init();
                        if (!InvoiceModel.data.import || !InvoiceModel.data.import.length) {
                            Log.debug('import array is empty. populating with queued invoices');
                            InvoiceModel.getQueuedInvoices();
                        } else {
                            Log.debug('import array is already populated');
                        }
                    }
                ]
            }).state('invoices.individual', {
                url: '/{invoiceNumber}',
                template: '<ui-view/>',
                controller: 'InvoiceIndvCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ],
                    individualInvoice: [
                        '_',
                        'Log',
                        'InvoiceModel',
                        'RootHandler',
                        '$stateParams',
                        function (_, Log, InvoiceModel, RootHandler, $stateParams) {
                            var index = _.findIndex(InvoiceModel.data.import, { invoiceNumber: $stateParams.invoiceNumber });
                            Log.debug('Search imports for invoiceNumber: ' + $stateParams.invoiceNumber + ' : ' + index);
                            Log.debug(InvoiceModel.data.import);
                            if (index !== -1) {
                                console.log('getting invoice from cache');
                                return InvoiceModel.data.import[index];
                            }
                            console.log('getting from api');
                            return InvoiceModel.getCachedInvoice($stateParams.invoiceNumber).then(function (success) {
                                Log.debug('Get cached invoice by number');
                                Log.debug(success);
                                return success.data.data;    //return success.data.data;
                            }, function (error) {
                                RootHandler.notFound();
                            });
                        }
                    ],
                    creditCheck: [
                        'Log',
                        'FeeParser',
                        'BankingModel',
                        'AuthModel',
                        'individualInvoice',
                        'AppGlobals',
                        '$state',
                        'Flash',
                        function (Log, FeeParser, BankingModel, AuthModel, individualInvoice, AppGlobals, $state, Flash) {
                            Log.debug('Resolve Borrow Limit');
                            Log.debug(individualInvoice);
                            //if (!BankingModel.data.hasOwnProperty('creditCheck')) {
                            if (individualInvoice) {
                                Log.debug('has ind invoice');
                                var creditParams = {
                                    invoiceNetValue: individualInvoice.invoiceNetValue,
                                    dueDate: individualInvoice.dueDate
                                };
                                return BankingModel.getCreditCheck(AuthModel.data.client.clientName, creditParams).then(function (success) {
                                    var data = success.data.data;
                                    Log.debug('Get credit check returned successfully');
                                    Log.debug(data);
                                    if (individualInvoice.invoiceNetValue > data.borrowLimit) {
                                        Log.debug('Invoice amount greater than borrow limit');
                                        Flash.danger(AppGlobals.INVOICE_INVAVLID_AMOUNT + ' ' + individualInvoice.invoiceLabel, true);
                                        $state.go('invoices.import.queue');
                                        return false;
                                    }
                                    if (!data.hasOwnProperty('borrowAmount')) {
                                        Log.warn('Credit check returned no borrow amount for this invoice', data);
                                        Flash.danger(AppGlobals.INVOICE_INVAVLID_CREDIT + ' ' + individualInvoice.invoiceLabel, true);
                                        $state.go('invoices.import.queue');
                                        return false;
                                    }
                                    if (!data.hasOwnProperty('feeOptions')) {
                                        Log.warn('Credit check returned no fee options for this invoice', data);
                                        Flash.danger('There are no fee options available for this invoice. Please try another.', true);
                                        $state.go('invoices.import.queue');
                                        return false;
                                    }
                                    Log.debug('Parsing fee options');
                                    data = FeeParser.parse(data);
                                    Log.debug(data);
                                    return data;
                                    BankingModel.data['creditCheck'] = data;
                                    BankingModel.save();
                                    return data;
                                });
                            }
                        }
                    ]
                }
            }).state('invoices.individual.submit', {
                url: '/submit',
                templateUrl: 'borrower/invoices/invoice-submit.html',
                onExit: [
                    'StorageModel',
                    function (StorageModel) {
                        StorageModel.clearRegistry('invoiceEvidence');
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list', {
                url: '/list',
                template: '<ui-view/>',
                controller: 'InvoiceCtrl'
            })    // Borrower specific routes
.state('invoices.list.all', {
                url: '/all',
                templateUrl: 'borrower/invoices/list.html',
                onEnter: [
                    'AuthModel',
                    'InvoiceModel',
                    function (AuthModel, InvoiceModel) {
                        InvoiceModel.getIndex().then(function (success) {
                            InvoiceModel.data.index = success.data.data;
                            InvoiceModel.save();
                            return InvoiceModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list.offers', {
                url: '/offers',
                templateUrl: 'borrower/invoices/offers-list.html',
                controller: 'LoanOfferCtrl',
                onEnter: [
                    'LoanModel',
                    'Log',
                    function (LoanModel, Log) {
                        Log.debug('fetching loan offers');
                        return LoanModel.getLoanOffers();
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list.pending', {
                url: '/pending',
                templateUrl: 'borrower/invoices/pending-list.html',
                onEnter: [
                    'AuthModel',
                    'InvoiceModel',
                    function (AuthModel, InvoiceModel) {
                        var params = { invoiceStatus: InvoiceModel.data.statuses.invoicesPendingPayment };
                        return InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data.invoicesPendingPayment = success.data.data;
                            InvoiceModel.save();
                            return InvoiceModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list.notmatched', {
                url: '/not-matched',
                templateUrl: 'borrower/invoices/not-matched-list.html',
                onEnter: [
                    'AuthModel',
                    'InvoiceModel',
                    function (AuthModel, InvoiceModel) {
                        var params = { invoiceStatus: InvoiceModel.data.statuses.invoicesRejected };
                        return InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data.invoicesRejected = success.data.data;
                            InvoiceModel.save();
                            return InvoiceModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list.withdrawn', {
                url: '/withdrawn',
                templateUrl: 'borrower/invoices/withdrawn-list.html',
                onEnter: [
                    'AuthModel',
                    'InvoiceModel',
                    function (AuthModel, InvoiceModel) {
                        var params = { invoiceStatus: InvoiceModel.data.statuses.invoicesWithDrawn };
                        return InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data.invoicesWithDrawn = success.data.data;
                            InvoiceModel.save();
                            return InvoiceModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            })    // Manager / Borrower specific routes from summary
.state('invoices.list.progress', {
                url: '/progress',
                templateUrl: 'invoices/invoices-inprogress.html',
                onEnter: [
                    'AuthModel',
                    'SummaryModel',
                    'InvoiceModel',
                    function (AuthModel, SummaryModel, InvoiceModel) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'lender') {
                            return true;
                        }
                        var params = { invoiceStatus: InvoiceModel.data.statuses.invoicesInProgress };
                        return InvoiceModel.getIndex(params).then(function (success) {
                            InvoiceModel.data.invoicesInProgress = success.data.data;
                            InvoiceModel.save();
                            if (clientType != 'borrower') {
                                InvoiceModel.checkAgainstSummary('invoicesInProgress', SummaryModel);
                            }
                            return InvoiceModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole([
                                    'borrower',
                                    'manager',
                                    'provider'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            });
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        function ($stateProvider) {
            $stateProvider.state('loans', {
                abstract: true,
                parent: 'auth',
                //role middleware
                url: '/loans',
                template: '<ui-view/>',
                controller: 'LoansCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasPermission('invoice.get')) {
                            }
                        }
                    ]
                }
            }).state('loans.list', {
                url: '/list',
                template: '<ui-view/>'
            }).state('loans.list.active', {
                url: '/active',
                templateUrl: 'borrower/loans/list.html',
                onEnter: [
                    'Log',
                    'AuthModel',
                    'LoanModel',
                    function (Log, AuthModel, LoanModel) {
                        LoanModel.init();
                        var clientType = AuthModel.data.client.clientType;
                        var params = { invoiceStatus: LoanModel.data.statuses.loansActive };
                        return LoanModel.getIndex(params).then(function (success) {
                            Log.debug('Get Loans');
                            Log.debug(success);
                            LoanModel.data.loansActive = success.data.data;
                            LoanModel.save();
                            return LoanModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.list.completed', {
                url: '/completed',
                templateUrl: 'borrower/loans/completed-list.html',
                onEnter: [
                    'Log',
                    'AuthModel',
                    'LoanModel',
                    function (Log, AuthModel, LoanModel) {
                        LoanModel.init();
                        var clientType = AuthModel.data.client.clientType;
                        var params = {
                            invoiceStatus: [
                                LoanModel.data.statuses.loansSettled,
                                LoanModel.data.statuses.loansPaid
                            ]
                        };
                        return LoanModel.getIndex(params).then(function (success) {
                            Log.debug('Get Loans');
                            Log.debug(success);
                            LoanModel.data.loansCompleted = success.data.data;
                            LoanModel.save();
                            return LoanModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.list.overduePayments', {
                url: '/payments-overdue',
                templateUrl: 'borrower/loans/overdue-payment-list.html',
                onEnter: [
                    'AuthModel',
                    'LoanModel',
                    function (AuthModel, LoanModel) {
                        LoanModel.init();
                        var clientType = AuthModel.data.client.clientType;
                        var params = { invoiceStatus: LoanModel.data.statuses.loansActive };
                        return LoanModel.getIndex(params).then(function (success) {
                            LoanModel.data.loansActive = success.data.data;
                            LoanModel.save();
                            return LoanModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole(['borrower'])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.list.confirmed', {
                url: '/confirmed',
                templateUrl: 'loans/loans-confirmed.html',
                controller: 'LoansCtrl',
                onEnter: [
                    'AuthModel',
                    'SummaryModel',
                    'LoanModel',
                    function (AuthModel, SummaryModel, LoanModel) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'lender') {
                            return true;
                        }
                        var params = { invoiceStatus: LoanModel.data.statuses.loansAccepted };
                        return LoanModel.getIndex(params).then(function (success) {
                            LoanModel.data.loansAccepted = success.data.data;
                            LoanModel.save();
                            if (clientType != 'borrower') {
                                LoanModel.checkAgainstSummary('loansAccepted', SummaryModel);
                            }
                            return LoanModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole([
                                    'borrower',
                                    'manager',
                                    'provider'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.list.overdue', {
                url: '/overdue',
                templateUrl: 'loans/loans-overdue.html',
                onEnter: [
                    'AuthModel',
                    'SummaryModel',
                    'LoanModel',
                    function (AuthModel, SummaryModel, LoanModel) {
                        var clientType = AuthModel.data.client.clientType;
                        if (clientType == 'lender') {
                            return true;
                        }
                        var params = { invoiceStatus: LoanModel.data.statuses.loansActive };
                        return LoanModel.getIndex(params).then(function (success) {
                            console.log('Loans overdue');
                            console.log(success);
                            // SummaryModel.summary.loansActive.value;
                            LoanModel.data.loansActive = success.data.data;
                            LoanModel.save();
                            if (clientType != 'borrower') {
                            }
                            return LoanModel;
                        });
                    }
                ],
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole([
                                    'borrower',
                                    'manager',
                                    'provider'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('invoices.list.underpaid', {
                url: '/underpaid',
                templateUrl: 'loans/loans-underpaid.html',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole([
                                    'borrower',
                                    'manager',
                                    'provider'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.individual', {
                url: '/{id}',
                template: '<ui-view/>',
                controller: 'IndvLoansCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.offers', {
                url: '/offers',
                template: '<ui-view/>',
                controller: 'LoansCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower', 'manager', 'provider')) {
                                RootHandler.forbidden();
                            }
                        }
                    ]
                }
            }).state('loans.offers.list', {
                url: '/list',
                templateUrl: 'borrower/loans/offers/offers-list.html',
                // onEnter: ['LoanModel', function(LoanModel) {
                //     // return LoanModel.updateLoanOffers();
                // }],
                resolve: {
                    LoanModel: [
                        'LoanModel',
                        function (LoanModel) {
                            // OnEnter doesn't seem to acknowledge the LoanModel some how?
                            // So chaining getLoanOffers onces they have been updated
                            return LoanModel.updateLoanOffers().then(function (success) {
                                return LoanModel.getLoanOffers();
                            }, function (error) {
                                console.log(error);
                            });
                        }
                    ]
                }
            }).state('loans.offers.individual', {
                url: '/{id}',
                template: '<ui-view/>',
                controller: 'InvoiceOfferCtrl'
            }).state('loans.offers.individual.accept', {
                url: '/accept',
                resolve: {
                    LoanModel: [
                        'LoanModel',
                        '$stateParams',
                        function (LoanModel, $stateParams) {
                            console.log('Resolve loan offer: ' + $stateParams.id);
                            return LoanModel.getLoanOffer($stateParams.id);
                        }
                    ]
                },
                templateUrl: 'borrower/loans/offers/invoice-offer-submit.html'
            }).state('loans.offers.individual.verify', {
                url: '/verify',
                templateUrl: 'borrower/loans/offers/offer-verify.html'
            }).state('loans.offers.individual.complete', {
                url: '/complete',
                templateUrl: 'borrower/loans/offers/offer-complete.html'
            });
        }
    ]);
    angular.module('pp.core').config([
        '$stateProvider',
        function ($stateProvider) {
            // PRE_REGISTER BORROWERS AND LENDERS
            $stateProvider.state('setup', {
                abstract: true,
                parent: 'auth',
                url: '/setup',
                template: '<ui-view/>',
                controller: 'SetupCtrl'
            })    // SETUP BORROWER
.state('setup.borrower', {
                abstract: true,
                url: '/borrower',
                templateUrl: 'setup/index.html',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasPermission([
                                    'setup.manage',
                                    'client.put'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ],
                    role: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('borrower')) {
                                return RootHandler.forbidden();
                            }
                            return true;
                        }
                    ]
                }
            })    // Management Page
.state('setup.borrower.manage', {
                url: '/manage',
                templateUrl: 'setup/borrower/manage.html',
                controller: 'SetupManageCtrl',
                onEnter: [
                    'Log',
                    'AuthModel',
                    'Flash',
                    'AppGlobals',
                    '$uibModal',
                    'StepParser',
                    function (Log, AuthModel, Flash, AppGlobals, $uibModal, StepParser) {
                        // refresh the steps to get the latest data from the auth model
                        StepParser.refresh();
                        Log.debug('entering setup borrower manage');
                        var authorization = AuthModel.data.client.clientData.authorization;
                        var completed = authorization.tsCsConfirmed === true && authorization.bankAccountConfirmed === true && authorization.companyDetailsConfirmed === true && AuthModel.data.client.clientData.brandingThemeId;
                        // user is waiting for admin authorization
                        if (completed && !authorization.clientAuthorized) {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: 'core/modals/default.html',
                                controller: [
                                    '$scope',
                                    '$uibModal',
                                    '$uibModalInstance',
                                    function ($scope, $uibModal, $uibModalInstance) {
                                        $scope.modalTitle = 'Your account is awaiting authorisation';
                                        $scope.modalMessage = 'If you have already been waiting for more than 24 hours then please contact your service provider.';
                                        $scope.buttonText = 'Ok';
                                        $scope.continue = function ($event) {
                                            $uibModalInstance.close(true);
                                        };
                                        $scope.cancel = function ($event) {
                                            $event.preventDefault();
                                            $uibModalInstance.dismiss('cancel');
                                        };
                                    }
                                ]
                            });
                        }
                        // user is already fully authorized
                        if (completed && authorization.clientAuthorized) {
                            Flash.success('Your account setup is complete', true);
                        }
                    }
                ],
                resolve: {
                    authUserData: [
                        'Log',
                        'AuthModel',
                        'ApiHandler',
                        'Flash',
                        function (Log, AuthModel, ApiHandler, Flash) {
                            AuthModel.getMe().then(function (success) {
                                console.log(success);
                                AuthModel.mergeData(success.data.data);
                            }, function () {
                                Flash.danger('There was a problem fetching your data. Please refresh the page.');
                            });
                        }
                    ]
                }
            })    // Company Details
.state('setup.borrower.company', {
                url: '/company',
                controller: 'SetupCtrl',
                templateUrl: 'setup/company-details.html'
            })    // Risk Profile
.state('setup.borrower.risk', {
                url: '/risk',
                templateUrl: 'setup/borrower/risk-profile.html',
                controller: 'RiskCtrl',
                onEnter: [
                    'StepParser',
                    function (StepParser) {
                        StepParser.refresh();
                    }
                ],
                data: { title: 'Please complete the following information to help us work out your borrow levels' }
            }).state('setup.borrower.risk.start', {
                url: '/start',
                templateUrl: 'setup/borrower/risk-start.html',
                data: { title: 'Connect to your accounting system to complete your risk assessment' },
                onEnter: [
                    'AuthModel',
                    '$state',
                    function (AuthModel, $state) {
                        if (AuthModel.data.client.clientData.riskAnalysis) {
                            // a one off redirect for those returning from the manage page
                            $state.go('setup.borrower.risk.questionnaire');
                        }
                    }
                ]
            }).state('setup.borrower.risk.info', {
                url: '/info',
                templateUrl: 'setup/borrower/risk-info.html',
                data: { title: 'The following information was retrieved from your accountancy system' },
                controller: [
                    '$scope',
                    'AuthModel',
                    function ($scope, AuthModel) {
                        $scope.vm = AuthModel.data;
                    }
                ],
                onEnter: [
                    'Log',
                    'AuthModel',
                    function (Log, AuthModel) {
                        Log.debug('current risk analysis is:');
                        Log.debug(AuthModel.data.client.clientData.riskAnalysis);
                    }
                ]
            }).state('setup.borrower.risk.questionnaire', {
                url: '/questionnaire',
                templateUrl: 'setup/borrower/risk-questionnaire.html',
                controller: 'RiskQuestionnaireCtrl',
                data: { title: 'Please complete the following information to help us work out your borrow levels' }
            })    // BANK ACCOUNT
.state('setup.borrower.accounts', {
                url: '/accounts',
                template: '<ui-view/>',
                controller: 'BankAccountCtrl',
                onEnter: [
                    'StepParser',
                    function (StepParser) {
                        StepParser.refresh();
                    }
                ]
            }).state('setup.borrower.accounts.authenticate', {
                url: '/authenticate',
                templateUrl: 'setup/borrower/account-authenticate.html'
            }).state('setup.borrower.accounts.authenticate.select', {
                url: '/select',
                templateUrl: 'setup/borrower/account-select.html',
                onEnter: [
                    '$state',
                    'BankingModel',
                    function ($state, BankingModel) {
                        if (!BankingModel.data.accounts.available) {
                            $state.go('setup.borrower.accounts.authenticate');
                        }
                    }
                ]
            }).state('setup.borrower.accounts.authenticate.info', {
                url: '/info',
                templateUrl: 'setup/account-info.html',
                onEnter: [
                    '$state',
                    'BankingModel',
                    function ($state, BankingModel) {
                        if (!BankingModel.data.accounts.available) {
                            $state.go('setup.borrower.accounts.authenticate');
                        }
                    }
                ]
            }).state('setup.borrower.accounts.authenticate.confirm', {
                url: '/confirm',
                templateUrl: 'setup/account-confirm.html',
                onEnter: [
                    '$state',
                    'BankingModel',
                    function ($state, BankingModel) {
                        if (!BankingModel.data.accounts.available) {
                            $state.go('setup.borrower.accounts.authenticate');
                        }
                    }
                ]
            }).state('setup.borrower.accounts.sent', {
                url: '/sent',
                templateUrl: 'setup/account-sent.html',
                onEnter: [
                    '$state',
                    'BankingModel',
                    function ($state, BankingModel) {
                        if (!BankingModel.data.accounts.available) {
                            $state.go('setup.borrower.accounts.authenticate');
                        }
                    }
                ]
            }).state('setup.borrower.accounts.verify', {
                url: '/verify',
                templateUrl: 'setup/account-verify.html',
                onEnter: [
                    'BankingModel',
                    function (BankingModel) {
                        BankingModel.data.accounts.verify = {};
                    }
                ]
            }).state('setup.borrower.accounts.success', {
                url: '/success',
                templateUrl: 'setup/account-success.html'
            })    // User Details
.state('setup.borrower.user', {
                url: '/user',
                templateUrl: 'setup/borrower/user-details.html'
            }).state('setup.borrower.invoice-template', {
                url: '/invoice-template',
                templateUrl: 'setup/borrower/invoice-templates.html',
                controller: 'SetupTemplateCtrl'
            })    // SETUP LENDER
.state('setup.lender', {
                abstract: true,
                url: '/lender',
                templateUrl: 'setup/index.html',
                controller: 'SetupCtrl',
                resolve: {
                    permission: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasPermission([
                                    'setup.manage',
                                    'client.put'
                                ])) {
                                RootHandler.forbidden();
                            }
                        }
                    ],
                    role: [
                        'AuthModel',
                        'RootHandler',
                        function (AuthModel, RootHandler) {
                            if (!AuthModel.hasRole('lender')) {
                                return RootHandler.forbidden();
                            }
                            return true;
                        }
                    ]
                }
            })    // Management Page
.state('setup.lender.manage', {
                url: '/manage',
                controller: 'SetupCtrl',
                templateUrl: 'setup/lender/manage.html',
                onEnter: [
                    'StepParser',
                    function (StepParser) {
                        StepParser.refresh();
                    }
                ],
                resolve: {
                    authUserData: [
                        'Log',
                        'AuthModel',
                        'ApiHandler',
                        'Flash',
                        function (Log, AuthModel, ApiHandler, Flash) {
                            AuthModel.getMe().then(function (success) {
                                console.log(success);
                                AuthModel.mergeData(success.data.data);
                            }, function () {
                                Flash.danger('There was a problem fetching your data. Please refresh the page.');
                            });
                        }
                    ]
                }
            }).state('setup.lender.terms', {
                url: '/terms',
                templateUrl: 'setup/lender/terms.html',
                controller: 'LenderTermsCtrl',
                resolve: {
                    lenderTermsOfService: [
                        'ConfigModel',
                        function (ConfigModel) {
                            return ConfigModel.getTerms('termsLenderTermsOfService', 1);
                        }
                    ],
                    lenderSophisticatedInvestor: [
                        'ConfigModel',
                        function (ConfigModel) {
                            return ConfigModel.getTerms('termsLenderSophisticatedInvestor', 1);
                        }
                    ]
                }
            })    //Company Details
.state('setup.lender.details', {
                url: '/confirm/details',
                templateUrl: 'setup/company-details.html'
            })    //Lender Risk Profile
.state('setup.lender.risk', {
                url: '/risk',
                controller: 'LenderRiskProfileCtrl',
                templateUrl: 'setup/lender/risk-profile.html',
                //templateProvider: ['AuthModel', '$templateCache', function (AuthModel, $templateCache) {
                //    var template = "setup/lender/risk-profile.html";
                //
                //    if (AuthModel.data.client.clientData.authorization.clientAuthorized) {
                //        template = "setup/lender/risk-profile-disabled.html";
                //    }
                //
                //    return $templateCache.get(template);
                //}],
                onExit: [
                    'StorageModel',
                    function (StorageModel) {
                        StorageModel.clearRegistry('fundsConfirmation');
                    }
                ]
            }).state('setup.lender.deposit', {
                url: '/deposit',
                controller: 'ConfirmDepositCtrl',
                'templateUrl': 'setup/lender/confirm-deposit.html',
                resolve: {
                    BankingModel: [
                        'AuthModel',
                        'BankingModel',
                        function (AuthModel, BankingModel) {
                            var clientName = AuthModel.data.client.clientName;
                            console.log('Retrieving accounts for ' + clientName);
                            BankingModel.getAccountRefs(clientName, true).then(function (data) {
                                BankingModel.data.accounts = data.data.data;
                            });
                            return BankingModel;
                        }
                    ]
                }
            })    // Bank Account
.state('setup.lender.accounts', {
                url: '/accounts',
                template: '<ui-view/>',
                controller: 'BankAccountCtrl'
            }).state('setup.lender.accounts.authenticate', {
                url: '/authenticate',
                templateUrl: 'setup/lender/account-authenticate.html',
                onEnter: [
                    'BankingModel',
                    function (BankingModel) {
                        BankingModel.data.accounts.authenticate = {};
                    }
                ]
            }).state('setup.lender.accounts.authenticate.info', {
                url: '/info',
                templateUrl: 'setup/account-info.html'
            }).state('setup.lender.accounts.authenticate.confirm', {
                url: '/confirm',
                templateUrl: 'setup/account-confirm.html'
            }).state('setup.lender.accounts.sent', {
                url: '/sent',
                templateUrl: 'setup/account-sent.html'
            }).state('setup.lender.accounts.verify', {
                url: '/verify',
                templateUrl: 'setup/account-verify.html',
                onEnter: [
                    'BankingModel',
                    function (BankingModel) {
                        BankingModel.data.accounts.verify = {};
                    }
                ]
            }).state('setup.lender.accounts.success', {
                url: '/success',
                templateUrl: 'setup/account-success.html'
            });
        }
    ]);
    angular.module('pp.main').config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            // HOME
            $stateProvider.state('summary', {
                // abstract: true,
                parent: 'auth',
                //role middleware
                url: '/summary',
                // template: '<ui-view/>',
                controller: 'SummaryCtrl',
                onEnter: [
                    '$state',
                    'SummaryModel',
                    'AuthModel',
                    'ClientModel',
                    'InvoiceModel',
                    'LoanModel',
                    'BankingModel',
                    'Log',
                    function ($state, SummaryModel, AuthModel, ClientModel, InvoiceModel, LoanModel, BankingModel, Log) {
                        BankingModel.init();
                        InvoiceModel.init();
                        LoanModel.init();
                        var clientType = AuthModel.data.client.clientType;
                        if (AuthModel.clientIsAuthorized() == false) {
                            $state.go('setup.' + clientType + '.manage');
                        }
                        if (clientType == 'borrower' || clientType == 'lender') {
                            // ClientModel.getAllIndex();
                            InvoiceModel.getAllIndex(clientType);
                            if (clientType == 'borrower') {
                                BankingModel.getCreditCheck(AuthModel.data.client.clientName).then(function (success) {
                                    BankingModel.data.creditCheck = success.data.data;
                                    BankingModel.save();
                                });
                            }
                            if (clientType == 'lender') {
                                LoanModel.getLenderInvestments(AuthModel.data.client.clientName).then(function (success) {
                                    Log.debug(success);
                                    LoanModel.data.lenderInvestments = success.data.data;
                                    LoanModel.save();
                                });
                            }
                        } else {
                            // ClientModel.indexSummaryEntities('client');
                            // ClientModel.indexSummaryEntities('borrower');
                            // ClientModel.indexSummaryEntities('lender');
                            // InvoiceModel.indexSummaryEntities('invoice');
                            // BankingModel.indexSummaryEntities('banking');
                            // LoanModel.indexSummaryEntities('loan');
                            SummaryModel.index();
                        }    //LoanModel.indexSummaryEntities('loan');
                    }
                ],
                templateProvider: [
                    'AuthModel',
                    '$templateCache',
                    function (AuthModel, $templateCache) {
                        var template = 'core/summary/' + AuthModel.data.client.clientType + '/main.html';
                        // providers default to manager summary view
                        if (AuthModel.data.client.clientType == 'provider' || AuthModel.data.client.clientType == 'manager') {
                            template = 'core/summary/manager/main.html';
                        }
                        return $templateCache.get(template);
                    }
                ]
            });
        }
    ]);
    angular.module('pp.core').factory('FeeParser', [
        'Log',
        function (Log) {
            var service = {};
            service.parse = function (data) {
                var feeOptions = data.feeOptions[0];
                Log.debug('Fee Options input');
                Log.debug(data);
                if (feeOptions.high && feeOptions.medium && feeOptions.low) {
                    console.log('High, Medium & Low');
                    data.lowFeeValue = feeOptions.low[0].feeEstimate;
                    data.highFeeValue = feeOptions.high[0].feeEstimate;
                }
                if (!feeOptions.high && feeOptions.medium && feeOptions.low) {
                    console.log('Medium & Low');
                    data.lowFeeValue = feeOptions.low[0].feeEstimate;
                    data.highFeeValue = feeOptions.medium[0].feeEstimate;
                }
                if (!feeOptions.high && !feeOptions.medium && feeOptions.low) {
                    console.log('Just Low');
                    data.lowFeeValue = feeOptions.low[0].feeEstimate;
                    data.highFeeValue = feeOptions.low[0].feeEstimate;
                }
                Log.debug('lowFeeValue is: ' + data.lowFeeValue);
                Log.debug('highFeeValue is: ' + data.highFeeValue);
                return data;
            };
            return service;
        }
    ]);
    angular.module('pp.main').service('StepParser', [
        'Log',
        'AuthModel',
        function (Log, AuthModel) {
            var service = {
                data: {
                    borrower: [],
                    lender: []
                }
            };
            /**
         * Gets the status of setup step from the scope view model
         * by a given property
         *
         * @param  {String} property - a property that exists within the clientData
         * @return {Boolean}
         */
            service.getStepStatus = function (property) {
                return AuthModel.data.client.clientData.authorization[property] || false;
            };
            //Setup Steps
            service.refresh = function () {
                var clientType = AuthModel.data.client.clientType;
                Log.debug('refreshing setup steps for clientType: ' + clientType);
                if (clientType == 'borrower') {
                    service.data.borrower = {
                        companyDetailsConfirmed: {
                            label: 'Company Details Confirmed',
                            status: service.getStepStatus('companyDetailsConfirmed'),
                            confirmKey: 'companyDetailsConfirmed',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return service.getStepStatus('companyDetailsConfirmed');
                                } else {
                                    return false;
                                }
                            }
                        },
                        clientCompletedRiskProfile: {
                            label: 'Manage Risk Profile',
                            status: service.getStepStatus('clientCompletedRiskProfile'),
                            confirmKey: 'clientCompletedRiskProfile',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return !service.getStepStatus('companyDetailsConfirmed') || service.getStepStatus('clientCompletedRiskProfile');
                                } else {
                                    return false;
                                }
                            }
                        },
                        tsCsConfirmed: {
                            label: 'Terms & Conditions Confirmed',
                            status: service.getStepStatus('tsCsConfirmed'),
                            confirmKey: 'tsCsConfirmed',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return !(service.getStepStatus('companyDetailsConfirmed') && service.getStepStatus('clientCompletedRiskProfile')) || service.getStepStatus('tsCsConfirmed');
                                } else {
                                    return false;
                                }
                            }
                        },
                        bankAccountTestSent: {
                            label: 'Bank Account Details Entered',
                            status: service.getStepStatus('bankAccountTestSent'),
                            confirmKey: 'bankAccountTestSent',
                            isDisabled: function () {
                                return !service.getStepStatus('bankAccountConfirmed') && service.getStepStatus('bankAccountTestSent') || service.getStepStatus('bankAccountTestSentInProgress') || !(service.getStepStatus('companyDetailsConfirmed') && service.getStepStatus('clientCompletedRiskProfile') && service.getStepStatus('tsCsConfirmed'));
                            }
                        },
                        bankAccountConfirmed: {
                            label: 'Bank Account Details Confirmed',
                            status: service.getStepStatus('bankAccountConfirmed'),
                            confirmKey: 'bankAccountConfirmed',
                            isDisabled: function () {
                                return !service.getStepStatus('companyDetailsConfirmed') || !service.getStepStatus('bankAccountTestSentInProgress') || !service.getStepStatus('tsCsConfirmed') || !service.getStepStatus('clientCompletedRiskProfile') || !service.getStepStatus('bankAccountTestSent');
                            }
                        },
                        clientAuthorized: {
                            label: 'Authorised & Live',
                            status: service.getStepStatus('clientAuthorized'),
                            confirmKey: 'clientAuthorized',
                            isDisabled: function () {
                                return !service.getStepStatus('clientAuthorized');
                            }
                        }
                    };
                }
                if (clientType == 'lender') {
                    service.data.lender = {
                        companyDetailsConfirmed: {
                            label: 'Lender Details Confirmed',
                            status: service.getStepStatus('companyDetailsConfirmed'),
                            confirmKey: 'companyDetailsConfirmed',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return service.getStepStatus('companyDetailsConfirmed');
                                }
                                return false;
                            }
                        },
                        tsCsConfirmed: {
                            label: 'Terms & Conditions Confirmed',
                            status: service.getStepStatus('tsCsConfirmed'),
                            confirmKey: 'tsCsConfirmed',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return !service.getStepStatus('companyDetailsConfirmed') || service.getStepStatus('tsCsConfirmed');
                                }
                                return false;
                            }
                        },
                        clientCompletedRiskProfile: {
                            label: 'Manage Lender Risk Profile',
                            status: service.getStepStatus('clientCompletedRiskProfile'),
                            confirmKey: 'clientCompletedRiskProfile',
                            isDisabled: function () {
                                if (!service.getStepStatus('clientAuthorized')) {
                                    return !(!service.getStepStatus('clientCompletedRiskProfile') && service.getStepStatus('companyDetailsConfirmed'));
                                }
                                return false;
                            }
                        },
                        bankAccountTestSent: {
                            label: 'Bank Account Details Entered',
                            status: service.getStepStatus('bankAccountTestSent'),
                            confirmKey: 'bankAccountTestSent',
                            isDisabled: function () {
                                return !service.getStepStatus('bankAccountConfirmed') && service.getStepStatus('bankAccountTestSent') || service.getStepStatus('bankAccountTestSentInProgress') || !(service.getStepStatus('companyDetailsConfirmed') && service.getStepStatus('clientCompletedRiskProfile') && service.getStepStatus('tsCsConfirmed'));
                            }
                        },
                        bankAccountConfirmed: {
                            label: 'Bank Account Details Confirmed',
                            status: service.getStepStatus('bankAccountConfirmed'),
                            confirmKey: 'bankAccountConfirmed',
                            isDisabled: function () {
                                return !service.getStepStatus('companyDetailsConfirmed') || !service.getStepStatus('tsCsConfirmed') || !service.getStepStatus('bankAccountTestSentInProgress') || !service.getStepStatus('clientCompletedRiskProfile') || !service.getStepStatus('bankAccountTestSent');
                            }
                        },
                        clientAuthorized: {
                            label: 'Authorised',
                            status: service.getStepStatus('clientAuthorized'),
                            confirmKey: 'clientAuthorized',
                            isDisabled: function () {
                                return !service.getStepStatus('clientAuthorized');
                            }
                        },
                        depositPaymentConfirmed: {
                            label: 'Deposit confirmed & Live',
                            status: service.getStepStatus('depositPaymentConfirmed'),
                            confirmKey: 'depositPaymentConfirmed',
                            isDisabled: function () {
                                return service.getStepStatus('clientAuthorized') == false || service.getStepStatus('depositPaymentConfirmed') == true;
                            }
                        }
                    };
                }
            };
            service.isDisabled = function (step) {
                return service.data[AuthModel.data.client.clientType][step].isDisabled();
            };
            service.getPercentage = function () {
                var completed = [];
                //Log.debug('getting step % for clientType: ' + AuthModel.data.client.clientType);
                var steps = service.data[AuthModel.data.client.clientType];
                var stepLength = Object.keys(steps).length;
                //Log.debug(stepLength);
                //Work out how many steps are completed
                for (var prop in steps) {
                    //Log.debug(steps[prop]);
                    if (steps[prop].status) {
                        completed.push(steps[prop]);
                    }
                }
                return Math.round(completed.length / stepLength * 100);
            };
            service.isNext = function (currentIndex) {
                var completed = [];
                var checkSteps = service.data[AuthModel.data.client.clientType];
                for (var i = 0; i < checkSteps.length; i++) {
                    if (checkSteps[i].status) {
                        completed.push(checkSteps[i]);
                    }
                }
                if (currentIndex == completed.length) {
                    return true;
                } else {
                    return false;
                }
            };
            service.refresh();
            return service;
        }
    ]);
    angular.module('pp.main').directive('invoiceNav', [function () {
            return {
                restrict: 'E',
                scope: { active: '@active' },
                templateUrl: 'borrower/invoices/invoice-nav.html',
                link: function ($scope, $element, $attr, $form) {
                    $scope.activeClass = function (item) {
                        return $scope.active == item ? 'active' : '';
                    };
                }
            };
        }]);
    angular.module('pp.main').directive('loanNav', [function () {
            return {
                restrict: 'E',
                scope: { active: '@active' },
                templateUrl: 'borrower/loans/loan-nav.html',
                link: function ($scope, $element, $attr, $form) {
                    $scope.activeClass = function (item) {
                        return $scope.active == item ? 'active' : '';
                    };
                }
            };
        }]);
    angular.module('templates.admin', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('admin/invite-primary-user.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Invoices to Authorise"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <form ng-submit="invitePrimaryUser()">\n\n            <div class="form-group row padding-y-lg">\n                <div class="col-md-10 col-md-offset-1\n                padding-y-lg font-size-ml text-spaced-sm font-weight-bold text-color-ppNavyBlue">\n                <h1>Setup Invitation for the Primary user for [Accountancy P 1]</h1>\n                </div>\n            </div>\n\n\n            <div class="form-group row">\n                <div class="col-md-6">\n                    <label for="company-name"\n                    class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right font-weight-bold">\n                    User\'s First Name\n                    </label>\n                    <div class="col-md-6">\n                        <input type="text"\n                        id="company-name"\n                        name="company-name"\n                        placeholder="Company Name"\n                        class="form-control"\n                        ng-model="vm.client.clientName"\n                        disabled>\n                    </div>\n                </div>\n                <div class="col-md-6">\n                    <label for="company-name"\n                    class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right font-weight-bold">\n                    User\'s Lastname Name\n                    </label>\n                    <div class="col-md-6">\n                        <input type="text"\n                        id="company-name"\n                        name="company-name"\n                        placeholder="Company Name"\n                        class="form-control"\n                        ng-model="vm.client.clientName"\n                        disabled>\n                    </div>\n                </div>\n            </div>\n            <div class="form-group row">\n                <label for="company-name"\n                class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right font-weight-bold">\n                Email Address of new User\n                </label>\n                <div class="col-md-6">\n                    <input type="text"\n                    id="company-name"\n                    name="company-name"\n                    placeholder="Company Name"\n                    class="form-control"\n                    ng-model="vm.client.clientName"\n                    disabled>\n                </div>\n            </div>\n\n            <p class="font-weight-bold">The role for this primary user has not been set to Administator</p>\n\n            <div class="form-group row margin-top-md">\n                <div class="col-md-offset-4 col-md-6">\n                    <button type="button"\n                            class="btn btn-link btn-block btn-sm text-color-grey"\n                            ng-click="reportProblem()"\n                            ng-disabled="true">\n                        Cancel\n                    </button>\n                    <button class="btn btn-primary btn-block" type="submit" >\n                        Send Invitiation to User\n                    </button>\n                </div>\n            </div>\n\n        </form>\n    </div>\n</div>');
            $templateCache.put('admin/clients/authorize.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Authorise Client"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="row margin-bottom-md border-bottom-light">\n                    <div class="col-md-6 col-sm-3">\n                        <h2>Client Details</h2>\n                    </div>\n                    <div class="col-md-6 col-sm-9">\n                        <div class="text-align-right">\n                            <button ng-disabled="vm.clientToAuthorize.clientData.clientAuthorized" class="btn btn-info margin-bottom-xs" ng-click="authorizeClient($event)">Authorise Client</button>\n                            <button ng-disabled="vm.clientToAuthorize.clientData.clientAuthorized" class="btn btn-info margin-bottom-xs" ng-click="rejectClient($event)">Reject Client</button>\n                        </div>\n                    </div>\n                </div>\n                <div class="alert alert-success margin-bottom-sm" role="alert" ng-show="vm.clientToAuthorize.clientData.clientAuthorized">\n                    <p class="text-align-left capitalise">This client has been authorised.</p>\n                </div>\n                <display-authorize-client client-to-authorize="clientToAuthorize"></display-authorize-client>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/clients/details.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Client Details"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <form ng-submit="clientDetailsForm.$valid && saveClientDetails(clientDetailsForm)" name="clientDetailsForm" novalidate>\n\n            <client-details ng-form="clientDetailsForm"\n                            client="vm.clientToAuthorize"\n                            read-only="true">\n            </client-details>\n\n            <div class="row">\n                <div class="col-md-12">\n                    <div class="text-align-right">\n                        <button class="btn btn-info" ng-click="goBack()">Close</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>');
            $templateCache.put('admin/clients/list.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="All Clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="!vm.index">No clients to display</p>\n                <div class="table-responsive" ng-show="vm.index">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr>\n                                <td class="capitalise">Company Number</td>\n                                <td class="capitalise">Client Name</td>\n                                <td class="capitalise">Client Type</td>\n                                <td class="capitalise">Current Status</td>\n                                <td class="capitalise">Date Registered</td>\n                                <td class="capitalise">Registered By</td>\n                                <td></td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in vm.filteredIndex">\n                                <td>{{client.clientNumber}}</td>\n                                <td>{{client.clientDesc}}</td>\n                                <td>{{client.clientType}}</td>\n                                <td>{{client | clientStatusDisplay}}</td>\n                                <td>{{client.createDate | date:\'dd MMM yyyy\'}}</td>\n                                <td>{{client.invitingClient.clientDesc}}</td>\n                                <td>\n                                    <button class="btn btn-info" ng-click="viewClientDetails(client.uid)" ng-if="(client | clientStatus) != \'awaiting\'">View Details</button>\n\n                                    <button class="btn btn-info" ng-click="viewClientAuthorize(client.uid)" ng-if="(client | clientStatus) == \'awaiting\'">Authorise</button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/clients/pending-list.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="New Clients to authorise"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="!vm.pendingClients">No clients available to authorise</p>\n                <div class="table-responsive" ng-show="vm.pendingClients">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr>\n                                <td class="capitalise">Company Number</td>\n                                <td class="capitalise">Client Name</td>\n                                <td class="capitalise">Client Type</td>\n                                <td class="capitalise">Primary Contact</td>\n                                <td class="capitalise">Requested On</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="pendingClient in vm.pendingClients"\n                                ng-show="pendingClient.clientStatus != \'suspended\'\n                                        &&\n                                        !pendingClient.clientData.clientAuthorized"\n                                ng-click="viewClientAuthorize(pendingClient.uid)"\n                            >\n                                <td>{{pendingClient.clientNumber}}</td>\n                                <td>{{pendingClient.clientDesc}}</td>\n                                <td>{{pendingClient.clientType}}</td>\n                                <td>{{pendingClient.primaryUser.firstName + \' \' + pendingClient.primaryUser.lastName}}</td>\n                                <td>{{pendingClient.createDate | date:\'dd MMM yyyy\'}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/index/landing.html', '<section class="margin-top-lg height-full bg-login-home bg-size-cover bg-repeat-none bg-center position-relative text-align-center">\n    <div class="half-width margin-auto">\n        <h1 class="text-color-primary BrandonText-Thin text-ucfirst">{{manager}} Admin</h1>\n\n        <img class="img-responsive max-width-250" ng-src="/img/manager/{{manager}}"/>\n\n        <!-- login form -->\n        <div class="text-center padding-top-xl">\n            <h2 class="text-color-primary BrandonText-Regular margin-bottom-sm">Login</h2>\n            <form name="loginForm" ng-submit="loginForm.$valid && login()" novalidate>\n                <div class="full-width">\n                        <!-- username -->\n                        <fieldset class="form-group half-width margin-auto"\n                                  ng-class="{ \'has-error\' : loginForm.username.$invalid && loginForm.$submitted }">\n                            <input type="text"\n                                   ng-model="credentials.username"\n                                   name="username"\n                                   class="form-control"\n                                   id="loginEmail"\n                                   placeholder="Username"\n                                   required>\n\n                            <div ng-messages="loginForm.username.$error"\n                                 ng-if="loginForm.username.$invalid && loginForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">You must enter a username</div>\n                            </div>\n                        </fieldset>\n\n                        <!-- password -->\n                        <fieldset class="form-group half-width margin-auto"\n                                  ng-class="{ \'has-error\' : loginForm.password.$invalid && loginForm.$submitted }">\n                            <input type="password"\n                                   ng-model="credentials.password"\n                                   name="password"\n                                   class="form-control margin-top-sm"\n                                   id="loginPassword"\n                                   placeholder="Password"\n                                   required\n                                   minlength="5">\n\n                            <div ng-messages="loginForm.password.$error"\n                                 ng-if="loginForm.username.$invalid && loginForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">You must enter a password</div>\n                                <div ng-message="minlength">Your password must be longer than 5 characters</div>\n                            </div>\n                        </fieldset>\n                        <button class="btn btn-primary half-width margin-top-sm" type="submit">Login</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</section>\n');
            $templateCache.put('admin/invoices/authorize.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Authorise Invoice"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="row margin-bottom-md border-bottom-light">\n                    <div class="col-md-6 col-sm-3">\n                        <h2>Invoice Details</h2>\n                    </div>\n                    <div class="col-md-6 col-sm-9">\n                        <div class="text-align-right">\n                            <a href="#" class="btn btn-info margin-bottom-xs" ng-click="authorizeInvoice($event)">Authorise Invoice</a>\n                            <a href="#" class="btn btn-info margin-bottom-xs" ng-click="rejectInvoice($event)">Reject Invoice</a>\n                            <button class="btn btn-info margin-bottom-xs" ng-disabled="true">Refer Invoice</button>\n                        </div>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-4 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Invoice Number</dt>\n                            <dd>{{invoiceDetails.invoiceLabel}}</dd>\n                            <dt>Invoice Net Value</dt>\n                            <dd>{{invoiceDetails.invoiceNetValue | customCurrency}}</dd>\n                            <dt>Currency</dt>\n                            <dd>{{invoiceDetails.invoiceCurrency}}</dd>\n                        </dl>\n                    </div>\n                    <div class="col-md-4 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Due Date</dt>\n                            <dd>{{invoiceDetails.dueDate | date:\'dd MMM yyyy\'}}</dd>\n                            <dt>Loan Amount</dt>\n                            <dd>{{invoiceDetails.loanAmount | customCurrency}}</dd>\n                            <dt>Estimated Fees</dt>\n                            <dd>{{invoiceDetails.feesAmount | feesCurrency}}</dd>\n                        </dl>\n                    </div>\n                    <div class="col-md-4 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Invoice Created</dt>\n                            <dd>{{invoiceDetails.invoiceCreatedDate | date:\'dd MMM yyyy\'}}</dd>\n                            <dt>Submitted on</dt>\n                            <dd>{{invoiceDetails.submittedOn | date:\'dd MMM yyyy\'}}</dd>\n                            <dt>Payment Reference</dt>\n                            <dd>{{invoiceDetails.paymentReference}}</dd>\n                        </dl>\n                    </div>\n                </div>\n\n                <div class="row">\n                    <div class="col-md-12">\n                        <risk-level level="invoiceDetails.riskLevel"></risk-level>\n                    </div>\n                </div>\n\n                <div class="row margin-top-md" ng-show="showPayerHistory">\n                    <div class="col-md-12 margin-bottom-sm">\n                        <div class="bg-dark-grey">\n                            <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                <div class="row">\n                                    <p class="font-weight-bold col-md-12">Payer History</p>\n                                </div>\n                            </div>\n                            <div class="row padding-left-sm padding-right-sm">\n                                <div class="col-md-12">\n                                    <div class="table-responsive">\n                                        <table class="table table-striped table-bordered table-hover table-condensed">\n                                            <tr class="italic font-weight-bold">\n                                                <td>Current</td>\n                                                <td>{{invoiceDetails.payer.clientDesc}}</td>\n                                                <td>All</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Average Payment Days</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.averagePaymentDays}}</td>\n                                                <td>{{invoiceDetails.payerHistory.allValues.averagePaymentDays}}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Current number Payments Oustanding</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.numberPaymentsOutstanding}}</td><td>{{invoiceDetails.payerHistory.allValues.numberPaymentsOutstanding}}</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="italic font-weight-bold">Historic</td>\n                                                <td></td>\n                                                <td></td>\n                                            </tr>\n                                            <tr>\n                                                <td>Total Invoices paid</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.totalInvoicesPaid}}</td>\n                                                <td>{{invoiceDetails.payerHistory.allValues.totalInvoicesPaid}}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Invoices Paid on time</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.countInvoicesPaidOnTime}}</td>\n                                                <td>{{invoiceDetails.payerHistory.allValues.countInvoicesPaidOnTime}}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Invoices Paid late</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.countInvoicesPaidLate}}</td>\n                                                <td>{{invoiceDetails.payerHistory.allValues.countInvoicesPaidLate}}</td>\n                                            </tr>\n                                            <tr>\n                                                <td>Average Paid late days</td>\n                                                <td>{{invoiceDetails.payerHistory.clientValues.averagePaidLateDays\u2028}}</td>\n                                                <td>{{invoiceDetails.payerHistory.allValues.averagePaidLateDays\u2028}}</td>\n                                            </tr>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="text-align-right">\n                                <a href="#" ng-click="closePayerHistory()" class="btn btn-info">Close</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div ng-show="!showPayerHistory">\n                    <div class="row margin-top-md">\n                        <div class="col-md-6 margin-bottom-sm">\n                            <div class="bg-dark-grey">\n                                <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                    <div class="row" ng-show="!showBorrowerHistory">\n                                        <p class="font-weight-bold col-md-6">Borrower</p>\n                                    </div>\n                                    <div class="row" ng-show="showBorrowerHistory">\n                                        <p class="font-weight-bold col-md-6">Borrower History</p>\n                                        <div class="col-md-6 text-xs-right">\n                                            <p>{{invoiceDetails.client.clientDesc}}</p>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class="padding-x-sm padding-y-sm">\n                                    <div ng-show="!showBorrowerHistory">\n                                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                            <dt>Company Name</dt>\n                                            <dd>{{invoiceDetails.client.clientDesc}}</dd>\n                                            <dt>Company Number</dt>\n                                            <dd>{{invoiceDetails.client.clientNumber}}</dd>\n                                            <dt>Address</dt>\n                                            <dd>{{invoiceDetails.client.clientData.address.addressLine1}}</dd>\n                                            <dt>Town</dt>\n                                            <dd>{{invoiceDetails.client.clientData.address.town}}</dd>\n                                            <dt>County</dt>\n                                            <dd>{{invoiceDetails.client.clientData.address.county}}</dd>\n                                            <dt>Post Code</dt>\n                                            <dd>{{invoiceDetails.client.clientData.address.postCode}}</dd>\n                                            <dt>Country</dt>\n                                            <dd>{{invoiceDetails.client.clientData.address.country}}</dd>\n                                        </dl>\n                                        <div class="text-align-right">\n                                            <a href="#" class="btn btn-info" ng-click="openBorrowerHistory()">View Borrower Details</a>\n                                        </div>\n                                    </div>\n                                    <div ng-show="showBorrowerHistory">\n                                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                            <dt>Borrow Limit</dt>\n                                            <dd>{{creditCheck.borrowLimit | customCurrency}}</dd>\n                                            <dt>Borrower Risk Level</dt>\n                                            <dd>{{creditCheck.borrowerRiskLevel}}</dd>\n                                            <dt>Available to borrow</dt>\n                                            <dd>{{creditCheck.availableBorrowLimit | customCurrency}}</dd>\n                                        </dl>\n                                        <!-- <p class="font-weight-bold"></p>\n                                        <div class="table-responsive">\n                                            <table class="table table-striped table-bordered table-hover table-condensed">\n                                                <tr>\n                                                    <td>Due < 30 days</td>\n                                                    <td>Due 30-60 days</td>\n                                                    <td>Due 61-90 days</td>\n                                                    <td>Due > 90 days</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>0</td>\n                                                    <td>0</td>\n                                                    <td>0</td>\n                                                    <td>0</td>\n                                                </tr>\n                                            </table>\n                                        </div> -->\n                                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n\n                                            <dt>Number of active invoices</dt>\n                                            <dd>{{invoiceDetails.loanSummary.activeInvoiceCount}}</dd>\n                                            <dt>Number of overdue invoices</dt>\n                                            <dd>{{invoiceDetails.loanSummary.overdueCount}}</dd>\n                                            <dt>Unpaid Charges</dt>\n                                            <dd>0</dd>\n                                        </dl>\n                                        <div class="text-align-right">\n                                            <a href="#" ng-show="showBorrowerHistory" ng-click="closeBorrowerHistory()" class="btn btn-info">Close</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="col-md-6 margin-bottom-sm">\n                            <div class="bg-dark-grey">\n                                <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                    <div class="row" ng-show="!showPayerHistory">\n                                        <p class="font-weight-bold col-md-6">Payer</p>\n                                        <div class="col-md-6 text-align-right">\n                                            <a href="#" class="btn btn-info" ng-click="openPayerHistory()">View Payer Details</a>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="padding-x-sm padding-y-sm">\n                                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                        <dt>Payer Name</dt>\n                                        <dd>{{invoiceDetails.payer.clientDesc}}</dd>\n                                        <dt>Company Number</dt>\n                                        <dd>{{invoiceDetails.payerCompanyNumber}}</dd>\n                                        <div ng-if="invoiceDetails.invoiceData.contactAddress.addressLine1 != \'\'">\n                                            <dt>Address</dt>\n                                            <dd>{{invoiceDetails.invoiceData.contactAddress.addressLine1}}</dd>\n                                            <dt>Town</dt>\n                                            <dd>{{invoiceDetails.invoiceData.contactAddress.town}}</dd>\n                                            <dt>County</dt>\n                                            <dd>{{invoiceDetails.invoiceData.contactAddress.county}}</dd>\n                                            <dt>Post Code</dt>\n                                            <dd>{{invoiceDetails.invoiceData.contactAddress.postCode}}</dd>\n                                            <dt>Country</dt>\n                                            <dd>{{invoiceDetails.invoiceData.contactAddress.country}}</dd>\n                                        </div>\n                                        <div ng-if="invoiceDetails.invoiceData.contactAddress.addressLine1 == \'\'">\n                                            <dt>Address</dt>\n                                            <dd>{{invoiceDetails.payer.clientData.address.addressLine1}}</dd>\n                                            <dt>Town</dt>\n                                            <dd>{{invoiceDetails.payer.clientData.address.town}}</dd>\n                                            <dt>County</dt>\n                                            <dd>{{invoiceDetails.payer.clientData.address.county}}</dd>\n                                            <dt>Post Code</dt>\n                                            <dd>{{invoiceDetails.payer.clientData.address.postCode}}</dd>\n                                            <dt>Country</dt>\n                                            <dd>{{invoiceDetails.payer.clientData.address.country}}</dd>\n                                        </div>\n                                    </dl>\n                                    <p class="text-color-green capitalise">This customer is already known to PeerPay</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="col-md-6 margin-bottom-sm">\n                            <div class="bg-dark-grey">\n                                <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                    <div class="row">\n                                        <p class="font-weight-bold col-md-12">Evidence</p>\n                                    </div>\n                                </div>\n\n                                <div class="padding-x-sm padding-y-sm">\n                                    <div>\n                                        <azure-download container="invoice-evidence"\n                                                clientName="{{invoiceDetails.client.clientName}}"\n                                                label="Download file">\n                                        </azure-download>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="col-md-6 margin-bottom-sm">\n                            <div class="bg-dark-grey">\n                                <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                    <div class="row" ng-show="!showLenderDetails">\n                                        <div class="col-md-3">\n                                            <p class="font-weight-bold">Lenders</p>\n                                        </div>\n                                        <div class="col-md-9 text-align-right">\n                                            <a href="#" ng-click="openLenderDetails()" class="btn btn-info">View Lender Allocations</a>\n                                        </div>\n                                    </div>\n                                    <div class="row" ng-show="showLenderDetails">\n                                        <p class="font-weight-bold col-md-12">Lender Allocation</p>\n                                    </div>\n                                </div>\n\n                                <div class="padding-x-sm padding-y-sm">\n                                    <div ng-show="!showLenderDetails">\n                                        <p>{{invoiceDetails.lenderAllocations.length}} Lenders allocated to this invoice</p>\n                                    </div>\n                                    <div ng-show="showLenderDetails">\n                                        <div class="table-responsive">\n                                            <table class="table table-striped table-bordered table-hover table-condensed">\n                                                <thead>\n                                                    <tr>\n                                                        <td class="capitalise">Client Name</td>\n                                                        <td class="capitalise">Investment</td>\n                                                        <td class="capitalise">Estimated Return</td>\n                                                    </tr>\n                                                </thead>\n                                                <tr ng-repeat="allocation in invoiceDetails.lenderAllocations">\n                                                    <td>{{allocation.clientName}}</td>\n                                                    <td>{{allocation.investment | customCurrency}}</td>\n                                                    <td>{{allocation.estimatedReturn | customCurrency}}</td>\n                                                </tr>\n                                            </table>\n                                        </div>\n                                        <a href="#" ng-show="showLenderDetails" ng-click="closeLenderDetails()" class="btn btn-info">Close</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/invoices/invoices-allocated.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Invoices to Authorise"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="vm.invoicesAllocated == 0">No invoices available to authorise</p>\n                <div class="table-responsive">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="font-weight-bold capitalise">\n                                <td>Client Name</td>\n                                <td>Invoice Number</td>\n                                <td>Loan Amount</td>\n                                <td>Invoice Net Value</td>\n                                <td>Risk Level</td>\n                                <td>Due Date</td>\n                                <td>Submitted On</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.invoicesAllocated"\n                                ng-click="viewInvoice(invoice.invoiceNumber)"\n                            >\n                                <td>{{invoice.client.clientDesc}}</td>\n                                <td>{{invoice.invoiceLabel}}</td>\n                                <td>{{invoice.loanAmount | customCurrency}}</td>\n                                <td>{{invoice.invoiceNetValue | customCurrency}}</td>\n                                <td>{{invoice.riskLevel}}</td>\n                                <td>{{invoice.dueDate | date:\'dd MMM yyyy\'}}</td>\n                                <td>{{invoice.submittedOn | date:\'dd MMM yyyy\'}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/invoices/risk-level.html', '<div class="alert alert-{{riskClass}} alert--unstuck" role="alert">\n    <p class="text-align-right capitalise">This invoice is {{level}} Risk <span class="text-color-grey">Change Risk Level</span></p>\n</div>');
            $templateCache.put('admin/loans/list.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Loan Payments Awaiting Approval"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="!vm.loansPending">No loans to display</p>\n                <div class="table-responsive">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="font-weight-bold capitalise">\n                                <td>Client Name</td>\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer Reference</td>\n                                <td>Loan Amount</td>\n                                <td class="hidden-sm-down">Loan Accepted On</td>\n                                <td class="hidden-sm-down">Invoice Copy Received</td>\n                                <td>&nbsp;</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.loansPending track by invoice.id" ng-if="invoice.invoiceStatus != \'loan_cancelled\' && invoice.invoiceStatus != \'payment_pending\'">\n                                <td>{{invoice.client.clientDesc}}</td>\n                                <td>{{invoice.invoiceLabel}}</td>\n                                <td class="hidden-sm-down">{{invoice.customerReference}}</td>\n                                <td>{{invoice.loanAmount | customCurrency}}</td>\n                                <td class="hidden-sm-down">{{invoice.confirmedOn | date:\'dd MMM yyyy\'}}</td>\n                                <td class="hidden-sm-down">{{invoice.invoiceData.payerUrl | hasPayerurl}}</td>\n                                <td>\n                                    <button class="btn margin-bottom-sm" ng-if="invoice.invoiceData.payerUrl" ng-click="viewLoanAttachment(invoice, $event)">View</button>\n                                    <button class="btn" ng-if="invoice.viewedPayerAttachment" ng-click="confirmLoan(invoice, $event)">Confirm/Reject</button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/system/log-entry.html', '{{entry}}\n\n<stack-trace stack-frames="stackFrames"></stack-trace>\n');
            $templateCache.put('admin/system/log.html', '<header-buttons host="Log" title="View Log" client-type="provider"></header-buttons>\n\n<div class="row padding-y-lg">\n    <div class="col-md-8 col-md-offset-2">\n        <div class="border-light">\n\n            <fieldset class="form-group row">\n                <label for="channel" class="col-md-3 form-control-label">Select a channel</label>\n                <div class="col-md-9">\n                    <div class="col-md-4 ">\n                        <select id="{{field.name}}"\n                                name="{{field.name}}"\n                                class="form-control"\n                                ng-model="sort"\n                                ng-options="o for o in channels"\n                                ng-change="setSort(o)"\n                                required>\n                        </select>\n                    </div>\n                </div>\n            </fieldset>\n\n\n            <div ng-repeat="entry in vm.index | filter: { channel: sortBy } | orderBy:\'-createDate\'">\n                <log-entry entry="entry"></log-entry>\n            </div>\n\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/system/stack-trace.html', '<table class="table table-striped table-bordered table-hover table-condensed">\n    <thead>\n    <tr class="font-weight-bold capitalise">\n        <td>Line number</td>\n        <td>Function</td>\n        <td>Filename</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr ng-repeat="frame in stackFrames">\n        <td>{{frame.line}}</td>\n        <td>{{frame.function}}</td>\n        <td>{{frame.file}}</td>\n    </tr>\n    </tbody>\n</table>');
            $templateCache.put('admin/system/system.html', '<header-buttons host="System" title="System control" client-type="provider"></header-buttons>\n\n\n\n<div class="row padding-y-lg">\n    <div class="col-md-8 col-md-offset-2">\n        <div class="border-light">\n\n            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">\n                Version: {{vm.version.version}}\n            </p>\n\n            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">\n                Mode: {{vm.version.mode}}\n            </p>\n\n            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">\n                Environment: {{vm.version.env}}\n            </p>\n\n            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">\n                Servertime: {{vm.servertime.time}}\n            </p>\n\n            <p class="border-bottom-light padding-top-sm padding-left-sm font-weight-bold">\n                Your credit Limit: {{vm.creditLimit.maxCredit}}\n            </p>\n\n        </div>\n    </div>\n</div>\n\n<div class="row">\n    <div class="col-md-8 col-md-offset-2">\n        <div class="jumbotron">\n            <h3 class="text-danger padding-bottom-lg">Danger Zone!</h3>\n\n            <p>With great power comes great responsibility</p>\n\n            <button class="btn btn-danger" ng-click="refreshDatabase($event)">Refresh DB (will log you out)</button>\n        </div>\n    </div>\n</div>\n\n\n');
            $templateCache.put('admin/summary/main.html', '<header-buttons client-type="provider" title="Summary"></header-buttons>\n<div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n    <div class="row margin-top-sm">\n        <div class="col-md-6 col-sm-6 col-xs-12">\n            <div class="border-light bg-light-gray">\n                <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Attention Needed</p>\n                <div class="padding-left-sm padding-right-sm">\n                    <ul>\n                        <li>There are <a href="{{ vm.summary.invoicesAllocated.value != 0 ? \'/invoices/list/allocated\' : \'#\' }}">{{ vm.summary.invoicesAllocated.value }}</a> invoices waiting to be authorised.</li>\n                        <li>There are <a href="{{ vm.summary.clientsToAuthorize.value != 0 ? \'/clients/list/authorize\' : \'#\' }}">{{ vm.summary.clientsToAuthorize.value }}</a> new clients waiting to be authorised.</li>\n                        <li>There are currently <a href="{{ vm.summary.invoicesOverdue.value != 0 ? \'/loans/list/overdue\' : \'#\' }}">{{ vm.summary.invoicesOverdue.value }}</a> overdue invoices.</li>\n\n                        <li>We have <a href="#">{{banking.paymentSummary.totalUnmatched}}</a> payment that cannot be matched.</li>\n                        <li>We have NOT received <a href="#">{{banking.paymentSummary.depositsExpected}}</a> lender deposit payments that are expected</li>\n                        <li>We have received <a href="#">{{banking.paymentSummary.invoicesPartPaid}}</a> invoice payments less than required amount</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-6 col-sm-6 col-xs-12">\n            <div class="padding-md border-light bg-light-gray">\n                <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Invoices and Loans in Progress: By Status</p>\n                <div class="padding-left-sm padding-right-sm">\n                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                        <dt>Submitted</dt>\n                        <dd>{{ vm.summary.invoicesSubmitted.value }}</dd>\n                        <dt>Waiting to be Authorised</dt>\n                        <dd>{{ vm.summary.invoicesAllocated.value }}</dd>\n                        <dt>Loan Offer Oustanding</dt>\n                        <dd>{{ vm.summary.invoicesAuthorized.value }}</dd>\n                        <dt>Offers Accepted</dt>\n                        <dd>{{ vm.summary.loansAccepted.value }}</dd>\n                        <dt>Loan Payment Made</dt>\n                        <dd>0</dd>\n                        <dt>Invoice Paid</dt>\n                        <dd>0</dd>\n                        <dt>Not Matched</dt>\n                        <dd>{{ vm.summary.loansCancelled.value }}</dd>\n                    </dl>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-3 col-sm-6 col-xs-12">\n                <div class="border-light">\n                    <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Invoices and Loans</p>\n                    <div class="padding-left-sm padding-right-sm">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Invoices in Progress</dt>\n                            <dd>{{ vm.summary.invoicesInProgress.value }}</dd>\n                            <dt>Pending Amount</dt>\n                            <dd>{{ vm.summary.bankingAmountPending.value | customCurrency }}</dd>\n                            <hr class="margin-y-xxs" />\n                            <dt>Active Loans</dt>\n                            <dd>{{ loans.vm.summary.loansActive.value }}</dd>\n                            <dt>Outstanding Amount</dt>\n                            <dd>{{ vm.summary.bankingAmountOutstanding.value | customCurrency }}</dd>\n\n                            <hr class="margin-y-xxs" />\n                            <dt>Invoices Overdue</dt>\n                            <dd class="text-color-red"><a href="/loans/list/overdue">{{ vm.summary.invoicesOverdue.value | customCurrency }}</a></dd>\n                            <dt>Amount Overdue</dt>\n                            <dd>{{ vm.summary.bankingAmountOverdue.value | customCurrency }}</dd>\n                        </dl>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-3 col-sm-6 col-xs-12 margin-bottom-sm">\n                <div class="border-light">\n                    <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Borrowers</p>\n                    <div class="padding-left-sm padding-right-sm">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Total Active</dt>\n                            <dd><a href="/clients/list/manage/borrower/active">{{ vm.summary.borrowersTotalActive.value }}</a></dd>\n                            <dt>With Invoices in Progress</dt>\n                            <dd>{{ vm.summary.borrowersWithInvoicesInProgress.value }}</dd>\n                            <dt>With Active Loans</dt>\n                            <dd>{{ vm.summary.borrowersWithActiveLoans.value }}</dd>\n                            <dt>With Overdue Invoices</dt>\n                            <dd class="text-color-red">{{ vm.summary.borrowersWithOverdueInvoices.value }}</dd>\n                            <div class="margin-top-xs">\n                                <dt>In Pre-Registration</dt>\n                                <dd>{{ vm.summary.borrowersInPreReg.value }}</dd>\n                                <dt>In Registration</dt>\n                                <dd>{{ vm.summary.borrowersRegInProgress.value }}</dd>\n                                <dt>Awaiting Authorisation</dt>\n                                <dd>{{ vm.summary.borrowersAwaitingAuthorisation.value }}</dd>\n                            </div>\n                        </dl>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-3 col-sm-4">\n                <div class="border-light">\n                    <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Lenders</p>\n                    <div class="padding-left-sm padding-right-sm">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Total Active</dt>\n                            <dd><a href="/clients/list/manage/lender/active">{{ vm.summary.lendersTotalActive.value }}</a></dd>\n                            <dt>With Active Investments</dt>\n                            <dd>0</dd>\n                            <dt>With Overrun Investments</dt>\n                            <dd>0</dd>\n                        </dl>\n\n                        <dl class="margin-y-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>In Pre-Registration</dt>\n                                <dd>{{ vm.summary.lendersInPreReg.value }}</dd>\n                                <dt>In Registration</dt>\n                                <dd>{{ vm.summary.lendersRegInProgress.value }}</dd>\n                                <dt>Awaiting Authorisation</dt>\n                                <dd>{{ vm.summary.lendersAwaitingAuthorisation.value }}</dd>\n                            </dl>\n                        </dl>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-3 col-sm-8">\n                <div class="border-light">\n                    <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Payments</p>\n                    <div class="padding-left-sm padding-right-sm">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt class="border-bottom-light">Currently</dt>\n                            <dl>\n                                <dt>Invoice payments expected</dt>\n                                <dd>{{banking.paymentSummary.invoicesExpected}}</dd>\n                                <dt>Deposit payments expected</dt>\n                                <dd>{{banking.paymentSummary.depositsExpected}}</dd>\n                                <dt>Overdue Invoice payments</dt>\n                                <dd>{{banking.paymentSummary.invoicesOverdue}}</dd>\n                                <dt>Overdue Deposit Payments</dt>\n                                <dd>{{banking.paymentSummary.depositsOverdue}}</dd>\n                            </dl>\n                            <dt class="border-bottom-light">In Last Day</dt>\n                            <dl>\n                                <dt>Received Payments</dt>\n                                <dd>{{banking.paymentSummary.paidOneDay}}</dd>\n                                <dt>Invoice Payments Received</dt>\n                                <dd>{{banking.paymentSummary.invoicePaidOneDay}}</dd>\n                                <dt>Deposit Payments Received</dt>\n                                <dd>{{banking.paymentSummary.depositPaidOneDay}}</dd>\n                                <dt>Payments not matched</dt>\n                                <dd>{{banking.paymentSummary.unmatchedOneDay}}</dd>\n                            </dl>\n                        </dl>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/clients/borrower/active.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="All Active Borrowers"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Current Status</td>\n                                <td>Date Registered</td>\n                                <td>Registered By</td>\n                                <td>Accountancy System</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in vm.activeClients">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientStatus}}\n                                </td>\n                                <td>\n                                    {{client.createDate}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{client.clientData.accountsSystem.label}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/clients/borrower/authorize.html', '\n\n                <div class="row">\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Client Name</dt>\n                            <dd>{{clientToAuthorize.clientDesc}}</dd>\n                            <dt>Company Number</dt>\n                            <dd>{{clientToAuthorize.clientNumber}}</dd>\n                            <dt>Client Type</dt>\n                            <dd>{{clientToAuthorize.clientType}}</dd>\n                            <dt>Date of Request</dt>\n                            <dd>{{clientToAuthorize.createDate}}</dd>\n                            <!-- <dt>Requested by</dt>\n                            <dd>{{clientToAuthorize.primaryUser.firstName + \' \' + clientToAuthorize.primaryUser.lastName}}</dd> -->\n                        </dl>\n                    </div>\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Address Line 1</dt>\n                            <dd>{{clientToAuthorize.clientData.address.addressLine1}}</dd>\n                            <dt>Address Line 2</dt>\n                            <dd>{{clientToAuthorize.clientData.address.addressLine2}}</dd>\n                            <dt>Town/City</dt>\n                            <dd>{{clientToAuthorize.clientData.address.town}}</dd>\n                            <dt>County</dt>\n                            <dd>{{clientToAuthorize.clientData.address.county}}</dd>\n                            <dt>Post Code</dt>\n                            <dd>{{clientToAuthorize.clientData.address.postCode}}</dd>\n                            <dt>Country</dt>\n                            <dd>{{clientToAuthorize.clientData.address.country}}</dd>\n                        </dl>\n                    </div>\n                </div>\n                <div class="row margin-top-md">\n                    <div class="col-md-6 margin-bottom-sm">\n                        <div class="bg-dark-grey">\n                            <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                <div class="row">\n                                    <p class="font-weight-bold col-md-6">Service Managers Risk Assessment</p>\n                                    <div class="col-md-6 text-xs-right">\n                                        <a href="#" ng-show="authorize.showRiskAssessment" ng-click="authorize.closeRiskAssessment()" class="btn btn-info">Close</a>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="padding-x-sm padding-y-sm">\n                                <div ng-show="!authorize.showRiskAssessment">\n                                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                        <dt>Risk Level set by Service Manager</dt>\n                                        <dd class="capitalised">Medium</dd>\n                                        <dt>Client Known by Service Manager</dt>\n                                        <dd>{{clientToAuthorize.clientData.managerAssessment.knownClientYears.label }}</dd>\n                                    </dl>\n                                    <a href="#" class="btn btn-info" ng-click="authorize.openRiskAssessment()">View Assessment</a>\n                                </div>\n                                <div ng-show="authorize.showRiskAssessment">\n                                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                        <div ng-repeat="manageAssess in authorize.borrowerForms.borrowerManagerAssessment">\n                                            <dt>{{ manageAssess.name | camelCaseToHuman }}</dt>\n                                            <dd>{{ clientToAuthorize.clientData.managerAssessment[manageAssess.name].label }}</dd>\n                                        </div>\n                                        <dt>Service Manager Risk Rating</dt>\n                                        <dd>{{clientToAuthorize.clientData.managerAssessment.borrowerRating | rating}}</dd>\n                                    </dl>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-6 margin-bottom-sm">\n                        <div class="bg-dark-grey">\n                            <div class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm padding-right-sm">\n                                <div class="row">\n                                    <p class="font-weight-bold col-md-6">Clients own Risk Profile</p>\n                                    <div class="col-md-6 text-xs-right">\n                                        <a href="#" ng-show="authorize.showRiskProfile" ng-click="authorize.closeRiskProfile()" class="btn btn-info">Close</a>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="padding-x-sm padding-y-sm">\n                                <div ng-show="!authorize.showRiskProfile">\n                                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                        <dt>Active Customers in last 12 months</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countActiveCustomers}}</dd>\n                                        <dt>Invoices sent in last 12 months</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countInvoices}}</dd>\n                                    </dl>\n                                    <a href="#" class="btn btn-info" ng-click="authorize.openRiskProfile()">View Risk Profile</a>\n                                </div>\n                                <div ng-show="authorize.showRiskProfile">\n                                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n\n                                        <div ng-repeat="selfAssess in authorize.borrowerForms.borrowerSelfAssessment">\n                                            <dt>{{ selfAssess.name | camelCaseToHuman }}</dt>\n                                            <dd>{{ clientToAuthorize.clientData.selfAssessment[selfAssess.name].label }}</dd>\n                                        </div>\n\n                                        <dt>Invoices sent in last 12 months</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countInvoices}}</dd>\n                                        <dt>Customers in last 12 months</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countActiveCustomers}}</dd>\n                                        <dt>Invoices overdue in last 12 months</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countInvoicesOverdueYearly}}</dd>\n                                        <dt>Customers with invoices due</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countCustomersOutstanding}}</dd>\n                                        <dt>Amount due</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.sumCustomersOutstanding | customCurrency}}</dd>\n                                        <dt>Customers with overdue invoices</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.countCustomersOverdue}}</dd>\n                                        <dt>Amount overdue</dt>\n                                        <dd>{{clientToAuthorize.clientData.riskAnalysis.sumInvoicesOverdue | customCurrency}}</dd>\n                                    </dl>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-6">\n                        <div class="bg-dark-grey">\n                            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold margin-bottom-sm">Additional Details</p>\n                            <div class="padding-x-sm padding-y-sm">\n                                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                    <dt>Main Contact name</dt>\n                                    <dd>{{clientToAuthorize.primaryUser.firstName + \' \' + clientToAuthorize.primaryUser.lastName}}</dd>\n                                    <dt>Accountancy System</dt>\n                                    <dd>{{clientToAuthorize.clientData.accountsSystem.label}}</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-6">\n                        <div class="bg-dark-grey">\n                            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Companies House Information</p>\n                            <div class="padding-x-sm padding-y-sm">\n                                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                    <dt>Company Type</dt>\n                                    <dd>{{clientToAuthorize.clientData.companyType}}</dd>\n                                    <dt>Company Accounts Status</dt>\n                                    <dd>{{clientToAuthorize.clientData.accountsOverdue == \'false\' ? \'Overdue\' : \'Up to date\'}}</dd>\n                                    <dt>Annual Return Status</dt>\n                                    <dd>{{clientToAuthorize.clientData.returnsOverdue == \'false\' ? \'Overdue\' : \'Up to date\'}}</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </div>\n                </div>');
            $templateCache.put('admin/clients/lender/active.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="All Active Lenders"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Current Status</td>\n                                <td>Date Registered</td>\n                                <td>Registered By</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in vm.activeClients">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientStatus}}\n                                </td>\n                                <td>\n                                    {{client.createDate}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('admin/clients/lender/authorize.html', '\n\n                <div class="row">\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Client Name</dt>\n                            <dd>{{clientToAuthorize.clientDesc}}</dd>\n                            <dt>{{clientToAuthorize.lenderType == \'individual\' ? \'National Insurance Number\' : \'Company Number\'}}</dt>\n                            <dd>{{clientToAuthorize.clientNumber}}</dd>\n                            <dt>Client Type</dt>\n                            <dd>{{clientToAuthorize.clientType}}</dd>\n                            <dt>Investor Type</dt>\n                            <dd>{{clientToAuthorize.lenderType}}</dd>\n                            <dt>Date of Request</dt>\n                            <!-- @TODO - Format Date -->\n                            <dd>{{clientToAuthorize.createDate | date:\'dd MMM yyyy\'}}</dd>\n                            <!-- <dt>Requested by</dt>\n                            <dd>{{clientToAuthorize.primaryUser.firstName + \' \' + clientToAuthorize.primaryUser.lastName}}</dd> -->\n                        </dl>\n                    </div>\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Address Line 1</dt>\n                            <dd>{{clientToAuthorize.clientData.address.addressLine1}}</dd>\n                            <dt>Address Line 2</dt>\n                            <dd>{{clientToAuthorize.clientData.address.addressLine2}}</dd>\n                            <dt>Town/City</dt>\n                            <dd>{{clientToAuthorize.clientData.address.town}}</dd>\n                            <dt>County</dt>\n                            <dd>{{clientToAuthorize.clientData.address.county}}</dd>\n                            <dt>Post Code</dt>\n                            <dd>{{clientToAuthorize.clientData.address.postCode}}</dd>\n                            <dt>Country</dt>\n                            <dd>{{clientToAuthorize.clientData.address.country}}</dd>\n                        </dl>\n                    </div>\n                </div>\n\n                <div class="row margin-top-md">\n                    <div class="col-md-6">\n                        <div class="bg-dark-grey">\n                            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Lender\'s Risk Profile</p>\n                            <div class="padding-x-sm padding-y-sm">\n                                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                    <dt>Amount of available funds</dt>\n                                    <dd>{{clientToAuthorize.clientData.lenderRiskProfile.availableFundsAmount | customCurrency}}</dd>\n                                    <dt>Funds to be deposited with PeerPay</dt>\n                                    <dd>{{clientToAuthorize.clientData.lenderRiskProfile.depositAmount | customCurrency}}</dd>\n                                    <div ng-show="clientToAuthorize.lenderType != \'individual\'">\n                                        <dt>Financial year end date</dt>\n                                        <dd>{{clientToAuthorize.clientData.lenderRiskProfile.financialYearEnd.day + \'/\' + clientToAuthorize.clientData.lenderRiskProfile.financialYearEnd.month}}</dd>\n                                    </div>\n                                    <dt>Proof of fund availability</dt>\n                                    <dd>\n                                        <azure-download container="funds-confirmation"\n                                                        clientName="{{clientToAuthorize.clientName}}"\n                                                        label="Download file">\n                                        </azure-download>\n                                    </dd>\n                                </dl>\n                            </div>\n                        </div>\n                        <div class="bg-dark-grey margin-top-sm">\n                            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Additional Details</p>\n                            <div class="padding-x-sm padding-y-sm">\n                                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                    <dt>Main Contact Name</dt>\n                                    <dd>{{clientToAuthorize.primaryUser.firstName + \' \' + clientToAuthorize.primaryUser.lastName}}</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-md-6">\n                        <div class="bg-dark-grey">\n                            <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Funding Preferences</p>\n                            <div class="padding-x-sm padding-y-sm">\n                                <div class="table-responsive">\n                                    <table class="table table-condensed borderless">\n                                        <tr class="font-weight-bold">\n                                            <td></td>\n                                            <td>Percentage</td>\n                                            <td>Amount</td>\n                                        </tr>\n                                        <tr>\n                                            <td><span class="capitalised">Low</span></td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.lendSpreadLowPercentage}}%</td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.lowRiskAmount | customCurrency}}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><span class="capitalised">Medium</span></td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.lendSpreadMediumPercentage}}%</td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.mediumRiskAmount | customCurrency}}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><span class="capitalised">High</span></td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.lendSpreadHighPercentage}}%</td>\n                                            <td>{{clientToAuthorize.clientData.lenderRiskProfile.highRiskAmount | customCurrency}}</td>\n                                        </tr>\n                                    </table>\n                                </div>\n                                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                                    <dt>Maximum lend period for <span class="capitalised">low</span></dt>\n                                    <dd>{{ clientToAuthorize.clientData.lenderRiskProfile.maxPeriodLowRisk.label }}</dd>\n                                    <dt>Maximum lend period for <span class="capitalised">medium</span></dt>\n                                    <dd>{{ clientToAuthorize.clientData.lenderRiskProfile.maxPeriodMediumRisk.label }}</dd>\n                                    <dt>Maximum lend period for <span class="capitalised">high</span></dt>\n                                    <dd>{{ clientToAuthorize.clientData.lenderRiskProfile.maxPeriodHighRisk.label }}</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n');
            $templateCache.put('admin/modals/clients/reject-client.html', '<div class="modal-header">\n    <button ng-click="cancelRejection($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Reject Client</h4>\n</div>\n<form name="rejectClientForm" ng-submit="rejectClientForm.$valid && completeRejection(rejectClientForm)" novalidate>\n    <div class="modal-body">\n\n        <p class="font-weight-bold">You now need to choose the reason you have rejected this borrower request</p>\n\n        <configurable-form ng-form="rejectClientForm"\n                           name="{{ \'clientReject\' +  clientToAuthorize.clientType.charAt(0).toUpperCase() + clientToAuthorize.clientType.substr(1) }}"\n                           model-root="clientToAuthorize.clientData.authorization">\n        </configurable-form>\n\n        <div class="form-group row margin-bottom-md">\n            <label for="additional-rejection-info"\n                   class="col-md-12 form-control-label text-spaced-xs font-weight-bold">Enter any additional information here</label>\n\n            <div class="col-md-12">\n                <textarea\n                   id="additionalRejectionInfo"\n                   name="additionalRejectionInfo"\n                   class="form-control "\n                   ng-model="clientToAuthorize.clientData.authorization.additionalRejectionInfo">\n                </textarea>\n            </div>\n        </div>\n\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelRejection($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Complete Rejection</button>\n    </div>\n</form>\n');
            $templateCache.put('admin/modals/invoices/authorize-invoice.html', '<div class="modal-header">\n    <button ng-click="cancelAuthorize($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Authorise Invoice</h4>\n</div>\n<form name="ppForm" ng-submit="ppForm.$valid && completeAuthorize(ppForm)" novalidate>\n    <div class="modal-body">\n        <p class="font-weight-bold">Confirm Invoice Acceptance</p>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelAuthorize($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Accept</button>\n    </div>\n</form>\n');
            $templateCache.put('admin/modals/invoices/refer-invoice.html', '<!-- TBC -->');
            $templateCache.put('admin/modals/invoices/reject-invoice.html', '<div class="modal-header">\n    <button ng-click="cancelRejection($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Reject Invoice</h4>\n</div>\n<form name="rejectInvoiceForm" ng-submit="rejectInvoiceForm.$valid && completeRejection(rejectInvoiceForm)" novalidate>\n    <div class="modal-body">\n\n        <p class="font-weight-bold">You now need to choose the reason you have rejected this invoice</p>\n\n        <configurable-form ng-form="rejectInvoiceForm"\n                           name="invoiceReject"\n                           model-root="invoiceDetails.invoiceData">\n        </configurable-form>\n\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelRejection($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Complete Rejection</button>\n    </div>\n</form>\n');
            $templateCache.put('admin/modals/loans/confirm-loan.html', '<div class="modal-header">\n    <button ng-click="cancelLoan($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Release Loan Payment</h4>\n</div>\n<form name="ppForm" ng-submit="ppForm.$valid && completeAuthorize(ppForm)" novalidate>\n    <div class="modal-body">\n        <p>Confirm or Decline release of loan payment for</p>\n        <p>Invoice: {{loan.invoiceLabel}}</p>\n        <p>{{loan.loanAmount | customCurrency}}</p>\n        <p>to</p>\n        <p>{{loan.clientDesc}}</p>\n        <!-- <p>Bank Account Number: {{accountInfo.accountNum}}</p>\n        <p>Bank Sort Code: {{accountInfo.sortCode}}</p> -->\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelLoan($event)">Cancel</button>\n        <button class="btn btn-primary" ng-click="rejectLoan()">Decline</button>\n        <button class="btn btn-primary" ng-click="approveLoan()">Confirm</button>\n    </div>\n</form>\n');
            $templateCache.put('admin/modals/clients/lender/authorize-client.html', '<div class="modal-header">\n    <button ng-click="cancelAuthorise($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Authorise Client</h4>\n</div>\n<form name="ppForm" ng-submit="ppForm.$valid && completeAuthorise(ppForm)" novalidate>\n    <div class="modal-body">\n        <p class="font-weight-bold">Now select a service transaction account to complete authorisation of this client.</p>\n\n        <fieldset class="form-group row"\n          ng-class="{ \'has-error\' : ppForm.$submitted && ppForm.serviceTransactionAccount.$invalid }">\n            <label for="serviceTransactionAccount" class="col-sm-4 control-label">Service Transaction Account</label>\n            <div class="col-sm-8">\n                <select id="serviceTransactionAccount" name="serviceTransactionAccount" class="form-control"\n                        ng-model="authOptions.serviceTransactionAccount"\n                        ng-options="o for o in accounts.accountList"\n                        ng-required="true">\n                </select>\n\n                <div ng-show="(ppForm.$submitted) && ppForm.serviceTransactionAccount.$invalid" class="text-color-danger">Service Transaction Account is required</div>\n\n                <div ng-messages="ppForm.serviceTransactionAccount.$error"\n                     ng-if="ppForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">Service Transaction Account is required</div>\n                </div>\n            </div>\n        </fieldset>\n\n\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelAuthorise($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Complete Authorise</button>\n    </div>\n</form>\n');
            $templateCache.put('admin/modals/clients/borrower/authorize-client.html', '<div class="modal-header">\n    <button ng-click="cancelAuthorise($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Authorise Client</h4>\n</div>\n<form name="ppForm" ng-submit="ppForm.$valid && completeAuthorise(ppForm)" novalidate>\n    <div class="modal-body">\n        <p class="font-weight-bold">Now enter a borrow limit and select a service transaction account to complete authorisation of this clients.</p>\n\n        <fieldset class="form-group row">\n            <label for="borrowerLimit" class="col-sm-4 control-label">Client\'s Borrow Limit</label>\n            <div class="col-sm-8">\n                <input type="text" readonly ng-model="authOptions.maxCredit" name="borrowerLimit" />\n            </div>\n        </fieldset>\n\n\n        <fieldset class="form-group row"\n          ng-class="{ \'has-error\' : ppForm.$submitted && ppForm.serviceTransactionAccount.$invalid }">\n            <label for="serviceTransactionAccount" class="col-sm-4 control-label">Service Transaction Account</label>\n            <div class="col-sm-8">\n                <select id="serviceTransactionAccount" name="serviceTransactionAccount" class="form-control"\n                        ng-model="authOptions.serviceTransactionAccount"\n                        ng-options="o for o in accounts.accountList"\n                        ng-required="true">\n                </select>\n\n                <div ng-show="(ppForm.$submitted) && ppForm.serviceTransactionAccount.$invalid" class="text-color-danger">Service Transaction Account is required</div>\n\n                <div ng-messages="ppForm.serviceTransactionAccount.$error"\n                     ng-if="ppForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">Service Transaction Account is required</div>\n                </div>\n            </div>\n        </fieldset>\n\n\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelAuthorise($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Complete Authorise</button>\n    </div>\n</form>\n');
        }
    ]);
    angular.module('templates.borrower', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('borrower/invoices/import-invoices.html', '<header-buttons host="Invoices" title="Import Invoices" client-type="borrower"></header-buttons>\n<div class="container">\n    <h4 class="split">We found the following active invoices in your accountancy system.</h4>\n    <p class="text-color-red" ng-show="!vm.import">No invoices available to display</p>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr>\n                    <td>&nbsp;</td>\n                    <td class="capitalise">Invoice</td>\n                    <td class="capitalise hidden-sm-down">Customer</td>\n                    <td class="capitalise">Invoice Net Value</td>\n                    <td class="capitalise hidden-sm-down">Total Tax</td>\n                    <td class="capitalise">Invoice Amount</td>\n                    <td class="capitalise">Due Date</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="i in vm.import | filterMultiObject:{\'invoiceStatus\': \'unqueued\'}">\n                    <td>\n                        <input type="checkbox" ng-model="vm.importQueue[i.invoiceNumber]">\n                    </td>\n                    <td>{{i.invoiceLabel}}</td>\n                    <td class="hidden-sm-down">{{i.invoiceData.contactName}}</td>\n                    <td>{{i.invoiceNetValue | customCurrency}}</td>\n                    <td class="hidden-sm-down">{{i.invoiceData.totalTax | customCurrency}}</td>\n                    <td>{{i.invoiceTotal | customCurrency}}</td>\n                    <td>{{i.dueDate.slice(0, 10) | date: \'dd MMM yyyy\'}}</td>\n                </tr>\n            </tbody>\n        </table>\n        <div class="text-align-right">\n            <button class="btn btn-primary" ng-click="importSelectedInvoices($event)">Import Selected Invoices</button>\n        </div>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/invoice-nav.html', '<div class="row">\n    <div class="col-md-12">\n        <ul class="nav nav-tabs nav-push">\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'all\')}" href="/invoices/list/all">All Invoices</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'offers\')}" href="/invoices/list/offers">Offers Waiting</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'pending\')}" href="/invoices/list/pending">Loan Payment Pending</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'not-matched\')}" href="/invoices/list/not-matched">Not Matched</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'withdrawn\')}" href="/invoices/list/withdrawn">Withdrawn</a>\n            </li>\n        </ul>\n    </div>\n</div>\n');
            $templateCache.put('borrower/invoices/invoice-queue.html', '<header-buttons host="Invoices" title="Invoices Queue" client-type="borrower"></header-buttons>\n<div class="container">\n    <div class="row">\n        <div class="col-md-6">\n            <h4 class="split">Choose an invoice from the queue to submit for borrowing</h4>\n        </div>\n        <div class="col-md-6 text-align-right" style="margin-top: 25px">\n            <span>Available to borrow</span>\n            <input class="input-boxed" type="text" ng-disabled="true" ng-model="availableBorrowLimit" borrow-limit />\n        </div>\n    </div>\n    <p class="text-color-red" ng-show="!vm.import">No invoices available to display</p>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr>\n                    <td class="capitalise">Invoice</td>\n                    <td class="capitalise">Net Value</td>\n                    <td class="capitalise hidden-sm-down">Customer</td>\n                    <td class="capitalise hidden-sm-down">Created</td>\n                    <td class="capitalise hidden-sm-down">Due</td>\n                    <td class="capitalise hidden-sm-down">Imported</td>\n                    <td>&nbsp;</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in vm.import" ng-if="invoice.invoiceStatus !== \'unqueued\' && invoice.invoiceStatus != \'submitted\'">\n                    <td class="inline-button">{{invoice.invoiceLabel}}</td>\n                    <td class="inline-button">{{invoice.invoiceNetValue | customCurrency}}</td>\n                    <td class="hidden-sm-down inline-button">{{invoice.invoiceData.contactName}}</td>\n                    <td class="hidden-sm-down inline-button">{{invoice.invoiceCreatedDate.slice(0, 10) | date : \'dd MMM yyyy\'}}</td>\n                    <td class="hidden-sm-down inline-button">{{invoice.dueDate.slice(0, 10) | date: \'dd MMM yyyy\'}}</td>\n                    <td class="hidden-sm-down inline-button">{{invoice.createDate.date.slice(0, 10) | date: \'dd MMM yyyy\'}} {{invoice.createDate.date.slice(10, 16)}}</td>\n                    <td class="text-align-right">\n                        <button class="btn btn-primary" ng-click="viewInvoice($event, invoice.invoiceNumber)">Submit</button>\n                        <button ng-click="removeInvoice($event, invoice)" class="btn btn-close">\n                            <span class="sr-only">Close</span>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/invoice-submit.html', '<header-buttons sub-title="Invoices" title="Submit Invoice" client-type="borrower"></header-buttons>\n<div class="container container--drop">\n    <form name="siForm" ng-submit="siForm.$valid && submitInvoice()" novalidate>\n        <div class="row">\n            <div class="col-md-10 col-md-offset-1">\n                <div class="row">\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dd class="text-align-left">Invoice Id</dd>\n                            <dd>{{vm.invoice.invoiceLabel}}</dd>\n                            <dd class="text-align-left">Invoice Total</dd>\n                            <dd>{{vm.invoice.invoiceNetValue | customCurrency}}</dd>\n                            <dd class="text-align-left">Max Loan for this invoice</dd>\n                            <dd>{{vm.creditCheck.borrowAmount | customCurrency}}</dd>\n                            <dd class="text-align-left">Invoice Created</dd>\n                            <dd>{{vm.invoice.invoiceCreatedDate.slice(0, 10) | date : \'dd MMM yyyy\'}}</dd>\n                            <dd class="text-align-left">Due Date</dd>\n                            <dd>{{vm.invoice.dueDate.slice(0, 10) | date : \'dd MMM yyyy\'}}</dd>\n                        </dl>\n                    </div>\n                    <div class="col-md-6 col-xs-12">\n                        <span class="glyphicon glyphicon-zoom-in"></span>\n                        <p ng-show="loadingAddress"><span class="fa fa-refresh icon-loading-animate"></span> Loading address details</p>\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right" ng-show="!loadingAddress">\n                            <dt>&nbsp;</dt>\n                            <dd>{{vm.invoice.invoiceData.contactName}}</dd>\n                            <dt>&nbsp;</dt>\n                            <dd>\n                                <span ng-show="vm.invoice.invoiceData.contactAddress.addressLine1 != \'\'">{{vm.invoice.invoiceData.contactAddress.addressLine1}}</span>\n                                <span ng-show="vm.invoice.invoiceData.contactAddress.addressLine1 == \'\'">No address to display</span>\n                            </dd>\n                            <dt>&nbsp;</dt>\n                            <dd>{{vm.invoice.invoiceData.contactAddress.addressLine2}}</dd>\n                            <dt>&nbsp;</dt>\n                            <dd>{{vm.invoice.invoiceData.contactAddress.town}}</dd>\n                            <dt>&nbsp;</dt>\n                            <dd>{{vm.invoice.invoiceData.contactAddress.county}}</dd>\n                            <dt>&nbsp;</dt>\n                            <dd>{{vm.invoice.invoiceData.contactAddress.postCode}}</dd>\n                        </dl>\n                    </div>\n\n                    <div class="col-md-12">\n                        <hr />\n                        <div class="form-group">\n                            <label for="companyNumber" class="form-control-label">Company Number</label>\n                            <input class="form-control"\n                                   id="companyNumber"\n                                   type="text"\n                                   name="customerCompanyNumber"\n                                   minlength="7"\n                                   ng-model="vm.customerCompanyNumber"\n                                   placeholder="Customer Company Number"\n                                   required />\n                            <div ng-messages="siForm.customerCompanyNumber.$error"\n                                ng-if="siForm.$submitted"\n                                class="text-color-danger"\n                                role="alert">\n                                <div ng-message="required">A company number is required.</div>\n                                <div ng-message="minlength">The company number must be at least 7 digits</div>\n                            </div>\n                        </div>\n\n                        <div class="form-group">\n                            <label for="invoice-evidence" class="form-control-label">You can attach your evidence files</label>\n                            <label class="file" for="invoice-evidence">\n                                <input azure-upload\n                                       limit="1"\n                                       mimetypes="pdf"\n                                       container="invoice-evidence"\n                                       input-name="invoiceEvidence"\n                                       save-on-upload="true"\n                                       ng-model="storage.registry.invoiceEvidence"\n                                       type="file"\n                                       id="invoice-evidence"\n                                       name="invoiceEvidence"\n                                       required>\n                                <span class="file-custom"></span>\n                            </label>\n                            <div class="padding-left-sm padding-top-md">\n                                <p ng-repeat="file in storage.registry.invoiceEvidence">\n                                    {{file.name}}\n                                    <span ng-click="deleteFile(file)" class="font-size-lg fa fa-times-circle-o"></span>\n                                </p>\n                            </div>\n                            <div ng-messages="siForm.invoiceEvidence.$error"\n                                 ng-if="siForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* File required </div>\n                            </div>\n                            <div ng-messages="siForm.invoiceEvidence.$error"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="mimetypes">* Only pdf files are allowed</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3 col-xs-12">\n                        <dl class="padding-top-sm">\n                            <dt>Your Borrow Limit</dt>\n                            <dd>{{vm.creditCheck.borrowLimit | customCurrency}}</dd>\n                        </dl>\n                        <p class="text-color-ppNavyBlue" ng-show="vm.creditCheck.availableBorrowLimit <= vm.creditCheck.borrowLimit">You are currently within your borrow limit</p>\n                    </div>\n                    <div class="col-md-3 col-xs-12">\n                        <dl class="padding-top-sm">\n                            <dt>Current Lend Total</dt>\n                            <dd>{{vm.creditCheck.currentLendTotal | customCurrency}}</dd>\n                        </dl>\n                        <dl class="padding-top-sm">\n                            <dt>Available to borrow</dt>\n                            <dd>{{vm.creditCheck.availableBorrowLimit | customCurrency}}</dd>\n                        </dl>\n                    </div>\n                    <div class="col-md-6 col-xs-12">\n                        <dl class="padding-top-sm">\n                            <dt>Lend Total with this invoice</dt>\n                            <dd>{{vm.creditCheck.newLendTotal | customCurrency}}</dd>\n                        </dl>\n                        <dl class="padding-top-sm">\n                            <dt>Fees will be between (estimated values if invoice is paid on due date)</dt>\n                            <dd>{{vm.creditCheck.lowFeeValue | customCurrency}} <span class="font-weight-bold">and</span> {{vm.creditCheck.highFeeValue | customCurrency}} </dd>\n                        </dl>\n                    </div>\n                </div>\n\n                <div class="row margin-top-sm">\n                    <div class="col-md-12">\n                        <div class="text-align-right">\n                            <a href="#" class="btn btn-secondary" ng-click="cancelSubmit($event)">Cancel</a>\n                            <button type="submit" class="btn btn-primary" ng-disabled="loadingAddress || loadingPayer">\n                                {{ buttonText || \'Submit Invoice\' }}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n\n    </form>\n</div>');
            $templateCache.put('borrower/invoices/list.html', '<header-buttons host="Invoices" title="In Progress" client-type="borrower"></header-buttons>\n<div class="container">\n    <invoice-nav active="all"></invoice-nav>\n\n    <div class="table-responsive margin-bottom-sm">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="capitalise font-weight-bold">\n                    <td>Status</td>\n                    <td>Invoice</td>\n                    <td class="hidden-sm-down">Payer</td>\n                    <td class="hidden-sm-down">Invoice Net Value</td>\n                    <td class="hidden-sm-down">Due Date</td>\n                    <td>Submitted</td>\n                    <td>Loan Amount</td>\n                    <td class="hidden-sm-down text-right">Estimated Fees</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in vm.index">\n                    <td>\n                        {{invoice.invoiceStatus}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.customerReference}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.dueDate.slice(0, 10) | date: \'dd MMM yyyy\'}}\n                    </td>\n                    <td>\n                        {{invoice.submittedOn}}\n                    </td>\n                    <td>\n                        {{invoice.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down text-right">\n                        {{invoice.feesAmount | feesCurrency}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/not-matched-list.html', '<header-buttons host="Invoices" title="Not Matched" client-type="borrower"></header-buttons>\n<div class="container">\n    <invoice-nav active="not-matched"></invoice-nav>\n    <div class="table-responsive margin-bottom-sm">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="capitalise font-weight-bold">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer Name</td>\n                    <td>Due Date</td>\n                    <td>Invoice Net Value</td>\n                    <td>Reason for Rejection</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in vm.invoicesRejected">\n                    <td>\n                        {{invoice.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.customerReference}}\n                    </td>\n                    <td>\n                        {{invoice.dueDate}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceData.rejectionReason}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/offers-list.html', '<header-buttons host="Invoices" title="View Offers" client-type="borrower"></header-buttons>\n\n<div class="container">\n    <invoice-nav active="offers"></invoice-nav>\n\n    <h5 class="dark">Active Offers</h5>\n\n    <div class="table-responsive margin-bottom-sm">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="capitalise font-weight-bold">\n                    <td>Invoice</td>\n                    <td class="hidden-sm-down">Payer</td>\n                    <td>Amount</td>\n                    <td>Due</td>\n                    <td>Offer</td>\n                    <td class="hidden-sm-down">Estimated</td>\n                    <td>Expires</td>\n                </tr>\n            <tbody>\n                <tr ng-repeat="offer in vm.loanOffers | filterMultiObject:{\'invoiceStatus\': \'approved\'}" ng-click="viewOffer($event, offer.invoiceNumber)">\n                    <td>\n                        {{offer.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{offer.customerReference}}\n                    </td>\n                    <td>\n                        {{offer.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td>\n                        {{offer.dueDate}}\n                    </td>\n                    <td>\n                        {{offer.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{offer.feesAmount | feesCurrency}}\n                    </td>\n                    <td>\n                        {{offer.expiresOnDate}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n    <h5 class="dull">Expired Offers</h5>\n\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="font-weight-bold capitalize">\n                    <td >Invoice</td>\n                    <td class=" hidden-sm-down">Customer</td>\n                    <td >Amount</td>\n                    <td class="hidden-sm-down">Due</td>\n                    <td class="hidden-sm-down">Offer</td>\n                    <td class="hidden-sm-down">Estimated</td>\n                    <td>Expired</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="expiredOffer in vm.loanOffers | filterMultiObject:{\'invoiceStatus\': \'offer_expired\'}">\n                    <td>\n                        {{expiredOffer.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{expiredOffer.customerReference}}\n                    </td>\n                    <td>\n                        {{expiredOffer.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td>\n                        {{expiredOffer.dueDate}}\n                    </td>\n                    <td>\n                        {{expiredOffer.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{expiredOffer.feesAmount | feesCurrency}}\n                    </td>\n                    <td>\n                        {{expiredOffer.expiresOnDate}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/pending-list.html', '<header-buttons host="Invoices" title="Payment Pending" client-type="borrower"></header-buttons>\n\n<div class="container">\n    <invoice-nav active="pending"></invoice-nav>\n    <div class="table-responsive margin-bottom-sm">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="capitalise font-weight-bold">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer Name</td>\n                    <td>Due Date</td>\n                    <td>Invoice Net Value</td>\n                    <td>Loan Amount</td>\n                    <td class="hidden-sm-down">Fees Estimate</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in vm.invoicesPendingPayment">\n                    <td>\n                        {{invoice.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.customerReference}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td>\n                        {{invoice.dueDate}}\n                    </td>\n                    <td>\n                        {{invoice.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.feesAmount | feesCurrency}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/withdrawn-list.html', '<header-buttons host="Invoices" title="Withdrawn" client-type="borrower"></header-buttons>\n<div class="container">\n    <invoice-nav active="withdrawn"></invoice-nav>\n    <div class="table-responsive margin-bottom-sm">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="capitalise font-weight-bold">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer Name</td>\n                    <td>Due Date</td>\n                    <td>Invoice Net Value</td>\n                    <td>Reason</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in vm.invoicesWithDrawn">\n                    <td>\n                        {{invoice.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{invoice.customerReference}}\n                    </td>\n                    <td>\n                        {{invoice.dueDate}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceNetValue | customCurrency}}\n                    </td>\n                    <td>\n                        {{invoice.invoiceStatus | withdrawnReason}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/loans/completed-list.html', '<header-buttons host="Loans" title="Completed" client-type="borrower"></header-buttons>\n\n<div class="container">\n    <loan-nav active="completed"></loan-nav>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="font-weight-bold capitalise">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer</td>\n                    <td class="hidden-sm-down">Loan Paid On</td>\n                    <td>Loan Amount</td>\n                    <td class="hidden-sm-down">Fees Amount</td>\n                    <td>Return Amount</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="loan in vm.loansCompleted">\n                    <td>\n                        {{loan.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.customerReference}}\n                    </td>\n                    <td class="hidden-sm-down">\n\n                    </td>\n                    <td>\n                        {{loan.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.feesAmount | feesCurrency}}\n                    </td>\n                    <td>\n\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/loans/list.html', '<header-buttons host="Loans" title="Active" client-type="borrower"></header-buttons>\n\n<div class="container">\n    <loan-nav active="active"></loan-nav>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="font-weight-bold capitalise">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer</td>\n                    <td class="hidden-sm-down">Loan Paid On</td>\n                    <td>Loan Amount</td>\n                    <td class="hidden-sm-down">Fees Amount</td>\n                    <td class="hidden-sm-down">Date Due</td>\n                    <td>Status</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="loan in vm.loansActive">\n                    <td>\n                        {{loan.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.customerReference}}\n                    </td>\n                    <td class="hidden-sm-down">\n\n                    </td>\n                    <td>\n                        {{loan.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.feesAmount | feesCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.dueDate}}\n                    </td>\n                    <td>\n                        {{loan.invoiceStatus}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/loans/loan-nav.html', '<div class="row">\n    <div class="col-md-12">\n        <ul class="nav nav-tabs nav-push">\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'active\')}" href="/loans/list/active">My Loans</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'completed\')}" href="/loans/list/completed">Completed Loans</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'overdue\')}" href="/loans/list/payments-overdue">Overdue Payments</a>\n            </li>\n        </ul>\n    </div>\n</div>\n');
            $templateCache.put('borrower/loans/overdue-payment-list.html', '<header-buttons host="Loans" title="Overdue Payments" client-type="borrower"></header-buttons>\n\n<div class="container">\n    <loan-nav active="overdue"></loan-nav>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="font-weight-bold capitalise">\n                    <td>Invoice Number</td>\n                    <td class="hidden-sm-down">Customer</td>\n                    <td class="hidden-sm-down">Loan Paid On</td>\n                    <td>Loan Amount</td>\n                    <td class="hidden-sm-down">Fees Amount</td>\n                    <td class="hidden-sm-down">Date Due</td>\n                    <td>Overdue By</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="loan in vm.loansActive | filterMultiObject:{\'overdue\': \'1\'}">\n                    <td>\n                        {{loan.invoiceLabel}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.customerReference}}\n                    </td>\n                    <td class="hidden-sm-down">\n\n                    </td>\n                    <td>\n                        {{loan.loanAmount | customCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.feesAmount | feesCurrency}}\n                    </td>\n                    <td class="hidden-sm-down">\n                        {{loan.dueDate}}\n                    </td>\n                    <td>\n\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>');
            $templateCache.put('borrower/invoices/modals/delete-invoice.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Are you sure you wish to remove this invoice?</h4>\n</div>\n<div class="modal-body">\n    <p>This invoice will not be deleted from your accounting system.</p>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n    <button class="btn btn-primary" ng-click="confirm($event)">Confirm</button>\n</div>\n');
            $templateCache.put('borrower/invoices/modals/import-confirm.html', '<div class="modal-header">\n    <!-- <button ng-click="cancelImport($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button> -->\n    <h4 class="modal-title">Import Summary</h4>\n    <p class="smaller">The following invoices have been added to the queue. If you wish to submit further invoices for borrowing against click here.</p>\n</div>\n<form name="ppForm" novalidate>\n    <div class="modal-body">\n        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n            <div ng-repeat="i in selected" class="striped-list">\n                <dt>{{i.invoiceLabel}}</dt>\n                <dd>{{i.invoiceNetValue | customCurrency}}</dd>\n            </div>\n        </dl>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelImport($event)">Go Later</button>\n        <button class="btn btn-primary" ng-click="confirmImport($event)">Go to Queue</button>\n    </div>\n</form>\n');
            $templateCache.put('borrower/invoices/modals/submit-invoice.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">PeerPay Submit Invoice</h4>\n</div>\n<div ng-if="!showComplete">\n    <form name="submitInvoiceForm" ng-submit="submitInvoiceForm.$valid && confirm($event, submitInvoiceForm)" novalidate>\n        <div class="modal-body">\n            <mc-messages></mc-messages>\n\n            <p> There is a summary of the Terms and Conditions on use of this service below that make it\n                easier to understand what you\'re agreeing to when you use PeerPay.\n                However, we still recommend that you read the entire Terms of Conditions on use of this service,\n                and our Privacy Policy, as such documents include additional terms that are not summarised\n                <a href="/terms" target="_blank">here</a>.</p>\n\n            <div class="textbox" id="terms" compile-html="content"></div>\n\n        </div>\n        <div class="modal-body">\n            <p>Please click accept to confirm that you have read and understood the Terms and Conditions of this service.</p>\n        </div>\n        <div class="modal-footer">\n            <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n            <button class="btn btn-primary" type="submit" ng-disabled="loadingPayer || loadingSubmission">\n                {{ buttonText || \'Accept &amp; Submit Invoice\' }}\n            </button>\n        </div>\n    </form>\n</div>\n<div ng-if="showComplete">\n    <div class="modal-body">\n        <p>Your Invoice {{invoiceLabel}} has been submitted for allocation to investors</p>\n\n        <p>The amount we will loan against this Invoice is {{banking.borrowAmount | customCurrency}}</p>\n        <p>The cost of the loan is estimated at {{banking.estimatedFee | feesCurrency}} (based on invoice being paid by due date)</p>\n\n        <p>If we find suitable investors your loan request will be passed on for final authorisation</p>\n        <p>We will inform you by email if we are not able to find suitable investors for you at this time and you will be able to submit your invoice again later.</p>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-primary" ng-disabled="loadingSubmission" ng-click="complete($event)">\n            {{ buttonText || \'Ok\' }}\n        </button>\n    </div>\n</div>');
            $templateCache.put('borrower/loans/modals/accept-offer.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">PeerPay Accept Loan Offer</h4>\n</div>\n<div ng-if="!showComplete">\n    <form name="submitInvoiceForm" ng-submit="submitInvoiceForm.$valid && confirm($event, submitInvoiceForm)" novalidate>\n        <div class="modal-body">\n            <div class="textbox" id="terms" compile-html="content"></div>\n        </div>\n        <div class="modal-body">\n            <p>Please click Accept Loan to confirm you have read and understood the rules of loan acceptance</p>\n            <hr />\n            <p>After you click Send Token we will send you a verification code that you will need to enter to complete acceptance of this loan. Please choose whether you want this sent to your email or your phone</p>\n        </div>\n        <!-- Todo - add radio buttons -->\n        <div class="row">\n            <div class="col-md-6">\n                <label class="checkbox-inline user-output font-weight-bold">\n                    <input id="messageTypeEmail"\n                           name="messageType"\n                           type="radio"\n                           ng-model="messageType.name"\n                           value="text"\n                           required>\n                    Send Code to my Email\n                </label>\n            </div>\n\n            <div class="col-md-6">\n                <label class="checkbox-inline user-output font-weight-bold">\n                    <input id="messageTypePhone"\n                           name="messageType"\n                           type="radio"\n                           ng-model="messageType.name"\n                           value="sms"\n                           required>\n                    Send Code to my Phone\n                </label>\n            </div>\n        </div>\n\n        <div class="modal-footer margin-top-sm">\n            <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n            <button class="btn btn-primary" ng-click="sendToken($event)">Send Token</button>\n        </div>\n    </form>\n</div>');
            $templateCache.put('borrower/loans/modals/decline-offer.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Decline Loan Offer</h4>\n</div>\n<form name="ppForm" ng-submit="ppForm.$valid && declineLoanOffer(ppForm)" novalidate>\n    <div class="modal-body">\n        <p class="font-weight-bold">Are you sure you want to decline this loan offer?</p>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Decline</button>\n    </div>\n</form>\n');
            $templateCache.put('borrower/loans/offers/invoice-offer-submit.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Invoices - Offers waiting" client-type="borrower"></header-buttons>\n    <form name="siForm" ng-submit="siForm.$valid && submitInvoice($event)" novalidate>\n        <div class="alert alert-danger margin-top-sm" role="alert" ng-if="offerDisabled">\n            <p class="text-align-right capitalise">This loan offer has now expired.</p>\n        </div>\n        <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n            <div class="bg-dark-grey padding-sm">\n                <div class="row">\n                    <div class="col-md-12">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <h3 class="font-weight-bold">Loan Offer Details</h3>\n                            </div>\n                            <div class="col-md-6">\n                                <div class="text-align-right">\n                                    <a href="#" class="btn btn-info margin-bottom-xs" ng-click="backToList($event)">Close\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Offer Amount:</dt>\n                            <dd>{{offer.loanAmount | customCurrency}}</dd>\n                            <dt>Estimated Fees:</dt>\n                            <dd>{{offer.feesAmount | feesCurrency}} <span>*Fees calculated based on payment on due date</span></dd>\n                            <dt>Date of Offer:</dt>\n                            <dd>{{offer.approvedOnDate}}</dd>\n                            <dt>Repayment Due In:</dt>\n                            <dd>{{offer.repaymentDueDays}}</dd>\n                            <dt>Offer Expires:</dt>\n                            <dd>{{offer.expiresOnDate}}</dd>\n                        </dl>\n                        <hr />\n                        <h3 class="font-weight-bold">Invoice Details</h3>\n                        <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                            <dt>Invoice Number:</dt>\n                            <dd>{{offer.invoiceLabel}}</dd>\n                            <dt>Invoice Date:</dt>\n                            <dd>{{offer.submittedOn}}</dd>\n                            <dt>Invoice Amount:</dt>\n                            <dd>{{offer.invoiceNetValue | customCurrency}}</dd>\n                            <dt>Due Date:</dt>\n                            <dd>{{offer.dueDate}}</dd>\n                            <dt>Customer:</dt>\n                            <dd>{{offer.customerReference}}</dd>\n                        </dl>\n                    </div>\n                </div>\n                <div class="text-align-left margin-top-md">\n                    <button type="submit" class="btn btn-info margin-bottom-xs" ng-click="declineOffer($event)" ng-disabled="offerDisabled">Decline Offer</button>\n                    <button type="submit" class="btn btn-info margin-bottom-xs" ng-click="sendToken($event)" ng-disabled="offerDisabled">Accept Offer</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>');
            $templateCache.put('borrower/loans/offers/offer-complete.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Invoices - Offers Waiting" client-type="borrower"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n\n        <div class="form-group row">\n            <div class="col-md-6 col-md-offset-3">\n\n                <div class="card card-block card-inverse card-success">\n                    <h5 class="card-title text-xs-center">Offer Accepted</h5>\n                    <div class="card-text">\n                        <p>Thank you. Your loan offer acceptance has been processed.</p>\n\n                        <p>You need to send your invoice to your customer now. Don\'t forget to send a copy to PeerPay as your loan payment cannot be released until this has been received.</p>\n                    </div>\n                    <p class="text-xs-center">\n                        <a ng-click="backToList($event)" class="btn btn-secondary btn-width-lg">Close</a>\n                    </p>\n\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n</div>');
            $templateCache.put('borrower/loans/offers/offer-verify.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Invoices - Offers Waiting" client-type="borrower"></header-buttons>\n    <form name="offerVerify" ng-submit="offerVerify.$valid && verifyOffer($event)" novalidate>\n        <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n            <fieldset class="form-group row"\n                  ng-class="{ \'has-error\' : offerVerify.$submitted}">\n                <div class="col-md-4">\n                    <label for="account-secret">Verification token</label>\n                </div>\n                <div class="col-md-8">\n                    <div class="form-group">\n                        <div class="input-group" id="account-secret">\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey1"\n                                   name="valKey1"\n                                   maxlength="3"\n                                   placeholder="XXX"\n                                   ng-model="offer.verify.secret.a"\n                                   tabindex="4"\n                                   auto-focus\n                                   required>\n                            <div class="input-group-addon">-</div>\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey2"\n                                   name="valKey2"\n                                   maxlength="3"\n                                   placeholder="XXX"\n                                   ng-model="offer.verify.secret.b"\n                                   tabindex="5"\n                                   auto-focus\n                                   required>\n                            <div class="input-group-addon">-</div>\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey3"\n                                   name="valKey3"\n                                   maxlength="3"\n                                   placeholder="XXX"\n                                   ng-model="offer.verify.secret.c"\n                                   tabindex="6"\n                                   auto-focus\n                                   required>\n                            <div class="input-group-addon">-</div>\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey4"\n                                   name="valKey4"\n                                   maxlength="3"\n                                   placeholder="XXX"\n                                   ng-model="offer.verify.secret.d"\n                                   tabindex="7"\n                                   auto-focus\n                                   required>\n                        </div>\n                    </div>\n\n                    <div ng-show="(offerVerify.valKey1.$invalid ||\n                                    offerVerify.valKey2.$invalid ||\n                                    offerVerify.valKey3.$invalid ||\n                                    offerVerify.valKey4.$invalid)\n                                    && offerVerify.$submitted"\n                         class="text-color-danger"\n                         role="alert">\n                        <p>Please input the 12 digit code you were sent. </p>\n                    </div>\n                </div>\n            </fieldset>\n            <div class="form-group row">\n                <div class="col-md-6 col-md-offset-4">\n                    <button type="button" id="continue" class="btn btn-secondary btn-sm" ng-click="sendToken($event)">Resend Token</button>\n                    <button type="submit" id="continue" class="btn btn-secondary btn-sm">Confirm</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>');
            $templateCache.put('borrower/loans/offers/offers-list.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Invoice - Offers Waiting" client-type="borrower"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <invoice-nav></invoice-nav>\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer</td>\n                                <td>Invoice Amount</td>\n                                <td>Due Date</td>\n                                <td>Offer Amount</td>\n                                <td class="hidden-sm-down">Estimated Fees</td>\n                                <td>Offer Expires</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="offer in vm.loanOffers" ng-if="offer.invoiceStatus == \'approved\'" ng-click="viewOffer($event, offer.invoiceNumber)">\n                                <td>\n                                    {{offer.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{offer.customerReference}}\n                                </td>\n                                <td>\n                                    {{offer.invoiceNetValue | customCurrency}}\n                                </td>\n                                <td>\n                                    {{offer.dueDate}}\n                                </td>\n                                <td>\n                                    {{offer.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{offer.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{offer.expiresOnDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <p class="capitalize font-weight-bold">The following loan offers have expired</p>\n                <div class="table-responsive">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="font-weight-bold capitalize">\n                                <td >Invoice Number</td>\n                                <td class=" hidden-sm-down">Customer</td>\n                                <td >Invoice Amount</td>\n                                <td class="hidden-sm-down">Due Date</td>\n                                <td class="hidden-sm-down">Offer Amount</td>\n                                <td class="hidden-sm-down">Fees</td>\n                                <td>Offer Expired</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="expiredOffer in vm.loanOffers" ng-if="expiredOffer.invoiceStatus == \'offer expired\'">\n                                <td>\n                                    {{expiredOffer.invoiceNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{expiredOffer.customerReference}}\n                                </td>\n                                <td>\n                                    {{expiredOffer.invoiceNetValue | customCurrency}}\n                                </td>\n                                <td>\n                                    {{expiredOffer.dueDate}}\n                                </td>\n                                <td>\n                                    {{expiredOffer.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{expiredOffer.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{expiredOffer.expiresOnDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
    angular.module('templates.clients', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('clients/clients-borrowers-active.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Active Borrowers"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Current Status</td>\n                                <td>Date Registered</td>\n                                <td>Registered By</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.borrowersTotalActive.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientStatus}}\n                                </td>\n                                <td>\n                                    {{client.createDate}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/clients-borrowers-inprogress.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Borrowers In Progress"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Client Type</td>\n                                <td>Main Contact</td>\n                                <td>Authorisation Requested Date</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.borrowersNotCompletedRegistration.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientType}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{client.lastUpdate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/clients-lenders-active.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Active Lenders"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Current Status</td>\n                                <td>Date Registered</td>\n                                <td>Registered By</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.lendersTotalActive.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientStatus}}\n                                </td>\n                                <td>\n                                    {{client.createDate}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/clients-lenders-inprogress.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Lenders In Progress"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Client Type</td>\n                                <td>Main Contact</td>\n                                <td>Authorisation Requested Date</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.lendersNotCompletedRegistration.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientType}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{client.lastUpdate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/clients-rejected.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Clients not Authorised"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Client Type</td>\n                                <td>Primary Contact</td>\n                                <td>Rejected By</td>\n                                <td class="hidden-sm-down">Reason Given</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.clientsNotAuthorized.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientType}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{client.clientData.authorization.rejectedBy}}\n                                </td>\n                                <td>\n                                    {{client.clientData.authorization.rejectionReason}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/clients-waiting.html', '<div class="container-fluid padding-lg">\n\n    <header-buttons client-type="clientType" sub-title="Clients" title="Awaiting Authorisation"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Client Type</td>\n                                <td>Main Contact</td>\n                                <td>Authorisation Requested Date</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.index | filterMultiObject:{\'clientStatus\': \'confirmed\', \'clientData.authorization.bankAccountConfirmed\': true, \'clientData.authorization.clientAuthorized\': false}">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientType}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{client.lastUpdate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/templates/client-details.html', '<div class="form-group" ng-if="client.lenderType == \'individual\'">\n    <label for="company-name" class="form-control-label dark">Investor Name</label>\n    <input type="text"\n           id="company-name"\n           name="company-name"\n           class="form-control"\n           ng-model="client.clientDesc"\n           ng-disabled="disableForm">\n</div>\n\n<div class="form-group" ng-if="client.lenderType != \'individual\'">\n    <label for="company-number" class="form-control-label dark">Company Name</label>\n    <input type="text"\n           id="company-description"\n           name="company-description"\n           class="form-control"\n           ng-model="client.clientDesc"\n           ng-disabled="disableForm">\n</div>\n\n<!-- permanently disabled -->\n<div class="form-group">\n    <label for="company-number" class="form-control-label dark">\n        {{client.lenderType == \'individual\' ? "NI Number" : "Company Number"}}\n    </label>\n    <input type="text"\n           id="company-number"\n           name="company-number"\n           class="form-control"\n           ng-model="client.clientNumber"\n           disabled>\n</div>\n\n<div class="form-group">\n    <label for="company-address-1" class="form-control-label dark">Address Line 1</label>\n    <input type="text"\n           id="company-address-1"\n           name="address1"\n           class="form-control "\n           ng-model="client.clientData.address.addressLine1"\n           ng-disabled="disableForm">\n    <div ng-if="!disableForm && form.$submitted" ng-messages="form.address1.$error"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">Address line 1 is required</div>\n    </div>\n</div>\n\n<div class="form-group">\n    <label for="company-address-2" class="form-control-label dark">Address Line 2</label>\n    <input type="text"\n           id="company-address-2"\n           name="company-address-2"\n           class="form-control"\n           ng-model="client.clientData.address.addressLine2"\n           ng-disabled="disableForm">\n</div>\n\n<div class="form-group">\n    <label for="address-town" class="form-control-label dark">Town / City</label>\n    <input type="text"\n           id="address-town"\n           name="town"\n           class="form-control"\n           ng-model="client.clientData.address.town"\n           ng-disabled="disableForm">\n    <div ng-if="!disableForm && form.$submitted" ng-messages="form.town.$error"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">Town/City is required</div>\n    </div>\n</div>\n\n<div class="form-group">\n    <label for="address-county" class="form-control-label dark">County</label>\n    <input type="text"\n           id="address-county"\n           name="county"\n           class="form-control"\n           ng-model="client.clientData.address.county"\n           ng-disabled="disableForm">\n    <div ng-if="!disableForm && form.$submitted" ng-messages="form.county.$error"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">County is required</div>\n    </div>\n</div>\n\n<div class="form-group">\n    <label for="post-code" class="form-control-label dark">Post Code</label>\n    <input type="text"\n           id="post-code"\n           name="postCode"\n           class="form-control"\n           ng-model="client.clientData.address.postCode"\n           ng-disabled="disableForm">\n    <div ng-if="!disableForm && form.$submitted" ng-messages="form.postCode.$error"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">Post Code is required</div>\n    </div>\n</div>\n\n<div class="form-group">\n    <label for="address-country" class="form-control-label dark">Country</label>\n    <input type="text"\n           id="address-country"\n           name="country"\n           class="form-control"\n           ng-model="client.clientData.address.country"\n           ng-disabled="disableForm">\n    <div ng-if="!disableForm && form.$submitted" ng-messages="form.country.$error"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">Country is required</div>\n    </div>\n</div>\n\n<!-- permanently disabled -->\n<div class="form-group" ng-if="client.lenderType != \'individual\'">\n    <label for="private-domain" class="form-control-label dark">{{domainLabel}}</label>\n    <input type="text"\n           id="private-domain"\n           name="emailDomain"\n           ng-model="client.emailDomain"\n           class="form-control"\n           disabled>\n</div>\n\n<div class="form-group" ng-if="(client.clientType == \'lender\' && client.lenderType == \'individual\')">\n    <label for="email" class="form-control-label dark">Email Address</label>\n    <input type="text"\n           id="email"\n           name="email"\n           ng-model="client.primaryUser.email"\n           class="form-control"\n           disabled>\n</div>\n\n<!-- borrower only -->\n<div class="form-group" ng-if="disableForm && (client.clientType == \'borrower\')">\n    <label for="accountancy-system" class="form-control-label dark">Accountancy System</label>\n    <input type="text"\n           id="accountancy-system"\n           name="accountancy-system"\n           ng-model="client.clientData.accountsSystem.label"\n           class="form-control"\n           disabled>\n</div>\n\n<div ng-if="!disableForm && (client.clientType == \'borrower\')">\n    <configurable-form ng-form="clientDetailsForm"\n                       name="accountsSystem"\n                       model-root="client.clientData">\n    </configurable-form>\n</div>\n\n<!-- permanently disabled -->\n<div class="form-group">\n    <label for="main-contact" class="form-control-label dark">Main Contact Name</label>\n    <input type="text"\n           id="main-contact"\n           name="main-contact"\n           class="form-control"\n           ng-model="normalizedPrimary"\n           disabled>\n</div>\n');
            $templateCache.put('clients/manage/borrower-active.html', '<div class="row">\n    <div class="col-md-8">\n        <manage-borrower-tabs active="active" client-name="{{clientName}}"></manage-borrower-tabs>\n    </div>\n    <div class="col-md-4">\n        <label>Total Active</label>\n        <input type="text" readonly="readonly" value="{{invoiceList[clientName].activeInvoiceList.length}}" />\n    </div>\n</div>\n<div class="row">\n    <div class="col-md-12">\n        <div class="table-responsive margin-bottom-sm">\n            <table class="table table-striped table-bordered table-hover table-condensed">\n                <thead>\n                    <tr class="capitalise font-weight-bold">\n                        <td>Invoice Number</td>\n                        <td class="hidden-sm-down">Loan Amount</td>\n                        <td>Submitted</td>\n                        <td>Payer</td>\n                        <td>Status</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr ng-repeat="invoice in invoiceList[clientName].activeInvoiceList">\n                        <td>\n                            {{invoice.invoiceLabel}}\n                        </td>\n                        <td>\n                            {{invoice.loanAmount | customCurrency}}\n                        </td>\n                        <td>\n                            {{invoice.submittedOn}}\n                        </td>\n                        <td class="hidden-sm-down">\n                            {{invoice.customerReference}}\n                        </td>\n                        <td>\n                            {{invoice.invoiceStatus}}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('clients/manage/borrower-credit-details.html', '<div class="row margin-bottom-lg margin-top-lg">\n    <div class="col-md-6">\n        <div class="text-align-left">\n            <div class="form-group">\n                <span class="font-weight-bold">Borrow Limit</span>\n                <input type="text" ng-disabled="true" value="{{creditInfo.borrowLimit}}" />\n            </div>\n        </div>\n    </div>\n    <div class="col-md-6">\n        <div class="text-align-right">\n            <div class="form-group">\n                <span class="font-weight-bold">Available Borrow Amount</span>\n                <input type="text" ng-disabled="true" value="{{creditInfo.availableBorrowLimit}}" />\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/borrower-overdue.html', '<div class="row">\n    <div class="col-md-8">\n        <manage-borrower-tabs active="overdue" client-name="{{clientName}}"></manage-borrower-tabs>\n    </div>\n    <div class="col-md-4">\n        <label>Total Overdue</label>\n        <input type="text" readonly="readonly" value="{{ (invoiceList[clientName].activeLoansList | filterMultiObject:{\'overdue\': \'1\'}).length }}" />\n    </div>\n</div>\n<div class="row">\n    <div class="col-md-12">\n        <div class="table-responsive margin-bottom-sm">\n            <table class="table table-striped table-bordered table-hover table-condensed">\n                <thead>\n                    <tr class="capitalise font-weight-bold">\n                        <td>Invoice Number</td>\n                        <td class="hidden-sm-down">Invoice Net Value</td>\n                        <td>Loan Paid</td>\n                        <td>Payer</td>\n                        <td>Date Due</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr ng-repeat="invoice in invoiceList[clientName].activeLoansList | filterMultiObject:{\'overdue\': \'1\'}">\n                        <td>\n                            {{invoice.invoiceLabel}}\n                        </td>\n                        <td>\n                            {{invoice.invoiceNetValue | customCurrency}}\n                        </td>\n                        <td>\n                            <!-- Unsure on this field this been done yet? -->\n                            {{invoice.loanPaid}}\n                        </td>\n                        <td class="hidden-sm-down">\n                            {{invoice.customerReference}}\n                        </td>\n                        <td>\n                            {{invoice.dueDate}}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/borrower-tabs.html', '<div class="row">\n    <div class="col-md-12">\n        <ul class="nav nav-tabs">\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'active\')}" href="/clients/manage/{{clientName}}/borrower/active">Active Invoices</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'withdrawn\')}" href="/clients/manage/{{clientName}}/borrower/withdrawn">Withdrawn Invoices</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-class="{\'active\': activeClass(\'overdue\')}" href="/clients/manage/{{clientName}}/borrower/overdue">Overdue Invoices</a>\n            </li>\n        </ul>\n    </div>\n</div>\n');
            $templateCache.put('clients/manage/borrower-withdrawn.html', '<div class="row">\n    <div class="col-md-8">\n        <manage-borrower-tabs active="withdrawn" client-name="{{clientName}}"></manage-borrower-tabs>\n    </div>\n    <div class="col-md-4">\n        <label>Total Withdrawn</label>\n        <input type="text" readonly="readonly" value="{{invoiceList[clientName].withdrawnInvoiceList.length}}" />\n    </div>\n</div>\n<div class="row">\n    <div class="col-md-12">\n        <div class="table-responsive margin-bottom-sm">\n            <table class="table table-striped table-bordered table-hover table-condensed">\n                <thead>\n                    <tr class="capitalise font-weight-bold">\n                        <td>Invoice Number</td>\n                        <td class="hidden-sm-down">Invoice Net Value</td>\n                        <td>Submitted</td>\n                        <td>Payer</td>\n                        <td>Status</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr ng-repeat="invoice in invoiceList[clientName].withdrawnInvoiceList">\n                        <td>\n                            {{invoice.invoiceLabel}}\n                        </td>\n                        <td>\n                            {{invoice.invoiceNetValue | customCurrency}}\n                        </td>\n                        <td>\n                            {{invoice.submittedOn}}\n                        </td>\n                        <td class="hidden-sm-down">\n                            {{invoice.customerReference}}\n                        </td>\n                        <td>\n                            {{invoice.invoiceStatus}}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/borrower.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Manage Clients" type="clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <h1 class="text-align-center">Latest status for {{clients.clientToManage.clientDesc}}</h1>\n        <borrower-credit-details client-name="{{clients.clientToManage.clientName}}"></borrower-credit-details>\n        <borrower-invoice-list type="{{type}}" client-name="{{clients.clientToManage.clientName}}"></borrower-invoice-list>\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <p class="font-weight-bold">Active Loans</p>\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Invoice Net Value</td>\n                                <td>Loan Paid</td>\n                                <td>Payer</td>\n                                <td>Date Due</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in invoices[clients.clientToManage.clientName].activeLoansList">\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.invoiceNetValue | customCurrency}}\n                                </td>\n                                <td>\n                                </td>\n                                <td>\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class="row">\n            <div class="col-md-12">\n                <div class="text-align-right">\n                    <button class="btn btn-info" ng-click="viewClientDetails(clients.clientToManage.clientName)">View Client Details</button>\n                    <button class="btn btn-info" ng-click="backToManage()">Done</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/client-details-edit.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Manage Clients" type="clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 padding-lg borderless border-radius-md">\n            <form ng-submit="clientDetailsForm.$valid && saveClientDetails(clientDetailsForm)" name="clientDetailsForm" novalidate>\n\n                <client-details ng-form="clientDetailsForm"\n                                client="clients.clientToManage"\n                                read-only="false">\n                </client-details>\n\n                <div class="form-group row margin-top-md">\n                    <div class="col-md-offset-4 col-md-6">\n                        <button class="btn btn-secondary" ng-click="goBack()">\n                            Cancel\n                        </button>\n                        <button class="btn btn-primary" type="submit">\n                            Save Details\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('clients/manage/client-details.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Manage Clients" type="clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 padding-lg borderless border-radius-md">\n\n            <form ng-submit="clientDetailsForm.$valid && saveClientDetails(clientDetailsForm)"\n                  name="clientDetailsForm" novalidate>\n\n                <div class="form-group">\n                    <label for="company-name" class="form-control-label dark">Client Type</label>\n                    <input type="text" id="company-name" name="company-name" class="form-control"\n                    ng-model="clients.clientToManage.clientType" ng-disabled="true">\n                </div>\n\n                <client-details ng-form="clientDetailsForm"\n                                client="clients.clientToManage"\n                                read-only="true">\n                </client-details>\n\n                <div class="form-group">\n                    <label for="main-contact" class="form-control-label dark">Main Contact Email</label>\n                    <input type="text"\n                           id="main-contact"\n                           name="main-contact"\n                           class="form-control"\n                           ng-model="clients.clientToManage.primaryUser.email"\n                           disabled>\n                </div>\n\n                <div class="form-group">\n                    <label for="main-contact" class="form-control-label dark">Main Contact Mobile</label>\n                    <input type="text"\n                           id="main-contact"\n                           name="main-contact"\n                           class="form-control"\n                           ng-model="clients.clientToManage.primaryUser.mobile"\n                           disabled>\n                </div>\n\n                <div class="row">\n                    <div class="col-md-12">\n                        <div class="text-align-right">\n                            <button class="btn btn-info" ng-click="goBack()">Close</button>\n                        </div>\n                    </div>\n                </div>\n\n            </form>\n\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/lender.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Manage Clients" type="clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <h1 class="text-align-center">Latest status for {{clients.clientToManage.clientDesc}}</h1>\n\n        <div class="row">\n            <div class="col-md-6">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt>Available to Loan</dt>\n                    <dd>{{loans.lenderInvestments.availableToLoan | customCurrency}}</dd>\n                    <!-- <dd>{{clients.clientToManage.clientData.lenderRiskProfile.availableFundsAmount | customCurrency}}</dd> -->\n                    <hr />\n                    <dt>Amount on Loan</dt>\n                    <dd>{{loans.lenderInvestments.onLoanAmount | customCurrency}}</dd>\n                    <dt>Number of Loans</dt>\n                    <dd>{{loans.lenderInvestments.onLoanCount}}</dd>\n                    <dt>Amount Overdue</dt>\n                    <dd>{{loans.lenderInvestments.overdueCount}}</dd>\n                    <dt>Loans Overdue</dt>\n                    <dd>{{loans.lenderInvestments.overdueAmount | customCurrency}}</dd>\n                </dl>\n            </div>\n            <div class="col-md-6">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt><span class="capitalise">Invested Amount</span></dt>\n                    <dd>{{clients.clientToManage.clientData.lenderRiskProfile.depositAmount | customCurrency}}</dd>\n                    <dt><span class="capitalise text-color-red">High</span></dt>\n                    <dd>{{clients.clientToManage.clientData.lenderRiskProfile.lowFunding | customCurrency}}</dd>\n                    <dt><span class="capitalise text-color-amber">Medium</span></dt>\n                    <dd>{{clients.clientToManage.clientData.lenderRiskProfile.midFunding | customCurrency}}</dd>\n                    <dt><span class="capitalise text-color-green">Low</span></dt>\n                    <dd>{{clients.clientToManage.clientData.lenderRiskProfile.highFunding | customCurrency}}</dd>\n                    <hr />\n                    <!-- <dt>Investment returns to date</dt>\n                    <dd></dd> -->\n                </dl>\n            </div>\n        </div>\n\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <p class="font-weight-bold">Active Loans</p>\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr>\n                                <td>Loan ID</td>\n                                <td>Estimated Return</td>\n                                <td>Payment Due Date</td>\n                                <td>Loan Amount</td>\n                                <td>Risk Level</td>\n                                <td>Duration</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="loan in loans.lenderInvestments.allocationList">\n                                <td>{{loan.transactionID}}</td>\n                                <td>{{loan.EstimatedReturn}}</td>\n                                <td>{{loan.paymentDueDate}}</td>\n                                <td>{{loan.loanAmount}}</td>\n                                <td>{{loan.riskLevel}}</td>\n                                <td>{{loan.duration}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class="row">\n            <div class="col-md-12">\n                <div class="text-align-right">\n                    <button class="btn btn-info" ng-click="viewClientDetails(clients.clientToManage.clientName)">View Client Details</button>\n                    <button class="btn btn-info" ng-click="backToManage()">Done</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('clients/manage/list.html', '<div class="container-fluid padding-lg">\n    <header-buttons title="Manage Clients" type="clients"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Client Type</td>\n                                <td class="hidden-sm-down">Primary Contact</td>\n                                <td>Primary Email</td>\n                                <td>Status</td>\n                                <td>Date Registered</td>\n                                <td>&nbsp;</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.filteredIndex">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.clientType}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.primaryUser.firstName + \' \' + client.primaryUser.lastName}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.email}}\n                                </td>\n                                <td>\n                                    {{client | clientStatusDisplay}}\n                                </td>\n                                <td>\n                                    {{client.createDate.slice(0, 10) | date: \'dd MMM yyyy\'}}\n                                </td>\n                                <td>\n                                    <button class="btn btn-info" ng-if="(client | clientStatus) == \'active\'" ng-click="viewClientActivity(client)">View Current Activity</button>\n\n                                    <button class="btn btn-info" ng-click="editClientDetails(client.clientName)" ng-if="(client | clientStatus) == \'queried\'">Edit Details</button>\n\n                                    <div ng-if="(client | clientStatus) == \'pre_reg\'">\n                                        <button ng-click="continueInvite(client)" class="btn btn-info margin-bottom-sm">Continue Setup</button>\n                                        <button ng-click="deleteClient(client)" class="btn btn-info">Delete</button>\n                                    </div>\n\n                                    <button class="btn btn-info" ng-click="viewClientDetails(client.clientName)" ng-if="(client | clientStatus) == \'rejected\' || (client | clientStatus) == \'in_reg\'">View Details</button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
    angular.module('templates.core', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('core/abort/403.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Forbidden</h1>\n\n            <p>It looks like you don\'t have the correct permissions to access this resource.</p>\n\n            <a href="/summary" class="btn btn-primary">Go back to the summary page</a>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/abort/404.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Not Found</h1>\n\n            <p>It looks like the resource you requested could not be found.</p>\n\n            <a href="/summary" class="btn btn-primary">Go back to the summary page</a>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/abort/500.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Server Error</h1>\n\n            <p>We just encountered a server error. We apologise in advance for any\n                inconvenience this might have caused you. If you continue to expeirience difficulty\n                with the site then please contact a PeerPay representative.</p>\n\n            <a href="/summary" class="btn btn-primary">Go back to the summary page</a>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/auth/login-box.html', '<form name="loginForm" ng-submit="loginForm.$valid && login(loginForm)" novalidate>\n    <div class="full-width">\n        <!-- username -->\n        <fieldset class="form-group half-width margin-auto"\n                  ng-class="{ \'has-error\' : loginForm.username.$invalid && loginForm.$submitted }">\n            <label class="form-control-label">Username</label>\n            <input type="text"\n                   ng-model="credentials.username"\n                   name="username"\n                   class="form-control"\n                   id="username"\n                   placeholder="Username"\n                   required>\n\n            <div ng-messages="loginForm.username.$error"\n                 ng-if="loginForm.username.$invalid && loginForm.$submitted"\n                 class="text-color-danger"\n                 role="alert">\n                <div ng-message="required">You must enter a username</div>\n            </div>\n        </fieldset>\n\n        <!-- password -->\n        <fieldset class="form-group half-width margin-auto"\n                  ng-class="{ \'has-error\' : loginForm.password.$invalid && loginForm.$submitted }">\n            <label class="form-control-label">Password</label>\n            <input type="password"\n                   ng-model="credentials.password"\n                   name="password"\n                   class="form-control"\n                   id="password"\n                   placeholder="Password"\n                   required\n                   minlength="5">\n\n            <div ng-messages="loginForm.password.$error"\n                 ng-if="loginForm.password.$invalid && loginForm.$submitted"\n                 class="text-color-danger"\n                 role="alert">\n                <div ng-message="required">You must enter a password</div>\n                <div ng-message="minlength">Your password must be longer than 5 characters</div>\n            </div>\n        </fieldset>\n        <div class="margin-top-sm text-center">\n            <div ng-show="throttleMsg">\n                <p>{{throttleMsg}}</p>\n            </div>\n            <div ng-show="attemptsRemaining !== undefined && !throttleMsg">\n                <p>{{attemptsRemaining}} {{(attemptsRemaining > 1) ? \'attempts\' : \'attempt\'}} remaining</p>\n            </div>\n            <button class="btn btn-primary btn-lg" type="submit">Login</button>\n        </div>\n\n    </div>\n</form>');
            $templateCache.put('core/auth/login.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n\n            <login-box></login-box>\n\n            <a href="/apply">Apply for an account</a>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/auth/password-reset.html', '<div class="container">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n\n            <form name="passwordResetForm" class="form"\n                  ng-submit="passwordResetForm.$valid && getPasswordReset(passwordResetForm)" novalidate>\n                <div class="full-width">\n\n                    <h3>Reset your password</h3>\n\n                    <fieldset class="form-group row"\n                              ng-class="{ \'has-error\' : passwordResetForm.email.$invalid && passwordResetForm.$submitted }">\n                        <label for="email" class="col-md-3 form-control-label text-spaced-xs">Email Address</label>\n                        <div class="col-md-9">\n                            <div class="input-group">\n                                <input type="email"\n                                       id="email"\n                                       name="email"\n                                       placeholder="Email Address"\n                                       class="form-control "\n                                       ng-model="vm.client.email"\n                                       ng-pattern="/^\\S+@\\S+\\.\\S+$/"\n                                       required>\n                            </div>\n                            <div ng-messages="passwordResetForm.email.$error"\n                                 ng-if="passwordResetForm.email.$invalid && passwordResetForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                                <div ng-message="email">Must be a valid email</div>\n                                <div ng-message="pattern">Must be a valid email</div>\n                            </div>\n                        </div>\n                    </fieldset>\n\n                    <fieldset class="form-group row"\n                              ng-class="{ \'has-error\' : passwordResetForm.email.$invalid && passwordResetForm.$submitted }">\n                        <label for="email" class="col-md-3 form-control-label text-spaced-xs"></label>\n                        <div class="col-md-9">\n\n                            <button class="btn btn-primary btn-lg" type="submit">Reset</button>\n                        </div>\n                    </fieldset>\n\n                </div>\n            </form>\n\n        </div>\n    </div>\n</div>');
            $templateCache.put('core/footer/default.html', '<footer class="Footer">\n    <div class="container">\n        <div class="row">\n            <div class="col-md-6">\n                <a href="/" class="Footer__logo">PeerPay</a>\n                <div class="Footer__copy">\n                    PeerPay Ltd<br>\n                    Registered in England & Wales<br>\n                    Company Number 9359297<br>\n                    5th Floor (744-750), The Salisbury, Salisbury House, London Wall, London, EC2M 5QQ\n                </div>\n            </div>\n            <div class="col-md-6 text-right">\n                <ul class="Footer__links">\n                    <li><a href="#">Terms & Conditions</a></li>\n                    <li><a href="#">About</a></li>\n                    <li><a href="#">Contact</a></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</footer>\n');
            $templateCache.put('core/forms/configurable-dropdown.html', '<div class="row">\n    <fieldset class="form-group">\n        <label for="{{field.name}}"\n               class="col-md-8 form-control-label"\n               ng-show="field.label" style="padding-left: 15px;">\n\n            <div ng-bind-html="field.label | sanitize"></div>\n\n        </label>\n\n        <div class="col-md-4 ">\n            <select id="{{field.name}}"\n                    name="{{field.name}}"\n                    class="form-control"\n                    ng-model="modelRoot[field.name]"\n                    ng-options="option.label for option in field.options"\n                    ng-required="field.required.value"\n                    ng-change="logChange(form)"\n                    ng-disabled="readOnly">\n            </select>\n        </div>\n\n        <div ng-messages="form[field.name].$error"\n             ng-if="form.$$parentForm.$submitted"\n             class="text-color-danger"\n             role="alert">\n            <div ng-message="required">{{field.required.errorMessage}}</div>\n        </div>\n        \n    </fieldset>\n</div>');
            $templateCache.put('core/forms/file-upload.html', '<div class="form-group row margin-bottom-md">\n    <label for="availableFundsAmount" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Amount of available funds</label>\n    <div class="col-md-6">\n        <div class="input-group">\n            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n            <input type="number"\n                   id="availableFundsAmount"\n                   name="availableFundsAmount"\n                   class="form-control"\n                   min="10000"\n                   required\n                   ng-model="vm.client.clientData.lenderRiskProfile.availableFundsAmount"\n                   decimal-place>\n        </div>\n    </div>\n    <!-- <span class="help-block" ng-show="ppForm.availableFundsAmount.$error.decimal">\n        Invalid Amount!\n    </span> -->\n    <div ng-messages="ppForm.availableFundsAmount.$error"\n         ng-if="ppForm.$submitted"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="required">* Required </div>\n        <div ng-message="min">* Does not meet the minimum of \xA310,000 </div>\n    </div>\n    <div ng-messages="ppForm.availableFundsAmount.$error"\n         ng-if="ppForm.depositAmount.$dirty"\n         class="text-color-danger"\n         role="alert">\n        <div ng-message="decimal">* Amount must be two decimal places </div>\n    </div>\n</div>');
            $templateCache.put('core/forms/header-title.html', '<nav class="pp-inner-header bg-title-banner height-fixed-100 padding-y padding-x-lg">\n    <div class="col-xs-12">\n        <h1 class="left line-height-80 text-decoration-none text-color-white">\n            {{title}}\n        </h1>\n    </div>\n</nav>');
            $templateCache.put('core/headers/header-buttons.html', '<div class="Leed Leed--primary">\n    <div class="container">\n        <div class="row">\n            <div class="col-md-4 col-xs-12">\n                <h5>{{subTitle}}</h5>\n                <h2>{{title}}</h2>\n            </div>\n            <div class="col-md-8 col-xs-12 hidden-xs-down">\n                <div ng-repeat="button in buttons">\n                    <a href="{{button.url}}" class="text-color-white right margin-top-xs margin-left-xs"><i class="fa fa-clipboard text-center block" ng-class="{{button.class}}"></i> {{button.title}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('core/home/home.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>{{user.role}} homepage</h1>\n\n            <p>You are currently logged in</p>\n\n            <p>Your role is: {{user.role}}</p>\n            <p>Available routes:</p>\n            <p><a href="/invite/borrower/find">Invite borrower primary user</a></p>\n            <p><a href="/invite/lender/find">Invite lender company</a></p>\n            <p><a href="/invite/lender/individual">Invite lender individual</a></p>\n            <p><a href="/setup/borrower/manage">Borrower Setup</a></p>\n            <p><a href="/setup/lender/manage">Lender Setup</a></p>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/index/about.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>About Peerpay</h1>\n\n            <p>Peerpay is really awesome</p>\n\n            <button href="/signup" class="btn">Sign up</button>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/index/contact.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Contact</h1>\n            <p>Here\'s how to contact us.</p>\n        </div>\n    </div>\n</div>\n\n');
            $templateCache.put('core/index/landing.html', '<section class="margin-top-lg bg-login-home bg-size-cover bg-repeat-none bg-center position-relative text-align-center">\n    <div class="half-width margin-auto">\n        <h1>Welcome to PeerPay!</h1>\n        <div class="text-center padding-top-xxl">\n            <h2>Login</h2>\n\n            <login-box></login-box>\n\n        </div>\n    </div>\n</section>\n');
            $templateCache.put('core/index/pricing.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Pricing</h1>\n            <p>There are many ways you can pay us.</p>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('core/index/terms.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Terms and Conditions</h1>\n            <p>We have many terms and conditions.</p>\n        </div>\n    </div>\n</div>\n\n');
            $templateCache.put('core/modals/about.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">About</h4>\n</div>\n<div class="modal-body">\n    <p>Version {{appVersion}}</p>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-secondary" ng-click="cancel($event)">Dismiss</button>\n</div>');
            $templateCache.put('core/modals/confirm-deposit.html', '<div class="modal-header">\n    <button ng-click="closeConfirmDeposit($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Final Confirmation</h4>\n</div>\n<form name="riskTermsForm" ng-submit="riskTermsForm.$valid && putRiskProfile(riskTermsForm)" novalidate>\n    <div class="modal-body">\n        <p class="card-text">Please confirm that you have initiated a bank transfer to the value of:</p>\n        <div class="form-group row margin-bottom-md">\n            <div class="col-md-12">\n                <p>{{ vm.client.clientData.lenderRiskProfile.depositAmount | customCurrency }}</p>\n            </div>\n        </div>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="confirmDeposit($event)">Confirm Payment</button>\n    </div>\n</form>\n');
            $templateCache.put('core/modals/confirm-invite-primary.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Send Primary Invite</h4>\n</div>\n<div class="modal-body">\n    <p class="card-text">Please confirm that the below email address is correct, before completing invitation:</p>\n    <div class="form-group row margin-bottom-md">\n        <div class="col-md-12">\n            <p>{{vm.primaryUser.emailUsername}}@{{vm.client.emailDomain}}</p>\n        </div>\n    </div>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n    <button class="btn btn-primary" ng-click="continue($event)">Confirm</button>\n</div>\n');
            $templateCache.put('core/modals/confirm-query-details.html', '<form name="termsForm" novalidate>\n    <div class="modal-body">\n        <h2 class="hang">I have found a problem</h2>\n        <div class="card-text">\n            <p>Please contact your Accountancy Practise and advise them of discrepancies found.</p>\n        </div>\n        <button class="btn btn-primary" type="submit" ng-click="cancel($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit" ng-click="confirm($event)">Confirm</button>\n    </div>\n</form>\n');
            $templateCache.put('core/modals/default.html', '<div class="modal-header">\n    <h4 class="modal-title">{{modalTitle}}</h4>\n</div>\n\n<div class="modal-body">\n    <p>{{modalMessage}}</p>\n</div>\n\n<div class="modal-footer">\n    <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n    <button class="btn btn-primary" ng-click="continue($event)">{{buttonText || \'Continue\'}}</button>\n</div>\n\n');
            $templateCache.put('core/modals/login.html', '<div class="modal-header">\n    <button ng-click="cancel($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Login</h4>\n</div>\n<form name="loginForm" ng-submit="loginForm.$valid && login()" novalidate>\n    <div class="modal-body">\n            <!-- username -->\n            <fieldset class="form-group"\n                      ng-class="{ \'has-error\' : loginForm.username.$invalid && loginForm.$submitted }">\n                <input type="text"\n                       ng-model="credentials.username"\n                       name="username"\n                       class="form-control"\n                       id="loginEmail"\n                       placeholder="Username"\n                       required>\n\n                <div ng-messages="loginForm.username.$error"\n                     ng-if="loginForm.username.$invalid && loginForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">You must enter a username</div>\n                </div>\n            </fieldset>\n\n            <!-- password -->\n            <fieldset class="form-group"\n                      ng-class="{ \'has-error\' : loginForm.password.$invalid && loginForm.$submitted }">\n                <input type="password"\n                       ng-model="credentials.password"\n                       name="password"\n                       class="form-control"\n                       id="loginPassword"\n                       placeholder="Password"\n                       required\n                       minlength="5">\n\n                <div ng-messages="loginForm.password.$error"\n                     ng-if="loginForm.username.$invalid && loginForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">You must enter a password</div>\n                    <div ng-message="minlength">Your password must be longer than 5 characters</div>\n                </div>\n            </fieldset>\n\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"> Remember me\n                </label>\n            </div>\n\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancel($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Login</button>\n    </div>\n</form>');
            $templateCache.put('core/modals/risk-profile-terms.html', '<div class="modal-header">\n    <button ng-click="cancelAcceptRisk($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">PeerPay Execution Only Notice</h4>\n</div>\n<form name="riskTermsForm" ng-submit="riskTermsForm.$valid && putRiskProfile(riskTermsForm)" novalidate>\n    <div class="modal-body">\n        <p class="card-text">\n            I, {{vm.firstName}} {{vm.lastName}}\n            <span ng-show="vm.client.lenderType == \'company\'"> of {{vm.client.clientDesc}}</span>,\n            confirm my intention to invest the sum of\n            {{vm.client.clientData.lenderRiskProfile.depositAmount | customCurrency}}.\n            <br />\n            As a Sophisticated Investor, I agree and confirm that:\n        <ol>\n            <li>I am aware that the transaction is execution only</li>\n            <li>I have not asked for or received advice</li>\n            <li>It is my decision alone to make the investment</li>\n            <li>PeerPay takes no responsibility for the product\'s suitability.</li>\n        </ol>\n        <br />\n        Dated: {{todaysDate | date:\'dd-MM-yyyy\'}}\n        </p>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-disabled="true">Print Notice</button>\n        <button class="btn btn-primary" type="submit">Accept Terms</button>\n    </div>\n</form>\n');
            $templateCache.put('core/modals/terms-manage.html', '<div class="modal-header">\n    <button ng-click="cancelTerms($event)" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">Terms and Conditions</h4>\n</div>\n<form name="termsForm" ng-submit="termsForm.$valid && acceptManageTerms(termsForm)" novalidate>\n    <div class="modal-body">\n        {{vm.config[$parent.termsType].content}}\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancelTerms($event)">Cancel</button>\n        <button class="btn btn-primary" type="submit">Accept Terms and Conditions</button>\n    </div>\n</form>\n');
            $templateCache.put('core/modals/terms.html', '<form name="termsForm" ng-submit="termsForm.$valid && acceptTerms(acceptMethod)" novalidate>\n    <div class="modal-body">\n        <h2 class="hang">Terms and Conditions</h2>\n\n        <p> There is a summary of the Terms and Conditions on use of this service below that make it\n            easier to understand what you\'re agreeing to when you use PeerPay.\n            However, we still recommend that you read the entire Terms of Conditions on use of this service,\n            and our Privacy Policy, as such documents include additional terms that are not summarised\n            <a href="/terms" target="_blank">here</a>.</p>\n\n        <div class="textbox" id="terms" compile-html="content"></div>\n\n\n        <!-- <div class="bottom-label">* Read the terms and conditions to the end to continue.</div> -->\n        <!-- <button class="btn btn-secondary" ng-click="cancelTerms($event)">Cancel</button> -->\n\n        <div ng-if="!disableTermsButton">\n            <submit-button loading="loading" text="Accept and Continue"></submit-button>\n        </div>\n        <button class="btn btn-primary btn-full" type="button" ng-click="cancelTerms($event)" ng-if="disableTermsButton">\n            Go Back\n        </button>\n    </div>\n</form>\n\n');
            $templateCache.put('core/settings/default.html', '<p>settings</p>');
            $templateCache.put('core/navbar/admin.html', '<nav class="navbar navbar-light bg-white">\n\n    <!-- navbar brand -->\n    <a class="navbar-brand" href="/">\n        <span class="bg-logo bg-repeat-none inline-block"></span>\n        <span class="BrandonText-Regular italic inline-block font-size-md" ng-if="!isAuthenticated"> - The gateway to simple financing</span>\n    </a>\n\n    <!-- logged in version -->\n    <div ng-cloak ng-show="isAuthenticated">\n        <button class="dropdown-toggle\n                    pull-xs-right\n                    btn-width\n                    text-color-dark\n                    border-light\n                    border-radius-md\n                    font-size-sm\n                    text-spaced-xs\n                    text-decoration-none\n                    line-height-40\n                    padding-x-lg\n                    margin-left-x-xxs"\n                type="button"\n                data-toggle="collapse"\n                data-target="#exCollapsingNavbar2"\n                ng-click="navCollapsed = !navCollapsed">\n            &#9776;\n        </button>\n\n        <!-- horizontal menu -->\n        <ul class="nav navbar-nav hidden-sm-down">\n            <li class="nav-item">\n                <a class="nav-link" href="/summary">Summary</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="/system">System</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="/clients/list/manage/all">Clients</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="/invoices/list/allocated">Invoices</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="/log">Log</a>\n            </li>\n        </ul>\n\n        <!-- vertical menu -->\n        <p class="pull-xs-right padding-right-sm text-color-primary">{{user.username}}</p>\n        <div class="collapse"\n             ng-init="navCollapsed = true"\n             uib-collapse="navCollapsed">\n\n            <ul class="pull-xs-right z-index-high position-absolute right-0 bg-beige-light margin-top-md padding-md padding-top-sm padding-bottom-sm">\n                <nav-menu></nav-menu>\n                <li class="nav-item" ng-click="logoutUser()">\n                    <a class="nav-link" href="#">Logout</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n\n    <div ng-cloak ng-show="!isAuthenticated">\n        <div class="padding-top-lg pull-xs-right text-color-primary">\n            <p class="BrandonText-Regular font-size-md">In proud association with {{manager | uppercaseFirst}}</p>\n        </div>\n    </div>\n</nav>');
            $templateCache.put('core/navbar/default.html', '<nav class="navbar navbar-light bg-white">\n\n    <!-- navbar brand -->\n    <a class="navbar-brand" href="/">\n        <span class="bg-logo bg-repeat-none inline-block"></span>\n        <span class="BrandonText-Regular italic inline-block font-size-md" ng-if="!isAuthenticated"> - The gateway to simple financing</span>\n    </a>\n\n    <!-- logged in version -->\n    <div ng-cloak ng-show="isAuthenticated">\n        <button class="dropdown-toggle\n                    pull-xs-right\n                    btn-width\n                    text-color-dark\n                    border-light\n                    border-radius-md\n                    font-size-sm\n                    text-spaced-xs\n                    text-decoration-none\n                    line-height-40\n                    padding-x-lg\n                    margin-left-x-xxs"\n                type="button"\n                data-toggle="collapse"\n                data-target="#exCollapsingNavbar2"\n                ng-click="navCollapsed = !navCollapsed">\n            &#9776;\n        </button>\n\n        <!-- horizontal menu -->\n        <ul class="nav navbar-nav hidden-sm-down">\n            <li class="nav-item">\n                <a class="nav-link" ng-click="clientIsAuthorized && summary()">Summary</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-click="manage()" ng-if="clientType == \'lender\' || clientType == \'borrower\'">Manage</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" ng-click="clients()" ng-if="clientType == \'manager\'">Clients</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="#" ng-click="clientIsAuthorized && loans()" ng-if="clientType != \'manager\'">{{ clientType == \'lender\' ? "Investments" : "Loans" }}</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="#" ng-click="clientIsAuthorized && invoices()" ng-if="clientType != \'lender\' && clientType != \'manager\'">Invoices</a>\n            </li>\n            <li class="nav-item">\n                <a class="nav-link" href="#" ng-click="clientIsAuthorized && loans()" ng-if="clientType != \'lender\'">Reports</a>\n            </li>\n            <!-- <li class="nav-item" uib-dropdown ng-if="clientType != \'borrower\' || clientType != \'lender\'">\n                <a uib-dropdown-toggle class="nav-link">Invite</a>\n                <div uib-dropdown-menu class="nav navbar-nav" role="menu">\n                    <a class="nav-link" href="/invite/find/borrower">Register Borrower</a>\n                    <a class="nav-link" href="/invite/find/lender">Invite Lender Company</a>\n                    <a class="nav-link" href="/invite/individual/lender">Invite Lender Individual</a>\n                </div>\n            </li> -->\n        </ul>\n\n        <!-- vertical menu -->\n        <p class="pull-xs-right padding-right-sm text-color-primary">{{user.username}}</p>\n        <div class="collapse"\n             ng-init="navCollapsed = true"\n             uib-collapse="navCollapsed">\n\n            <ul class="pull-xs-right z-index-high position-absolute right-0 bg-beige-light margin-top-md padding-md padding-top-sm padding-bottom-sm">\n                <nav-menu></nav-menu>\n                <li class="nav-item" ng-click="logoutUser()">\n                    <a class="nav-link" href="#">Logout</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n\n    <div ng-cloak ng-show="!isAuthenticated">\n        <div class="padding-top-lg pull-xs-right text-color-primary">\n            <p class="BrandonText-Regular font-size-md">In proud association with {{manager | uppercaseFirst}}</p>\n        </div>\n    </div>\n</nav>');
            $templateCache.put('core/navbar/menu.html', '<li class="nav-item">\n    <a class="nav-link" ng-click="about()">About</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link" href="/summary">Summary</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link" ng-click="manage()">Manage</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link" href="/loans/list/active">Loans</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link" href="/invoices/list/all">Invoices</a>\n</li>\n<li class="nav-item">\n    <a class="nav-link" href="#">Reports</a>\n</li>\n');
            $templateCache.put('core/summary/index.html', '<div class="container-fluid padding-lg">\n    <ui-view/>\n</div>\n');
            $templateCache.put('core/templates/accounting-pending.html', '<div class="row">\n    <div class="col-md-8 col-md-offset-2">\n        <span class="fa fa-refresh icon-loading-animate"></span>Loading data from accounting system\n    </div>\n</div>');
            $templateCache.put('core/templates/header-actionable-accountancy.html', '<nav class="pp-inner-header bg-title-banner height-fixed-100 padding-y padding-x-lg">\n    <div class="row">\n        <div class="col-md-3 col-xs-12">\n            <h2 class="left text-decoration-none text-color-white full-width">{{host}}</h1>\n            <h1 class="left text-decoration-none text-color-white full-width">{{title}}</h1>\n        </div>\n        <div class="col-md-9 col-xs-12">\n            <div ng-repeat="button in buttons">\n                <a href="{{button.url}}" class="text-color-white right margin-top-xs margin-left-xs"><i class="fa fa-clipboard text-center block" ng-class="{{button.class}}"></i> {{button.title}}</a>\n            </div>\n        </div>\n    </div>\n</nav>');
            $templateCache.put('core/borrowers/invoices/cancelled.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="clientType" sub-title="Clients" title="Borrowers With Cancelled Invoices"></header-buttons>\n\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Company Number</td>\n                                <td class="hidden-sm-down">Client Name</td>\n                                <td>Main Contact</td>\n                                <td>No. of Cancelled Invoices</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="client in clients.summary.borrowersWithCancelledInvoices.entities">\n                                <td>\n                                    {{client.clientNumber}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{client.primaryUser.username}}\n                                </td>\n                                <td>\n                                    {{(loans.summary.loansWithdrawn.entities | filterMultiObject:{\'client.clientName\': client.clientName}).length }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('core/modals/activation/email.html', '<div class="modal-header">\n    <button ng-click="cancel()" type="button" class="close" data-dismiss="modal" aria-label="Close">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <h4 class="modal-title">We just sent you an email!</h4>\n    <p>Enter the 12 digit code below</p>\n</div>\n<form name="emailActivationForm" ng-submit="emailActivationForm.$valid && postEmailToken()" novalidate>\n    <div class="modal-body">\n        <!-- email -->\n        <fieldset class="form-group"\n                  ng-class="{ \'has-error\' : emailActivationForm.email.$invalid && emailActivationForm.$submitted }">\n            <input type="email"\n                   ng-model="credentials.email"\n                   name="email"\n                   class="form-control"\n                   id="loginEmail"\n                   placeholder="Enter email"\n                   required>\n\n            <div ng-messages="emailActivationForm.email.$error"\n                 ng-if="emailActivationForm.email.$invalid && emailActivationForm.$submitted"\n                 class="text-color-danger"\n                 role="alert">\n                <div ng-message="required">You must enter an email address</div>\n                <div ng-message="email">Your email address is invalid</div>\n            </div>\n        </fieldset>\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-secondary" ng-click="cancel()">Cancel</button>\n        <button class="btn btn-primary" type="submit">Login</button>\n    </div>\n</form>');
            $templateCache.put('core/modals/activation/mobile.html', '<!DOCTYPE html>\n<html>\n<head lang="en">\n    <meta charset="UTF-8">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>');
            $templateCache.put('core/summary/borrower/main.html', '<header-buttons host="Your" title="Summary" client-type="borrower"></header-buttons>\n<div class="container">\n\n    <div class="Block__container">\n        <div class="text-align-center Block Block--light">\n            <h3>{{(invoices.index | totalAmount:{\'invoiceStatus\': [\'active_loan\']}:\'feesAmount\') }}</h3>\n            <span>Active Loan Fees (Est)</span>\n        </div>\n\n        <div class="text-align-center Block Block--light">\n            <h3>{{(invoices.index | totalAmount:{\'invoiceStatus\': [\'active_loan\']}:\'loanAmount\') }}</h3>\n            <span>Total Borrowed Amount</span>\n        </div>\n\n        <div class="text-align-center Block Block--light">\n            <h3>{{banking.creditCheck.availableBorrowLimit | customCurrency}}</h3>\n            <span>Avaliable to Borrow</span>\n        </div>\n\n        <div class="text-align-center Block Block--light">\n            <h3>{{banking.creditCheck.borrowLimit | customCurrency}}</h3>\n            <span>Borrow Limit</span>\n        </div>\n\n    </div>\n    <hr />\n\n    <div class="row">\n        <div class="col-md-6 col-sm-6">\n            <h4 class="drop">Current Activity</h4>\n            <div class="Block Block--bordered">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt class="dark">Invoices in Progress</dt>\n                    <dd class="dark"><a href="/invoices/list/progress">{{(invoices.index | filterMultiObject:{\'invoiceStatus\': [\'submitted\', \'allocated\', \'approved\', \'confirmed\', \'payment_pending\']}).length }}</a></dd>\n                    <dt>Loan Offers for Approval</dt>\n                    <dd><a href="/invoices/list/offers">{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'approved\'}).length }}</a></dd>\n                    <dt>Active Loans</dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'active_loan\'}).length }}</dd>\n                    <hr />\n                    <dt>Overdue Invoices</dt>\n                    <dd><a href="/loans/list/overdue">{{(invoices.index | filterMultiObject:{\'overdue\': 1}).length }}</a></dd>\n                    <dt>Underpaid Invoices</dt>\n                    <dd><a href="/invoices/list/underpaid">0</a></dd>\n                </dl>\n                <!-- <p class="text-align-right"><a href="/invoices/list/all">View all invoices in progress</a></p> -->\n            </div>\n        </div>\n        <div class="col-md-6 col-sm-6">\n            <h4 class="drop">Your Invoices</h4>\n            <div class="Block Block--bordered">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt class="dark">Invoices Submitted <span class="font-weight-normal">Awaiting Response</span></dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'submitted\'}).length }}</dd>\n                    <dt class="dark">Invoices Allocated <span class="font-weight-normal">Awaiting Authorisation</span></dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'allocated\'}).length }}</dd>\n                    <dt class="dark">Invoices Authorised <span class="font-weight-normal">Loan Offer Waiting</span></dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'approved\'}).length }}</dd>\n                    <dt class="dark">Invoices not Authorised</dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'rejected\'}).length }}</dd>\n                    <dt class="dark">Loan Offer Accepted <span class="font-weight-normal">Payment Release Pending</span></dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'confirmed\'}).length }}</dd>\n                    <dt class="dark">Loan Payment not Approved</dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'loan_cancelled\'}).length }}</dd>\n                    <dt class="dark">Loan Payment Approved <span class="font-weight-normal">Bank Confirmation Pending</span></dt>\n                    <dd>{{(invoices.index | filterMultiObject:{\'invoiceStatus\': \'payment_pending\'}).length }}</dd>\n                </dl>\n                <!-- <p class="text-align-right"><a href="/invoices/list/all">View all my invoices</a></p> -->\n            </div>\n        </div>\n    </div>\n\n    <h4>Currently Active Loans</h4>\n    <div class="table-responsive">\n        <table class="table table-striped borderless">\n            <thead>\n                <tr class="font-weight-bold">\n                    <td class="capitalise">Invoice</td>\n                    <td class="capitalise">Sent</td>\n                    <td class="capitalise">Due</td>\n                    <td class="capitalise">Payer</td>\n                    <td class="capitalise">Value</td>\n                    <td class="capitalise">Estimated</td>\n                    <td class="capitalise">Borrowed</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="invoice in invoices.index" ng-if="invoice.invoiceStatus == \'active_loan\'">\n                    <td>{{invoice.invoiceLabel}}</td>\n                    <td>{{invoice.submittedOn | date:\'dd MMM yyyy\'}}</td>\n                    <td class="text-color-red">{{invoice.dueDate | date:\'dd MMM yyyy\'}}</td>\n                    <td>{{invoice.customerReference}}</td>\n                    <td>{{invoice.invoiceNetValue | customCurrency}}</td>\n                    <td>{{invoice.feesAmount | feesCurrency}}</td>\n                    <td>{{invoice.loanAmount | customCurrency}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n');
            $templateCache.put('core/summary/lender/main.html', '<header-buttons sub-title="Your" title="Summary"></header-buttons>\n\n<div class="container drop">\n    <div class="row">\n        <div class="col-md-6">\n            <h4 class="drop">Current Activity</h4>\n             <div class="Block Block--bordered">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt class="dark">Current Funding</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.currentFunding | customCurrency}}</dd>\n                    <dt class="dark">Available to Loan</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.availableToLoan | customCurrency}}</dd>\n\n                    <div class="Block__splitter"></div>\n\n                    <dt class="dark">Amount on Loan</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.onLoanAmount | customCurrency}}</dd>\n                    <dt class="dark">Number of Loans</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.onLoanCount}}</dd>\n                    \n                    <div class="Block__splitter"></div>\n\n                    <dt class="dark">Amount Under Offer</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.underOfferAmount | customCurrency}}</dd>\n                    <dt class="dark">Open Offers</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.underOfferCount}}</dd>\n\n                    <div class="Block__splitter"></div>\n\n                    <dt class="dark">Amount Overdue</dt>\n                    <dd class="dark text-align-right text-color-red">{{loans.lenderInvestments.overdueAmount | customCurrency}}</dd>\n                    <dt class="dark">Loans Overdue</dt>\n                    <dd class="dark text-align-right">{{loans.lenderInvestments.overdueCount}}</dd>\n                </dl>\n            </div>\n        </div>\n\n        <div class="col-md-6">\n            <h4 class="drop">Investor Fund Distribution</h4>\n            <div class="Block Block--bordered">\n                <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                    <dt class="text-color-red">High</dt>\n                    <dd class="dark">{{ loans.lenderInvestments.lowFunding | customCurrency }}</dd>\n                    <dt>Medium</dt>\n                    <dd class="dark">{{ loans.lenderInvestments.midFunding | customCurrency }}</dd>\n                    <dt class="text-color-green">Low</dt>\n                    <dd class="dark">{{ loans.lenderInvestments.highFunding | customCurrency }}</dd>\n                </dl>\n            </div>\n        </div>\n    </div>\n\n    <hr />\n\n    <h4 class="drop">Active Investments</h4>\n    <div class="table-responsive">\n        <table class="table table-striped table-borderless table-hover table-condensed">\n            <thead>\n                <tr>\n                    <td class="is-filterable">Lender Loan ID</td>\n                    <td class="is-filterable">Estimated Return</td>\n                    <td class="is-filterable">Due</td>\n                    <td class="is-filterable">Risk</td>\n                    <td class="is-filterable">Duration</td>\n                    <td class="is-filterable">Loan Amount</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="loan in loans.lenderInvestments.allocationList">\n                    <td>{{loan.transactionID}}</td>\n                    <td>{{loan.EstimatedReturn}}</td>\n                    <td>{{loan.paymentDueDate}}</td>\n                    <td>{{loan.riskLevel}}</td>\n                    <td>{{loan.duration}}</td>\n                    <td>{{loan.loanAmount}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n');
            $templateCache.put('core/summary/manager/main.html', '<header-buttons title="Summary" client-type="manager" type="clients"></header-buttons>\n<div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n    <div class="row">\n        <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Attention Needed</\n        <div class="border-light">\n            <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n                <p><a href="{{ vm.summary.userInvitationExpired.value != 0 ? \'/users/invitation/expired\' : \'#\' }}">{{ vm.summary.userInvitationExpired.value }}</a> user invitations expired.</p>\n                <p><a href="{{ vm.summary.userPrimaryOutstanding.value != 0 ? \'/users/invitation/primary\' : \'#\' }}">{{ vm.summary.userPrimaryOutstanding.value }}</a> primary invitations outstanding.</p>\n                <p><a href="{{ vm.summary.invoicesOverdue.value != 0 ? \'/loans/list/overdue\' : \'#\' }}">{{ vm.summary.invoicesOverdue.value }}</a> Overdue Invoices</p>\n                <p><span>0</span> Lenders not made initital deposit</p>\n            </div>\n            <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n                <p><a href="{{ vm.summary.borrowersNotCompletedRegistration.value != 0 ? \'/clients/list/borrowers/progress\' : \'#\' }}">{{ vm.summary.borrowersNotCompletedRegistration.value }}</a> Borrowers not completed registration</p>\n                <p><a href="{{ vm.summary.lendersNotCompletedRegistration.value != 0 ? \'/clients/list/lenders/progress\' : \'#\' }}">{{ vm.summary.lendersNotCompletedRegistration.value }}</a> Lenders not completed registration</p>\n                <p><a href="{{ vm.summary.clientsNotAuthorized.value != 0 ? \'/clients/list/rejected\' : \'#\' }}">{{ vm.summary.clientsNotAuthorized.value }}</a> Client not authorised to join the service</p>\n            </div>\n            <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n                <p><span>0</span> Invoices under-payments received</p>\n            </div>\n        </div>\n        <a href="#" class="text-left">View all</a>\n    </div>\n\n    <div class="row">\n        <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n            <div class="border-light">\n                <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Current Status</p>\n                <div class="padding-left-sm padding-right-sm">\n                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                        <dt>Total Amount Deposited</dt>\n                        <dd>&pound;0</dd>\n                        <dt>Amount currently Invested</dt>\n                        <dd>&pound;0</dd>\n                        <dt>Available to Invest</dt>\n                        <dd>&pound;0</dd>\n                        <hr class="margin-x-sm" />\n                        <dt>Invoices in Progress</dt>\n                        <dd>{{ vm.summary.invoicesInProgress.value }}</dd>\n                        <dt>Pending Amount</dt>\n                        <dd>{{ vm.summary.bankingAmountPending.value | customCurrency }}</dd>\n                        <hr class="margin-x-sm" />\n                        <dt>Active Loans</dt>\n                        <dd>{{ vm.summary.loansActive.value }}</dd>\n                        <dt>Outstanding Amount</dt>\n                        <dd>{{ vm.summary.bankingAmountOutstanding.value | customCurrency }}</dd>\n                        <hr class="margin-x-sm" />\n                        <dt>Invoices Overdue</dt>\n                        <dd>{{ vm.summary.invoicesOverdue.value }}</dd>\n                        <dt>Amount Overdue</dt>\n                        <dd>{{ vm.summary.bankingAmountOverdue.value | customCurrency }}</dd>\n                    </dl>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n            <div class="border-light">\n                <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Borrowers</p>\n                <div class="padding-left-sm padding-right-sm">\n                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                        <dt>Total Active</dt>\n                        <dd><a href="/clients/manage/list/borrower/active">{{ vm.summary.borrowersTotalActive.value }}</a></dd>\n                        <dt>With invoices in Progress</dt>\n                        <dd>{{ vm.summary.borrowersWithInvoicesInProgress.value }}</dd>\n                        <dt>with cancelled invoices</dt>\n                        <dd><a href="/borrowers/invoices/cancelled">{{ vm.summary.borrowersWithCancelledInvoices.value }}</a></dd>\n                        <dt>with Active Loans</dt>\n                        <dd>{{ vm.summary.borrowersWithActiveLoans.value }}</dd>\n                        <dt>With Overdue Invoices</dt>\n                        <dd>{{ vm.summary.borrowersWithOverdueInvoices.value }}</dd>\n                        <dt>In Pre-Registration</dt>\n                        <dd>{{ vm.summary.borrowersInPreReg.value }}</dd>\n                        <dt>Registration in progress</dt>\n                        <dd>{{ vm.summary.borrowersRegInProgress.value }}</dd>\n                        <dt>Awaiting authorisation</dt>\n                        <dd>{{ vm.summary.borrowersAwaitingAuthorisation.value }}</dd>\n                    </dl>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-4 col-sm-12 col-xs-12 margin-bottom-sm">\n            <div class="border-light">\n                <p class="border-bottom-light padding-top-sm padding-bottom-sm padding-left-sm font-weight-bold">Lenders</p>\n                <div class="padding-left-sm padding-right-sm">\n                    <dl class="padding-top-sm dl-horizontal dl-horizontal--dd-right">\n                        <dt>Total Active</dt>\n                        <dd><a href="/clients/manage/list/lender/active">{{ vm.summary.lendersTotalActive.value }}</a></dd>\n                        <dt>With Active Investments</dt>\n                        <dd>0</dd>\n                        <dt>with Available Funds</dt>\n                        <dd>0</dd>\n                        <dt>with over-run Investments</dt>\n                        <dd>0</dd>\n                        <dt>In Pre-Registration</dt>\n                        <dd>{{ vm.summary.lendersInPreReg.value }}</dd>\n                        <dt>Registration in progress</dt>\n                        <dd>{{ vm.summary.lendersRegInProgress.value }}</dd>\n                        <dt>Awaiting authorisation</dt>\n                        <dd>{{ vm.summary.lendersAwaitingAuthorisation.value }}</dd>\n                    </dl>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
    angular.module('templates.invite', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('invite/company-confirm.html', '<ui-view> <!-- wrap the whole page in a ui-view so it can be switched out with the assessment page -->\n    <header-buttons sub-title="Invite" title="{{confirmTitle}}"></header-buttons>\n    <div class="container-fluid padding-lg">\n        <div class="col-md-6 col-md-offset-3 padding-y-xl bg-ppLightBlue borderless border-radius-md">\n            <form name="inviteClientForm"\n                  ng-submit="inviteClientForm.$valid && updateClient()"\n                  novalidate>\n                <div class="form-group row padding-y-lg" ng-show="!clientConfirmed">\n                    <div class="col-md-10 col-md-offset-1\n                          padding-y-lg font-size-md text-spaced-sm text-color-ppNavyBlue">\n                        Please ensure that the company selected is correct.\n                        <br />If this is the correct company, press Continue with this Company.\n                        <br />Otherwise click Not the Right Company to select another.\n                    </div>\n                </div>\n\n                <div class="form-group row margin-bottom-md">\n                    <label for="company-name"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right font-weight-bold">Company\n                        Name</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="company-name"\n                               name="company-name"\n                               class="form-control "\n                               ng-model="vm.client.clientDesc" disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row margin-bottom-md">\n                    <label for="company-number"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right font-weight-bold">Company\n                        Number</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="company-number"\n                               name="company-number"\n                               class="form-control "\n                               ng-model="vm.client.clientNumber" disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="company-address-1"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Address</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="company-address-1"\n                               name="company-address-1"\n                               class="form-control"\n                               ng-model="vm.client.clientData.address.addressLine1"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="company-address-2"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Address 2</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="company-address-2"\n                               name="company-address-2"\n                               class="form-control"\n                               ng-model="vm.client.clientData.address.addressLine2"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="address-town"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Town /\n                        City</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="address-town"\n                               name="address-town"\n                               class="form-control "\n                               ng-model="vm.client.clientData.address.town"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="address-county"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">County</label>\n\n                    <div class="col-md-6">\n                        <input type="text"\n                               id="address-county"\n                               name="address-county"\n                               class="form-control "\n                               ng-model="vm.client.clientData.address.county"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="post-code" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Post\n                        Code</label>\n\n                    <div class="col-md-6">\n                        <input type="text" id="post-code"\n                               name="address-post-code"\n                               class="form-control "\n                               ng-model="vm.client.clientData.address.postCode"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row margin-bottom-md">\n                    <label for="address-country"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Country</label>\n\n                    <div class="col-md-6">\n                        <input type="text" id="address-country"\n                               name="address-country"\n                               class="form-control"\n                               ng-model="vm.client.clientData.address.country"\n                               disabled>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="companyStatus"\n                           class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Company Status</label>\n\n                    <div class="col-sm-6">\n                        <input type="text"\n                               id="companyStatus"\n                               name="companyStatus"\n                               class="form-control"\n                               ng-model="vm.client.clientData.companyStatus"\n                               disabled>\n                    </div>\n                </div>\n\n                <!-- CONFIRM BUTTONS -->\n                <div class="form-group row" ng-show="!vm.clientConfirmed">\n                    <div class="col-md-offset-4 col-md-6">\n                        <button class="btn btn-primary btn-block" type="submit"\n                                ng-click="confirmCompany($event);"\n                                ng-show="vm.client.clientData.companyStatus == \'active\'">\n                            Continue With This Company\n                        </button>\n                        <button class="btn btn-link btn-block btn-sm" ng-click="cancelCompanyConfirmation($event)">\n                            Not The Right Company\n                        </button>\n                    </div>\n                </div>\n\n                <!-- CLIENT DETAILS FIELDS -->\n                <div ng-cloak ng-show="vm.clientConfirmed">\n                    <div ng-if="clientType === \'borrower\'" class="form-group row">\n                        <label for="details_form"\n                               class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right"></label>\n\n                        <div class="col-md-6">\n\n                            <configurable-form ng-form="inviteClientForm"\n                                               name="accountsSystem"\n                                               model-root="vm.client.clientData">\n                            </configurable-form>\n\n                        </div>\n                    </div>\n\n                    <fieldset class="form-group row"\n                         ng-class="{ \'has-error\' : inviteClientForm.emailDomain.$invalid && inviteClientForm.$submitted}">\n                        <label for="emailDomain"\n                               class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Enter the\n                            Email domain for this Client</label>\n\n                        <div class="col-md-6">\n                            <input type="text" id="emailDomain" name="emailDomain"\n                                   class="form-control "\n                                   ng-model="vm.client.emailDomain"\n                                   email-domain\n                                   required>\n\n                            <div ng-messages="inviteClientForm.emailDomain.$error"\n                                 ng-if="inviteClientForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">An E-mail domain is required.</div>\n                                <div ng-message="emailDomain">{{emailDomainInvalid}}</div>\n                            </div>\n                        </div>\n                    </fieldset>\n\n                    <div class="form-group row" ng-class="{ \'has-error\' : inviteClientForm.confirmedKycAml.$invalid && inviteClientForm.$submitted}">\n                        <label for="confirmedKycAml"\n                               class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right"></label>\n\n                        <div class="col-md-6">\n                            <label class="checkbox-inline user-output">\n                                <input id="confirmedKycAml"\n                                       name="confirmedKycAml"\n                                       type="checkbox"\n                                       ng-model="vm.client.clientData.confirmedKycAml"\n                                       required>\n                                Click here to confirm that KYC and AML checks have been completed for this client\n                            </label>\n\n                            <div ng-messages="inviteClientForm.confirmedKycAml.$error"\n                                 ng-if="inviteClientForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required.</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="form-group row">\n                        <div class="col-md-offset-4 col-md-6">\n\n                            <!-- if borrower and assessment is not complete -->\n                            <div ng-show="clientType==\'borrower\' && !vm.borrowerAssessmentComplete">\n                                <button class="btn btn-primary btn-block" ng-click="inviteClientForm.$valid && updateClient($event, \'assessment\')">\n                                    Complete Client Risk Analysis\n                                </button>\n                                <button ng-click="exit($event, inviteClientForm)"\n                                        type="button"\n                                        class="btn btn-secondary btn-lg btn-full btn-drop">Exit</button>\n                            </div>\n\n                            <!-- if borrower and assessment is complete -->\n                            <div ng-cloak ng-show="clientType==\'borrower\' && vm.borrowerAssessmentComplete">\n                                <button class="btn btn-primary btn-block" ng-click="inviteClientForm.$valid && updateClient($event, \'assessment\')">\n                                    Edit Client Risk Analysis\n                                </button>\n                                <button class="btn btn-primary btn-block" ng-click="inviteClientForm.$valid && updateClient($event, \'primary\')">\n                                    Invite Primary User\n                                </button>\n                                <button ng-click="saveAndExit($event, inviteClientForm)"\n                                        class="btn btn-secondary btn-lg btn-full btn-drop">Save and exit</button>\n                            </div>\n\n                            <!-- if lender -->\n                            <div ng-cloak ng-show="clientType==\'lender\'">\n                                <button class="btn btn-primary btn-block"\n                                        ng-click="inviteClientForm.$valid && updateClient($event, \'primary\')">\n                                    Invite a Primary User\n                                </button>\n                                <button ng-click="inviteClientForm.$valid && saveAndExit($event, inviteClientForm)"\n                                        class="btn btn-secondary btn-lg btn-full btn-drop">Save and exit</button>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</ui-view>\n\n');
            $templateCache.put('invite/company-find.html', '<header-buttons sub-title="Invite" title="{{findTitle}}"></header-buttons>\n<div class="container-fluid padding-lg">\n  <div class="row">\n      <div class="col-md-6 col-md-offset-3 padding-y-xxl padding-y-xl bg-ppLightBlue borderless border-radius-md vertical-middle">\n\n          <form name="findCompanyForm"\n                ng-submit="findCompanyForm.$valid && postFindCompany(findCompanyForm)"\n                novalidate>\n\n              <div class="form-group row">\n                  <div class="col-xs-10 col-xs-offset-1 font-size-md text-spaced-sm text-color-ppNavyBlue">\n                      <p class="text-center">Enter a Company Number and click <strong>\u2018Find Company\u2019.</strong>\n                          <br/>We will try to find the company details at companies house.</p>\n                  </div>\n              </div>\n\n              <div class="form-group row">\n                  <div class="col-xs-6 col-xs-offset-3">\n\n                      <fieldset class="padding-bottom-md"\n                                ng-class="{ \'has-error\' : findCompanyForm.number.$invalid && findCompanyForm.$submitted}">\n                          <input type="text"\n                                 name="number"\n                                 class="form-control"\n                                 title="Enter Company Number"\n                                 placeholder="Company Number"\n                                 ng-model="vm.find.number"\n                                 required\n                                 all-caps\n                                 minlength="5">\n                      </fieldset>\n\n                      <button type="submit" class="btn btn-primary btn-block">{{ buttonText || \'Find Company\' }}</button>\n\n                      <div ng-messages="findCompanyForm.number.$error"\n                           ng-if="findCompanyForm.$submitted"\n                           class="text-color-danger"\n                           role="alert">\n                          <div ng-message="required">A company number is required.</div>\n                          <div ng-message="minlength">The company number must be at least 5 digits</div>\n                      </div>\n                  </div>\n              </div>\n          </form>\n      </div>\n  </div>\n</div>\n\n');
            $templateCache.put('invite/invite-primary.html', '<!--Invite Primary Borrower-->\n<header-buttons sub-title="Invite" title="{{primaryTitle}}"></header-buttons>\n<div class="container-fluid padding-lg">\n  <div class="section">\n      <form name="invitePrimaryForm"\n            class="form"\n            ng-submit="invitePrimaryForm.$valid && postInvitePrimary(invitePrimaryForm)"\n            novalidate>\n\n          <h4>Setup an Invitation for a Primary User</h4>\n          <br/>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : invitePrimaryForm.clientName.$invalid && invitePrimaryForm.$submitted }">\n              <label for="clientName" class="col-sm-4 control-label">Client Name</label>\n\n              <div class="col-sm-6">\n                  <input type="text"\n                         id="clientName"\n                         name="clientName"\n                         placeholder="Client Name"\n                         class="form-control"\n                         ng-model="vm.client.clientDesc"\n                         disabled\n                         required>\n\n                  <div ng-messages="invitePrimaryForm.clientName.$error"\n                       ng-if="invitePrimaryForm.clientName.$invalid && invitePrimaryForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : invitePrimaryForm.firstName.$invalid && invitePrimaryForm.$submitted }">\n              <label for="firstName" class="col-sm-4 control-label">First Name</label>\n\n              <div class="col-sm-6">\n                  <input type="text"\n                         id="firstName"\n                         name="firstName"\n                         placeholder="First Name"\n                         class="form-control"\n                         ng-model="vm.primaryUser.firstName" required caps-first>\n                  <div ng-messages="invitePrimaryForm.firstName.$error"\n                       ng-if="invitePrimaryForm.firstName.$invalid && invitePrimaryForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : invitePrimaryForm.lastName.$invalid && invitePrimaryForm.$submitted }">\n              <label for="lastName" class="col-sm-4 control-label">Last Name</label>\n\n              <div class="col-sm-6">\n                  <input type="text"\n                         id="lastName"\n                         name="lastName"\n                         placeholder="Last Name"\n                         class="form-control "\n                         ng-model="vm.primaryUser.lastName" required caps-first>\n                  <div ng-messages="invitePrimaryForm.lastName.$error"\n                       ng-if="invitePrimaryForm.lastName.$invalid && invitePrimaryForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : invitePrimaryForm.email.$invalid && invitePrimaryForm.$submitted }">\n              <label for="email" class="col-sm-4 control-label">Client Email Address</label>\n              <div class="col-sm-6">\n                  <div class="input-group">\n                      <input type="text"\n                             id="email"\n                             name="email"\n                             placeholder="Client Email Address"\n                             class="form-control "\n                             ng-model="vm.primaryUser.emailUsername"\n                             required>\n                      <div class="input-group-addon">@</div>\n                      <input type="text"\n                             class="form-control"\n                             ng-model="vm.client.emailDomain"\n                             disabled>\n                  </div>\n                  <div ng-messages="invitePrimaryForm.email.$error"\n                       ng-if="invitePrimaryForm.email.$invalid && invitePrimaryForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                      <div ng-message="email">Must be a valid email</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row">\n              <label class="col-sm-4 control-label"></label>\n\n              <div class="col-sm-6 user-output">\n                  <span>The role for this primary user will be set to Administrator</span>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row">\n              <label for="send-invitation" class="col-sm-4 control-label"> </label>\n\n              <div class="col-sm-6 reg-buttons">\n                  <button type="button" class="btn btn-default" ng-click="cancelInvitePrimary($event)">\n                      Cancel\n                  </button>\n                  <button id="send-invitation" class="btn btn-primary" type="submit">\n                      Send Invitation\n                  </button>\n              </div>\n          </fieldset>\n      </form>\n  </div>\n</div>');
            $templateCache.put('invite/borrower/assessment.html', '<header-buttons sub-title="Invite" title="{{assessmentTitle}}"></header-buttons>\n<div class="container-fluid padding-lg">\n    <div class="row margin-bottom-md">\n        <div class="col-md-12">\n            <p class="text-center">Tell us a little bit about the client and their customers</p>\n        </div>\n    </div>\n\n    <div class="row margin-bottom-md">\n        <div class="col-md-12">\n\n            <form name="managerAssessmentForm"\n                  ng-submit="formValidator.isValid(managerAssessmentForm) && putAssessment(managerAssessmentForm)"\n                novalidate>\n\n                <configurable-form ng-form="managerAssessmentForm"\n                                   name="borrowerManagerAssessment"\n                                   model-root="vm.client.clientData.managerAssessment">\n                </configurable-form>\n\n                <div>\n                    <p><strong>How would you rate the business as a potential Borrower on the Peerpay service?\n                        The higher the score the less likely that this client will incur overdue invoices.</strong></p>\n\n                    <div class="margin-bottom-md row">\n                        <label class="col-sm-4">Borrower rating</label>\n                        <star-rating ng-model="vm.client.clientData.managerAssessment.borrowerRating"\n                                     readonly="vm.ratingPrevent"\n                                     on-rating-select="rate(rating)">\n                        </star-rating>\n                        <div class="col-sm-4">\n                            <label class="checkbox-inline">\n                                <input type="checkbox" ng-click="noRating()" ng-model="vm.ratingPrevent" /> Can\'t rate\n                            </label>\n                        </div>\n                        <div\n                           class="text-color-danger col-md-12 col-sm-12"\n                           role="alert">\n                          <p ng-show="ratingRequired">Borrower Rating is required</p>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="invite-primary" class="col-xs-2 control-label"> </label>\n                    <div class="col-xs-8">\n                        <button type="button" class="btn btn-default" ng-click="cancelAssessment($event)">\n                            Cancel\n                        </button>\n                        <button class="btn btn-primary" type="submit">\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>');
            $templateCache.put('invite/lender/individual.html', '<header-buttons sub-title="Invite" title="{{individualTitle}}"></header-buttons>\n<div class="container-fluid padding-lg">\n  <div class="col-md-8 col-md-offset-2 padding-y-xl bg-ppLightBlue borderless border-radius-md">\n      <form name="lenderIndividualForm"\n            ng-submit="lenderIndividualForm.$valid && updateClient($event, \'summary\')"\n            novalidate>\n          <div class="form-group row padding-y-lg">\n              <div class="col-md-10 col-md-offset-1\n                          padding-y-lg font-size-md text-spaced-sm text-color-ppNavyBlue">\n                  Please complete the following details.\n              </div>\n          </div>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : lenderIndividualForm.firstName.$invalid && lenderIndividualForm.$submitted }">\n              <label for="firstName" class="col-md-3 form-control-label text-spaced-xs text-xs-right">First Name</label>\n\n              <div class="col-md-9">\n                  <input type="text"\n                         id="firstName"\n                         name="firstName"\n                         placeholder="First Name"\n                         class="form-control"\n                         ng-model="vm.client.firstName" required>\n                  <div ng-messages="lenderIndividualForm.firstName.$error"\n                       ng-if="lenderIndividualForm.firstName.$invalid && lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : lenderIndividualForm.lastName.$invalid && lenderIndividualForm.$submitted }">\n              <label for="lastName" class="col-md-3 form-control-label text-spaced-xs text-xs-right">Last Name</label>\n\n              <div class="col-md-9">\n                  <input type="text"\n                         id="lastName"\n                         name="lastName"\n                         placeholder="Last Name"\n                         class="form-control "\n                         ng-model="vm.client.lastName"\n                         required>\n                  <div ng-messages="lenderIndividualForm.lastName.$error"\n                       ng-if="lenderIndividualForm.lastName.$invalid && lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row"\n                    ng-class="{ \'has-error\' : lenderIndividualForm.email.$invalid && lenderIndividualForm.$submitted }">\n              <label for="email" class="col-md-3 form-control-label text-spaced-xs text-xs-right">Email Address</label>\n              <div class="col-md-9">\n                  <div class="input-group">\n                      <input type="email"\n                             id="email"\n                             name="email"\n                             placeholder="Email Address"\n                             class="form-control "\n                             ng-model="vm.client.email"\n                             ng-pattern="/^\\S+@\\S+\\.\\S+$/"\n                             required>\n                  </div>\n                  <div ng-messages="lenderIndividualForm.email.$error"\n                       ng-if="lenderIndividualForm.email.$invalid && lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required </div>\n                      <div ng-message="email">Must be a valid email</div>\n                      <div ng-message="pattern">Must be a valid email</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.companyNumber.$invalid && lenderIndividualForm.$submitted}">\n              <label for="clientNumber" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">NI Number</label>\n              <div class="col-md-9">\n                  <input type="text"\n                         id="clientNumber"\n                         name="clientNumber"\n                         placeholder="NI number"\n                         class="form-control "\n                         ng-model="vm.client.clientNumber"\n                         ng-pattern="/^\\s*([a-zA-Z]){2}\\s*([0-9]){1}\\s*([0-9]){1}\\s*([0-9]){1}\\s*([0-9]){1}\\s*([0-9]){1}\\s*([0-9]){1}\\s*([a-zA-Z]){1}?$/"\n                         all-caps\n                         required>\n                  <div ng-messages="lenderIndividualForm.clientNumber.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The NI number is required.</div>\n                      <div ng-message="pattern">Must be a valid UK national insurance number</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.addressLine1.$invalid && lenderIndividualForm.$submitted}">\n              <label for="addressLine1" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Address</label>\n              <div class="col-md-9">\n                  <input type="text" id="addressLine1" name="addressLine1"\n                         placeholder="address line 1"\n                         class="form-control "\n                         ng-model="vm.client.clientData.address.addressLine1"\n                         required>\n                  <div ng-messages="lenderIndividualForm.addressLine1.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The address line is required.</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.addressLine2.$invalid && lenderIndividualForm.$submitted}">\n              <label for="addressLine2" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Address 2</label>\n              <div class="col-md-9">\n                  <input type="text" id="addressLine2" name="addressLine2"\n                         placeholder="address line 2"\n                         class="form-control"\n                         ng-model="vm.client.clientData.address.addressLine2">\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.town.$invalid && lenderIndividualForm.$submitted}">\n              <label for="town" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Town / City</label>\n              <div class="col-md-9">\n                  <input type="text" id="town" name="town"\n                         placeholder="town / city"\n                         class="form-control "\n                         ng-model="vm.client.clientData.address.town"\n                         required>\n                  <div ng-messages="lenderIndividualForm.town.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The town/city is required.</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.county.$invalid && lenderIndividualForm.$submitted}">\n              <label for="county" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">County</label>\n              <div class="col-md-9">\n                  <input type="text" id="county" name="county"\n                         placeholder="county"\n                         class="form-control "\n                         ng-model="vm.client.clientData.address.county"\n                         required>\n                  <div ng-messages="lenderIndividualForm.county.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The county is required.</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row" ng-class="{ \'has-error\' : lenderIndividualForm.postCode.$invalid && lenderIndividualForm.$submitted}">\n              <label for="postCode" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Post Code</label>\n              <div class="col-md-9">\n                  <input type="text" id="postCode" name="postCode"\n                         placeholder="post code"\n                         class="form-control "\n                         ng-model="vm.client.clientData.address.postCode"\n                         ng-pattern="/[A-Z]{1,2}[0-9][0-9A-Z]?\\s?[0-9][A-Z]{2}/gi"\n                         all-caps\n                         required>\n                  <div ng-messages="lenderIndividualForm.postCode.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The post code is required.</div>\n                      <div ng-message="pattern">Must be a valid UK post code</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row margin-bottom-md" ng-class="{ \'has-error\' : lenderIndividualForm.country.$invalid && lenderIndividualForm.$submitted}">\n              <label for="country" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right">Country</label>\n              <div class="col-md-9">\n                  <input type="text" id="country" name="country"\n                         placeholder="country"\n                         class="form-control "\n                         ng-model="vm.client.clientData.address.country"\n                         required>\n                  <div ng-messages="lenderIndividualForm.country.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">The country is required.</div>\n                  </div>\n              </div>\n          </fieldset>\n\n\n          <fieldset class="form-group row margin-bottom-md">\n              <label for="confirmedKycAml" class="col-md-3 col-md-offset-1 form-control-label text-spaced-xs text-xs-right"></label>\n              <div class="col-md-9">\n                  <label class="checkbox-inline user-output">\n                      <input id="confirmedKycAml"\n                             name="confirmedKycAml"\n                             type="checkbox"\n                             ng-model="vm.client.clientData.confirmedKycAml"\n                             required>\n                      Click here to confirm that KYC and AML checks have been completed for this client\n                  </label>\n                  <div ng-messages="lenderIndividualForm.confirmedKycAml.$error"\n                       ng-if="lenderIndividualForm.$submitted"\n                       class="text-color-danger"\n                       role="alert">\n                      <div ng-message="required">* Required.</div>\n                  </div>\n              </div>\n          </fieldset>\n\n          <fieldset class="form-group row">\n              <label class="col-md-3 control-label"></label>\n\n              <div class="col-md-9 user-output">\n                  <span>The role for this primary user will be set to Administrator</span>\n              </div>\n          </fieldset>\n\n          <!-- CONFIRM BUTTONS -->\n          <fieldset class="form-group row">\n              <label for="send-invitation" class="col-md-3 control-label"> </label>\n\n              <div class="col-md-9 reg-buttons">\n                  <button type="button" class="btn btn-default" ng-click="exit($event, lenderIndividualForm)">\n                      Cancel\n                  </button>\n                  <button type="submit" id="send-invitation" class="btn btn-primary">\n                      Send Invitation\n                  </button>\n              </div>\n          </fieldset>\n\n      </form>\n\n  </div>\n</div>');
        }
    ]);
    angular.module('templates.invoices', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('invoices/invoices-inprogress.html', '<div class="container-fluid padding-lg">\n    <header-buttons sub-title="Invoices" title="Invoices in progress"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer</td>\n                                <td>Invoice Net Value</td>\n                                <td>Due Date</td>\n                                <td>Submitted On</td>\n                                <td>Loan Amount</td>\n                                <td class="hidden-sm-down">Estimated Fees</td>\n                                <td>Status</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.invoicesInProgress">\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceNetValue | customCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate.slice(0, 10) | date: \'dd MMM yyyy\'}}\n                                </td>\n                                <td>\n                                    {{invoice.submittedOn}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceStatus}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('invoices/invoices-overdue.html', '<div class="container-fluid padding-lg">\n    <header-buttons sub-title="Invoices" title="Overdue Invoices"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Client Name</td>\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer</td>\n                                <td>Loan Date</td>\n                                <td>Loan Amount</td>\n                                <td class="hidden-sm-down">Estimated Fees</td>\n                                <td>Payment Due</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.invoicesOverdue | filterMultiObject:{\'overdue\': \'1\'}">\n                                <td>\n                                    {{invoice.client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
    angular.module('templates.lender', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('lender/investments/manage.html', '<div class="container-fluid padding-lg">\n\n    <header-buttons title="Investment Management" client-type="lender"></header-buttons>\n\n\n    <div class="row padding-y-xl">\n        <div class="col-md-8 col-md-offset-2 text-center">\n            <div class="col-md-4">\n                <info-label value="value" description="Total capital"></info-label>\n            </div>\n            <div class="col-md-4">\n                <info-label value="value" description="Currently invested"></info-label>\n            </div>\n            <div class="col-md-4">\n                <info-label value="value" description="Available to invest"></info-label>\n            </div>\n        </div>\n    </div>\n\n    <form class="form-inline">\n\n        <div class="row padding-y-xl">\n            <div class="col-md-10 col-md-offset-1">\n\n                <h2 class="padding-bottom-lg text-color-ppNavyBlue">Manage funds and earnings</h2>\n\n                <div class="textbox height-auto">\n                    <h4>Held funds (previously invested): <span class="text-color-ppNavyBlue">\xA3130,000</span></h4>\n\n                    <fieldset class="form-group row padding-y-xl">\n\n                        <div class="col-sm-3">\n                            <label for="heldFunds" class="form-control-label">Enter the amount to reinvest</label>\n                        </div>\n\n                        <div class="col-md-3">\n                            <input class="form-control" type="number" id="heldFunds"/>\n                        </div>\n                        <div class="col-md-3">\n                            <button class="btn btn-primary">Reinvest held funds</button>\n                        </div>\n                        <div class="col-md-3 checkbox">\n                            <label class="form-control-label">\n                                <input type="checkbox"> Always reinvest held funds\n                            </label>\n                        </div>\n\n                    </fieldset>\n\n\n                    <h4>Earnings to date <span class="text-color-ppNavyBlue">\xA3130,000</span></h4>\n\n                    <fieldset class="form-group row padding-y-xl">\n\n                        <div class="col-sm-3">\n                            <label for="earnings" class="form-control-label">Enter the amount to reinvest</label>\n                        </div>\n\n                        <div class="col-md-3">\n                            <input class="form-control" type="number" id="earnings"/>\n                        </div>\n                        <div class="col-md-3">\n                            <button class="btn btn-primary">Reinvest earnings</button>\n                        </div>\n                        <div class="col-md-3 checkbox">\n                            <label class="form-control-label">\n                                <input type="checkbox"> Always reinvest earnings\n                            </label>\n                        </div>\n\n                    </fieldset>\n\n                </div>\n            </div>\n        </div>\n\n        <div class="row padding-y-xl">\n            <div class="col-md-10 col-md-offset-1">\n\n                <h2 class="padding-bottom-lg text-color-ppNavyBlue">Withdraw investments and earnings</h2>\n\n                <div class="textbox height-auto">\n                    <h4>Capital available <span class="text-color-ppNavyBlue">\xA3130,000</span></h4>\n\n                    <fieldset class="form-group row padding-y-xl">\n                        <div class="col-sm-3">\n                            <label for="fundsWithdrawl" class="form-control-label">Enter the amount to withdraw</label>\n                        </div>\n\n                        <div class="col-md-3">\n                            <input class="form-control" type="number" id="fundsWithdrawl"/>\n                        </div>\n                        <div class="col-md-3">\n                            <button class="btn btn-primary">Withdraw funds</button>\n                        </div>\n                        <div class="col-md-3"></div>\n\n                    </fieldset>\n\n                    <h4>Earnings available <span class="text-color-ppNavyBlue">\xA3130,000</span></h4>\n\n                    <fieldset class="form-group row padding-y-xl">\n                        <div class="col-sm-3">\n                            <label for="earningsWithdrawl" class="form-control-label">Enter the amount to withdraw</label>\n                        </div>\n\n                        <div class="col-md-3">\n                            <input class="form-control" type="number" id="earningsWithdrawl"/>\n                        </div>\n                        <div class="col-md-3">\n                            <button class="btn btn-primary">Withdraw earnings</button>\n                        </div>\n                        <div class="col-md-3"></div>\n\n                    </fieldset>\n\n                </div>\n            </div>\n        </div>\n\n    </form>\n</div>\n');
        }
    ]);
    angular.module('templates.loans', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('loans/loans-confirmed.html', '<div class="container-fluid padding-lg">\n    <header-buttons sub-title="Loans" title="Loans Confirmed"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer Name</td>\n                                <td>Invoice Net Value</td>\n                                <td>Due Date</td>\n                                <td>Loan Offer Amount</td>\n                                <td class="hidden-sm-down">Estimated Fees</td>\n                                <td>Expires On</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.loansAccepted">\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceNetValue | customCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.expiresOnDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('loans/loans-overdue.html', '<div class="container-fluid padding-lg">\n    <header-buttons sub-title="Loans" title="Overdue Invoices"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Client Name</td>\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer Name</td>\n                                <td>Loan Date</td>\n                                <td>Loan Amount</td>\n                                <td class="hidden-sm-down">Estimated Fees</td>\n                                <td>Payment Due</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.loansActive | filterMultiObject:{\'overdue\': \'1\'}">\n                                <td>\n                                    {{invoice.client.clientDesc}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('loans/loans-underpaid.html', '<div class="container-fluid padding-lg">\n    <header-buttons sub-title="Loans"  title="Underpaid Invoices"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <div class="table-responsive margin-bottom-sm">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                            <tr class="capitalise font-weight-bold">\n                                <td>Invoice Number</td>\n                                <td class="hidden-sm-down">Payer Name</td>\n                                <td>Loan Amount</td>\n                                <td>Loan Date</td>\n                                <td>Amount Paid</td>\n                                <td>Date Paid</td>\n                                <td class="hidden-sm-down">Underpaid Amount</td>\n                                <td>Action</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="invoice in vm.index | filterMultiObject:{\'invoiceStatus\': \'underpaid\'}">\n                                <td>\n                                    {{invoice.invoiceLabel}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.customerReference}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.dueDate}}\n                                </td>\n                                <td>\n                                    {{invoice.loanAmount | customCurrency}}\n                                </td>\n                                <td class="hidden-sm-down">\n                                    {{invoice.feesAmount | feesCurrency}}\n                                </td>\n                                <td>\n                                    {{invoice.invoiceStatus}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
    angular.module('templates.register', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('register/accept.html', '\n<section class="container container--small">\n    <img src="/img/defaults/logo.jpg" class="logo bold">\n    <h1>{{vm.firstName + \' \' + vm.lastName}}, welcome to the PeerPay service, brought to you by {{vm.invitingUser.clientDesc}}</h1>\n    <p>By joining the {{vm.invitingUser.clientDesc}} community, {{vm.clientDesc}}, will enjoy opportunity for growth within a secure community, peace of mind and a dedicated team to answer any questions you may have.</p>\n    <button ng-click="acceptInvitation()" class="btn btn-primary btn-lg btn-full">Accept Invite</button>\n    <p class="margin-top-md">For security reasons this link will expire after 3 days, once expired you will need to be sent a new invite.</p>\n\n    <div class="footer-minimal">\n        PeerPay Ltd<br>\n        Registered in England & Wales<br>\n        Company Number 9359297<br>\n        5th Floor (744-750), The Salisbury, Salisbury House, London Wall, London, EC2M 5QQ\n    </div>\n</section>\n');
            $templateCache.put('register/details.html', '<div class="container container--small">\n    <h1 class="drop hang">Create your account on PeerPay</h1>\n    <form name="registerDetailsForm" ng-submit="registerDetailsForm.$valid && signup(registerDetailsForm)" novalidate>\n        <!-- firstName -->\n        <div class="row">\n            <div class="col-md-6">\n                <fieldset>\n                    <div class="form-group">\n                        <label for="firstName" class="form-control-label">First Name</label>\n                        <input type="text"\n                               name="firstName"\n                               class="form-control"\n                               id="firstName"\n                               ng-model="vm.firstName"\n                               placeholder="First Name"\n                               required>\n                        <div ng-messages="registerDetailsForm.firstName.$error"\n                             ng-if="registerDetailsForm.$dirty"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="required">* Required </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n\n            <div class="col-md-6">\n                <fieldset>\n                    <div class="form-group">\n                        <label for="lastName" class="form-control-label">Last Name</label>\n                        <input type="text" name="lastName"\n                               class="form-control"\n                               id="lastName"\n                               ng-model="vm.lastName"\n                               placeholder="Last Name"\n                               required>\n                        <div ng-messages="registerDetailsForm.lastName.$error"\n                             ng-if="registerDetailsForm.$dirty"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="required">* Required </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n\n        <fieldset>\n            <div class="form-group">\n                <label for="email" class="form-control-label">E-mail</label>\n                <input type="text"\n                       name="email"\n                       class="form-control"\n                       id="email"\n                       ng-model="vm.email"\n                       placeholder="Email Address"\n                       disabled\n                       required>\n            </div>\n        </fieldset>\n\n        <!-- username -->\n        <fieldset ng-class="{ \'has-error\' : registerDetailsForm.username.$invalid && registerDetailsForm.$dirty}">\n            <div class="form-group">\n                <label for="username" class="form-control-label">Username</label>\n                <input type="text"\n                       name="username"\n                       class="form-control"\n                       id="username"\n                       ng-model="vm.username"\n                       placeholder="Username"\n                       no-whitespace\n                       required>\n                <div ng-messages="registerDetailsForm.username.$error"\n                     ng-if="registerDetailsForm.$dirty"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">* Required </div>\n                </div>\n            </div>\n        </fieldset>\n\n        <fieldset>\n            <div class="form-group">\n                <label for="password" class="form-control-label">Password</label>\n                <div class="form-group">\n                    <input type="password"\n                           name="password"\n                           class="form-control"\n                           id="password"\n                           placeholder="Secure Password"\n                           ng-model="vm.password"\n                           minlength="8"\n                           maxlength="16"\n                           ng-pattern="/^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{8,16}$/"\n                           required>\n                    <div ng-messages="registerDetailsForm.password.$error"\n                         ng-if="registerDetailsForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">* Required </div>\n                        <div ng-message="minlength">The password confirmation field must be at least 8 characters </div>\n                        <div ng-message="maxlength">The password confirmation field should not be more than 16 characters </div>\n                        <div ng-message="pattern">You must include one uppercase, one number and one special symbol</div>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <input type="password"\n                           name="passwordConfirmation"\n                           class="form-control"\n                           id="passwordConfirmation"\n                           placeholder="Confirm Password"\n                           ng-model="vm.passwordConfirmation"\n                           minlength="8"\n                           maxlength="16"\n                           ng-pattern="/^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{8,16}$/"\n                           required\n                           compare-to="vm.password">\n                    <div ng-messages="registerDetailsForm.passwordConfirmation.$error"\n                         ng-if="registerDetailsForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">* Required </div>\n                        <div ng-message="minlength">The password confirmation field must be at least 8 characters </div>\n                        <div ng-message="maxlength">The password confirmation field should not be more than 16 characters </div>\n                        <div ng-message="pattern">You must include one uppercase, one number and one special symbol</div>\n                        <div ng-message="compareTo">Must match the previous entry</div>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n\n        <!-- accept terms -->\n        <button class="btn btn-primary btn-lg btn-full btn-drop">Continue</button>\n\n    </form>\n</div>\n');
            $templateCache.put('register/email.html', '<div class="container container--small">\n    <div class="row">\n        <div class="col-md-12">\n            <h1 class="drop">Email Confirmation Code</h1>\n            <p>We\u2019ve sent {{ vm.email }} a 12 digit confirmation code, it will expire in 3 days.</p>\n\n            <form name="activateEmailForm" class="form-inline"\n                    ng-submit="activateEmailForm.$valid && postActivateEmail(activateEmailForm)"\n                    novalidate>\n\n                <fieldset class="form-group row"\n                          ng-class="{ \'has-error\' : activateEmailForm.email.$invalid && activateEmailForm.$submitted}">\n                    <div class="col-md-12">\n                        <div class="form-group">\n                            <div class="input-group inline-inputs" id="email">\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey1"\n                                       name="valKey1"\n                                       minlength="3"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.emailToken.secret.a"\n                                       tabindex="1"\n                                       auto-focus\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey2"\n                                       name="valKey2"\n                                       minlength="3"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.emailToken.secret.b"\n                                       tabindex="2"\n                                       auto-focus\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey3"\n                                       name="valKey3"\n                                       minlength="3"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.emailToken.secret.c"\n                                       tabindex="3"\n                                       auto-focus\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey4"\n                                       name="valKey4"\n                                       minlength="3"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.emailToken.secret.d"\n                                       tabindex="4"\n                                       auto-focus\n                                       required>\n                            </div>\n                        </div>\n\n                        <div ng-show="(activateEmailForm.valKey1.$invalid ||\n                                activateEmailForm.valKey2.$invalid ||\n                                activateEmailForm.valKey3.$invalid ||\n                                activateEmailForm.valKey4.$invalid)\n                                && activateEmailForm.$submitted"\n                             class="text-color-danger"\n                             role="alert">\n                            <p>Please input the 12 digit code we emailed you.</p>\n                        </div>\n                    </div>\n                </fieldset>\n\n                <div class="full-width text-center padding-top-xl"><a ng-click="resendToken($event);">Resend token</a></div>\n                <submit-button loading="loadingEmailToken" text="Continue"></submit-button>\n\n            </form>\n\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('register/mobile.html', '<div class="container container--small">\n    <div class="row margin-y-lg">\n        <div class="col-xs-12">\n\n            <!-- mobile number -->\n            <div ng-show="!mobileConfirmed">\n                <form name="activateMobileForm" class="form-inline"\n                      ng-submit="activateMobileForm.$valid && getMobileToken(activateMobileForm)"\n                      novalidate>\n                      <h1 class="drop">Phone Confirmation Code</h1>\n                      <p>Please enter your mobile phone number, we\u2019ll send a confimation code, no spam. It will expire in 3 minutes.</p>\n                    <fieldset ng-class="{ \'has-error\' : activateMobileForm.mobile_number.$invalid && activateMobileForm.$submitted}">\n                            <div class="form-group">\n                                <label class="form-control-label" for="mobile_number">Mobile Number</label>\n                                <div class="input-group">\n                                    <input name="mobile_number"\n                                           id="mobile_number"\n                                           type="text"\n                                           class="form-control"\n                                           ng-model="vm.mobile"\n                                           placeholder="mobile number"\n                                           phone-number\n                                           required>\n                                   <div ng-messages="activateMobileForm.mobile_number.$error"\n                                        ng-if="activateMobileForm.$submitted && activateMobileForm.mobile_number.$invalid"\n                                        class="text-color-danger"\n                                        role="alert">\n                                       <div ng-message="required">* Required </div>\n                                       <div ng-pattern="mobile">Must be a valid UK mobile phone</div>\n                                   </div>\n                                </div>\n                            </div>\n                    </fieldset>\n                    <submit-button loading="loadingMobileToken" text="Send Code"></submit-button>\n                </form>\n            </div>\n\n            <!-- mobile secret -->\n            <div ng-show="mobileConfirmed">\n                <h1 class="drop">Phone Confirmation Code</h1>\n                <p>Please enter your mobile phone number, we\u2019ll send a confimation code, no spam. It will expire in 3 minutes.</p>\n                <form name="postMobileActivationForm" class="form-inline"\n                      ng-submit="postMobileActivationForm.$valid && postActivateMobile(postMobileActivationForm)"\n                      novalidate>\n                    <fieldset ng-class="{ \'has-error\' : postMobileActivationForm.mobile_secret.$invalid && postMobileActivationForm.$submitted}">\n                        <div class="form-group">\n                            <label class="form-control-label">Mobile Number</label>\n                            <input type="text" class="form-control" disabled="disabled" ng-model="vm.mobile">\n                        </div>\n\n                        <div class="form-group drop">\n                            <label class="form-control-label">Confirmation Code</label>\n                            <div class="input-group inline-inputs" id="mobile_secret">\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey1"\n                                       name="valKey1"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.mobileToken.secret.a"\n                                       auto-focus\n                                       tabindex="1"\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey2"\n                                       name="valKey2"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.mobileToken.secret.b"\n                                       auto-focus\n                                       tabindex="2"\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey3"\n                                       name="valKey3"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.mobileToken.secret.c"\n                                       auto-focus\n                                       tabindex="3"\n                                       required>\n                                <input type="text"\n                                       class="form-control"\n                                       id="valKey4"\n                                       name="valKey4"\n                                       maxlength="3"\n                                       placeholder="XXX"\n                                       ng-model="vm.mobileToken.secret.d"\n                                       auto-focus\n                                       tabindex="4"\n                                       required>\n                            </div>\n\n                            <div ng-show="(postMobileActivationForm.valKey1.$invalid ||\n                                postMobileActivationForm.valKey2.$invalid ||\n                                postMobileActivationForm.valKey3.$invalid ||\n                                postMobileActivationForm.valKey4.$invalid)\n                                &&  postMobileActivationForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <p>Please input the the 12 digit code we texted you. </p>\n                            </div>\n                        </div>\n                    </fieldset>\n                    <div class="full-width text-center padding-top-xl"><a ng-click="resendToken($event);">Resend token</a></div>\n                    <submit-button loading="loadingMobileToken" text="Continue and Finish"></submit-button>\n\n                </form>\n            </div>\n\n        </div>\n    </div>\n</div>\n');
        }
    ]);
    angular.module('templates.setup', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('setup/account-confirm.html', '<div>\n    <div class="form-group row">\n        <div class="col-md-8 col-md-offset-2">\n            <div class="card card-block">\n                <h5 class="card-title text-xs-center">Confirm Test Deposit</h5>\n                <p class="card-text">You are about to send a test payment of 0.01 to your bank account. Please click Confirm Test Deposit to continue</p>\n                <div class="text-xs-center">\n                    <button type="button"\n                            ng-click="backToStart($event)"\n                            class="btn btn-secondary btn-width-lg margin-bottom-sm">Cancel</button>\n                    <button type="submit"\n                            ng-disabled="loadingAuthentication"\n                            ng-click="bankAuthForm.$valid && postBankAuthentication($event, bankAuthForm)"\n                            class="btn btn-secondary btn-width-lg">{{ buttonText || \'Confirm Deposit\' }}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('setup/account-info.html', '<!-- confirm account -->\n<div>\n    <div class="form-group row">\n        <div class="col-md-12">\n\n            <div class="card card-block">\n                <h5 class="card-title text-xs-center">Verify Bank Account</h5>\n\n                <p class="card-text smaller">\n                    Now We need to verify that this bank account belongs to you. This is done by a test deposit.\n                    A small deposit will be made into your bank account, which you should be able to see within 2 hours.\n                    Follow the steps below to create the deposit amount and enter the token.\n\n                    <ol class="ordered-list">\n                        <li>Click Verify My Bank Account</li>\n                        <li>Check your bank statement and search for a deposit of 0.01 from --PeerPay service name--</li>\n                        <li>Note the payment reference associated with the deposit</li>\n                        <li>Return to your PeerPay account</li>\n                        <li>Enter the 16 character token part of the payment reference in the field provided and click Done</li>\n                    </ol>\n                </p>\n                <div class="text-xs-center">\n                    <a ng-click="confirmAccount($event)" class="btn btn-primary btn-width-lg">Verify Account</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/account-sent.html', '<div>\n    <div class="form-group row">\n        <div class="col-md-8 col-md-offset-2">\n            <div class="card card-block card-inverse card-success">\n                <h5 class="card-title text-xs-center">Account Setup Complete</h5>\n                <p class="card-text">Your Test deposit has been sent to your bank account\n                    When you have seen the deposit in your account return to the Manage my Bank Account page to complete your setup</p>\n                <div class="text-xs-center">\n                    <a ng-click="backToManage()" class="btn btn-secondary btn-width-lg">OK</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('setup/account-success.html', '<div class="col-md-6 col-md-offset-3 padding-lg bg-ppLightBlue borderless border-radius-md">\n\n    <div class="form-group row">\n        <div class="col-md-6 col-md-offset-4">\n\n            <div class="card card-block card-inverse card-success">\n                <h5 class="card-title text-xs-center">Account Verified</h5>\n                <p class="card-text">\n                    The reference that you entered is a match!<br/>\n                    Your account has been authenticated.<br/>\n                    Your client details have automatically been submitted to\n                    PeerPay for authorisation.<br/>\n                    Once you receive your authorisation confirmation you\n                    can start using the \'PeerPay\' system.\n                </p>\n                <p class="text-xs-center">\n                    <a ng-click="complete()" class="btn btn-secondary btn-width-lg">OK</a>\n                </p>\n\n            </div>\n\n        </div>\n    </div>\n\n</div>\n');
            $templateCache.put('setup/account-verify.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <form name="bankCheckForm" ng-submit="bankCheckForm.$valid && postBankVerification(bankCheckForm)" novalidate>\n\n            <div class="col-md-8">\n                <h1>Re-enter your bank account details</h1>\n                <p>Re-enter your bank account details and enter the token from your authentication deposit to confirm your bank account.</p>\n\n                <label for="account-name" class="form-control-label">Account Name</label>\n                <input type="text" id="account-name" name="accountName" ng-model="vm.accounts.verify.accountName" placeholder="Bank Account Name" class="form-control" tabindex="1" required>\n                <div ng-messages="bankCheckForm.accountName.$error" ng-if="bankCheckForm.$submitted" class="text-color-danger" role="alert">\n                    <div ng-message="required">* Required </div>\n                </div>\n\n\n                <label for="account-number" class="form-control-label">Account Number</label>\n                <input type="text" id="account-number" name="accountNumber" ng-model="vm.accounts.verify.accountNum" placeholder="8 Digit Account Number" tabindex="2" class="form-control" required>\n                <div ng-messages="bankCheckForm.accountNumber.$error"\n                     ng-if="bankCheckForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <div ng-message="required">* Required </div>\n                </div>\n\n\n                <label for="sortcode" class="form-control-label">Sort Code</label>\n                <div class="form-group inline-inputs">\n                    <input type="text"  class="form-control" id="valKey1" name="sortCode1" maxlength="2" placeholder="XX" ng-model="vm.accounts.verify.sortCode.a" auto-focus tabindex="3" required>\n                    <input type="text" class="form-control" id="valKey2" name="sortCode2" maxlength="2" placeholder="XX" ng-model="vm.accounts.verify.sortCode.b" auto-focus tabindex="4" required>\n                    <input type="text" class="form-control" id="valKey3" name="sortCode3" maxlength="2" placeholder="XX" ng-model="vm.accounts.verify.sortCode.c" auto-focus tabindex="5" last-tab="true" required>\n                </div>\n\n                <div ng-show="(bankCheckForm.sortCode1.$invalid ||\n                        bankCheckForm.sortCode2.$invalid ||\n                        bankCheckForm.sortCode3.$invalid) && bankCheckForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <p>Please provide your sortcode </p>\n                </div>\n\n\n                <label for="account-secret" class="form-control-label">Verification token</label>\n                <div class="form-group inline-inputs">\n                    <input type="text" class="form-control" id="valKey1" name="valKey1" maxlength="3" placeholder="XXX" ng-model="vm.accounts.verify.secret.a" tabindex="6" auto-focus required>\n                    <input type="text" class="form-control" id="valKey2" name="valKey2" maxlength="3" placeholder="XXX" ng-model="vm.accounts.verify.secret.b" tabindex="7" auto-focus required>\n                    <input type="text" class="form-control" id="valKey3" name="valKey3" maxlength="3" placeholder="XXX" ng-model="vm.accounts.verify.secret.c" tabindex="8" auto-focus required>\n                    <input type="text" class="form-control" id="valKey4"  name="valKey4" maxlength="3" placeholder="XXX" ng-model="vm.accounts.verify.secret.d" tabindex="9" auto-focus required>\n                </div>\n\n                <div ng-show="(bankCheckForm.valKey1.$invalid ||\n                                bankCheckForm.valKey2.$invalid ||\n                                bankCheckForm.valKey3.$invalid ||\n                                bankCheckForm.valKey4.$invalid)\n                                && bankCheckForm.$submitted"\n                     class="text-color-danger"\n                     role="alert">\n                    <p>Please input the the 12 digit code from your bank statement. </p>\n                </div>\n                <button type="submit" class="btn btn-primary btn-lg btn-full btn-drop" ng-disabled="loadingVerification">\n                    {{ buttonText || \'Confirm Account\' }}\n                </button>\n                <button type="button" class="btn btn-lg btn-full btn-drop" ng-click="backToManage()">Cancel</button>\n            </div>\n\n        </form>\n    </div>\n</div>');
            $templateCache.put('setup/company-details.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <!--Main Body-->\n        <div class="col-md-8">\n            <form name="confirmDetailsForm" ng-submit="confirmDetailsCorrect()" novalidate>\n                <h2 class="hang">Confirm {{vm.client.clientType == \'lender\' ? \'lender\' : \'borrower\'}} details</h2>\n\n                <!-- Pull form fields from directive -->\n                <client-details ng-form="confirmDetailsForm"\n                                client="vm.client"\n                                read-only="true">\n                </client-details>\n\n                <div class="form-group drop text-align-right">\n                    <div ng-if="!vm.client.clientData.authorization.clientAuthorized\n                    &&\n                    (vm.client.clientData.authorization.detailsQueried == false || vm.client.clientData.authorization.detailsQueried == undefined)">\n                        <button class="btn btn-secondary" ng-click="reportProblem($event)" type="button">I Have Found A Problem</button>\n                        <button class="btn btn-primary" type="submit">All Details Correct </button>\n                    </div>\n                    <div ng-if="vm.client.clientData.authorization.clientAuthorized || vm.client.clientData.authorization.detailsQueried == true">\n                        <button class="btn btn-primary" type="button" ng-click="backToManage()">Go Back</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/index.html', '<div class="Leed Leed--primary">\n\t<div class="container">\n\t\t<div class="row">\n\t\t\t<div class="col-md-6">\n\t\t\t\t<h5>Your</h5>\n\t\t\t\t<h2>Management</h2>\n\t\t\t</div>\n\n\t\t\t<div class="col-md-6 text-align-right">\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<ui-view/>');
            $templateCache.put('setup/loading.html', '<div class="container margin-y-lg">\n    <div class="row">\n        <div class="col-md-8 col-md-offset-2">\n            <h1>Loading details...</h1>\n            <ui-view/>\n        </div>\n    </div>\n</div>\n\n');
            $templateCache.put('setup/borrower/account-authenticate.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8">\n            <form name="bankAuthForm" ng-submit="bankAuthForm.$valid" novalidate>\n                <div ui-view>\n                    <h2 class="hang">Register and verify your bank account</h2>\n                    <div class="alert alert-danger alert--unstuck margin-bottom-sm" role="alert" ng-if="client.clientData.authorization.bankAccountTestSent == true && client.clientData.authorization.bankAccountConfirmed == true">\n                          <p class="text-align-left">You have already registered and confirmed a bank account. Are you sure you want to register a new one?</p>\n                    </div>\n                    <div class="form-group row">\n                        <div class="col-md-4">\n                            <button id="invoice-info"\n                                    ng-click="getBankAccounts($event, \'setup.borrower.accounts.authenticate.select\')"\n                                    class="btn btn-primary">\n                                Get Bank Account Details\n                            </button>\n                            <button type="button" class="btn btn-lg btn-full btn-drop" ng-click="backToManage()">Cancel</button>\n                        </div>\n\n                        <div class="col-md-6">\n                            <p class="seperate smaller" style="padding-left: 26px;">Retrieve your bank account details from your accountancy system.</p>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/borrower/account-complete.html', '<div ng-cloak ng-show="accountTestSent && bankAuthForm.$submitted">\n    <div class="form-group row">\n        <div class="col-md-8 col-md-offset-2">\n            <div class="card card-block card-inverse card-success">\n                <h5 class="card-title text-xs-center">Account Setup Complete</h5>\n                <p class="card-text">Your Test deposit has been sent to your bank account\n                    When you have seen the deposit in your account return to the Manage\n                    my Bank Account page to complete your setup</p>\n                <div class="text-xs-center">\n                    <a ng-click="completeAccountSetup($event)" class="btn btn-secondary btn-width-lg">OK</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/borrower/account-select.html', '<!-- select account -->\n<h2>Bank Account Setup</h2>\n<p>These\xA0are the bank accounts we found in your accountancy system.</p>\n\n<div class="form-group">\n    <label for="select-account" class="form-control-label">Which account would you like to use?</label>\n    <select name="selectedAccount"\n            ng-model="vm.accounts.authenticate"\n            ng-options="item.accountDisplay for item in vm.accounts.available"\n            id="select-account"\n            class="form-control"\n            required>\n    </select>\n</div>\n\n<div class="info-box">\n    <h5>Next Steps</h5>\n    <ol>\n        <li>Click Verify My\xA0Bank Account.</li>\n        <li>Check your bank statement for a deposit of \xA30.01 from PeerPay Abacus.</li>\n        <li>Note the payment reference associated with the deposit.</li>\n        <li>Enter the 16 character token part of the payment reference.</li>\n    </ol>\n</div>\n\n<div ng-messages="bankAuthForm.selectedAccount.$error"\n     ng-if="selectedAccountSubmitted"\n     class="text-color-danger"\n     role="alert">\n    <div ng-message="required">* Required </div>\n</div>\n\n<div ui-view>\n    <div class="col-md-12 drop text-align-right" style="margin-top: 30px;">\n        <button class="btn btn-secondary" ng-click="redirectTo(\'setup.borrower.manage\')">Cancel</button>\n        <button class="btn btn-primary" ng-click="selectAccount($event)">Continue</button>     \n    </div>\n</div>');
            $templateCache.put('setup/borrower/invoice-templates.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8">\n          <form name="bankCheckForm" ng-submit="bankCheckForm.$valid && postBankVerification(bankCheckForm)" novalidate>\n            <h1>Download Template</h1>\n            <p>You need to download the invoice template below and import into your accountancy system\n        before you can start submitting invoices for borrowing.</p>\n            <p>All invoices that you want to use for borrowing must be created using this\n                template as this contains the payment information that your customer will need to use\n                to ensure that payment of the invoice reaches us correctly.</p>\n\n            <label for="accountancy-system" class="form-control-label">\n                Download the instructions on how to load an invoice template into {{client.clientData.accountsSystem.label}}\n            </label>\n\n            <div class="form-group">\n                <azure-download container="accounting-instructions"\n                              resource="{{ client.clientData.accountsSystem.value.toLowerCase() + \'.pdf\' }}"\n                              label="Download Instructions">\n                </azure-download>\n            </div>\n\n            <div class="form-group drop">\n                <azure-download container="templates"\n                        resource="PeerPay-Xero-Template.docx"\n                        label="Download Invoice Template"\n                        ng-click="showTemplateCheckButton($event)">\n                </azure-download>\n            </div>\n\n            <div class="form-group drop">\n                <div ng-cloak ng-show="(templateDownloaded || vm.brandingTheme) && !vm.brandingTheme.brandingThemeValid">\n                        <p>To verify that the invoice template is ready for use (after it has been loaded into), please click on the button below</p>\n                        <button ng-click="checkTemplate($event)" class="btn btn-primary">Check my Template Upload</button>\n                        <span ng-cloak ng-show="vm.brandingTheme && !vm.brandingTheme.brandingThemeValid" class="fa fa-exclamation-triangle font-size-xxl"></span>\n                </div>\n            </div>\n\n            <div ng-cloak ng-show="vm.brandingTheme.brandingThemeValid" class="form-group row margin-top-lg">\n                <div class="col-md-offset-3 col-md-6 text-center">\n                    <p>Your template upload was successful!</p>\n                    <button ng-click="finish($event)" class="btn btn-primary">Return to setup</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n');
            $templateCache.put('setup/borrower/manage.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <!--Main Body-->\n        <div class="col-md-8 options">\n            <div class="Card" ng-class="steps.isDisabled(\'companyDetailsConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm Company Details</h4>\n                <p>Check and update company details.</p>\n                <button class="arrow-btn"\n                        ng-click="redirectTo(\'setup.borrower.company\')"\n                        ng-disabled="steps.isDisabled(\'companyDetailsConfirmed\')">{{companyConfirmBtn}}</button>\n            </div>\n\n            <div class="Card" ng-class="steps.isDisabled(\'clientCompletedRiskProfile\') ? \'Card--disabled\': \'\'">\n                <h4>Complete Company Risk Profile</h4>\n                <p>View and complete your risk profile information.</p>\n                <button class="arrow-btn"\n                        ng-click="redirectTo(\'setup.borrower.risk.start\')"\n                        ng-disabled="steps.isDisabled(\'clientCompletedRiskProfile\')">Risk Profile</button>\n            </div>\n\n            <div class="Card" ng-class="steps.isDisabled(\'tsCsConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm Terms and Conditions</h4>\n                <p>Confirm and view terms and conditions of the service.</p>\n                <button class="arrow-btn"\n                        ng-click="confirmBorrowerTerms($event)"\n                        ng-disabled="steps.isDisabled(\'tsCsConfirmed\')">Terms &amp; Conditions</button>\n            </div>\n\n            <div class="Card" ng-class="steps.isDisabled(\'bankAccountTestSent\') ? \'Card--disabled\' : \'\'">\n                <h4>Manage My Bank Accounts</h4>\n                <p>Setup and verify a new bank account.</p>\n                <button class="arrow-btn btn-width-lg"\n                        ng-click="redirectTo(\'setup.borrower.accounts.authenticate\')"\n                        ng-disabled="steps.isDisabled(\'bankAccountTestSent\')">Setup Account</button>\n            </div>\n\n            <div class="Card" ng-class="steps.isDisabled(\'bankAccountConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm Bank Account</h4>\n                <p>Confirm your bank account with the deposit code.</p>\n                <button class="arrow-btn btn-width-lg"\n                        ng-click="redirectTo(\'setup.borrower.accounts.verify\')"\n                        ng-disabled="steps.isDisabled(\'bankAccountConfirmed\')">Setup Account</button>\n            </div>\n\n            <div class="Card" ng-class="steps.isDisabled(\'clientAuthorized\') ? \'Card--disabled\' : \'\'">\n                <h4>Invoice Templates</h4>\n                <p>Download Template for your accountancy system.</p>\n                <button class="arrow-btn"\n                        ng-click="redirectTo(\'setup.borrower.invoice-template\')"\n                        ng-disabled="steps.isDisabled(\'clientAuthorized\')">Templates</button>\n            </div>\n\n        </div>\n    </div>\n</div>');
            $templateCache.put('setup/borrower/risk-info.html', '<!-- not a real form, is not submitted -->\n<div class="container">\n<div class="form-group row">\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Active customers over the last 12 months\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countActiveCustomers}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Invoices sent over the last 12 months\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countInvoices}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Number of invoices currently outstanding\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countInvoicesOutstanding}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Number of customers with invoices currently outstanding\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countCustomersOutstanding}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Total amount on invoices currently outstanding\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.sumInvoicesOutstanding | customCurrency}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Number of invoices currently overdue\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countInvoicesOverdue}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Number of customers with invoices currently overdue\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.countCustomersOverdue}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Total amount on invoices currently overdue\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.sumInvoicesOverdue | customCurrency}}</p>\n    </div>\n\n    <label class="col-md-8 col-md-offset-1 form-control-label text-spaced-xs">\n        Total amount on overdue invoices in the last 12 months\n    </label>\n    <div class="col-md-1">\n        <p class="form-control-static font-weight-bold">{{vm.client.clientData.riskAnalysis.sumInvoicesOverdueYearly | customCurrency}}</p>\n    </div>\n</div>\n\n<div class="form-group row margin-top-md">\n    <div class="col-md-offset-4 col-md-6">\n        <button type="button" ng-click="acceptAnalysis($event)" class="btn btn-primary margin-bottom-sm right">OK</button>\n    </div>\n</div>\n</div>\n');
            $templateCache.put('setup/borrower/risk-profile.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8">\n            <h2 class="hang">Complete Risk Profile</h2>\n\n            <ui-view/>\n\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/borrower/risk-questionnaire.html', '<form name="selfAssessmentForm" ng-submit="selfAssessmentForm.$valid && putSelfAssessment()" novalidate>\n    <div class="form-group row">\n        <div class="col-md-4">\n            <button id="invoice-info" ng-click="viewRiskAnalysis($event)" class="btn btn-primary">View Invoice Information</button>\n        </div>\n\n        <div class="col-md-8">\n            <p class="seperate smaller" style="padding-left: 30px;">View the invoice information that was retrieved from your Accounts package during registration.</p>\n        </div>\n\n        <configurable-form ng-form="selfAssessmentForm"\n                           name="borrowerSelfAssessment"\n                           model-root="vm.client.clientData.selfAssessment">\n        </configurable-form>\n\n        <div class="col-md-12 drop text-align-right" style="margin-top: 30px;">\n            <div ng-if="!vm.client.clientData.authorization.clientAuthorized">\n                <button type="button" class="btn btn-secondary" ng-click="redirectTo(\'setup.borrower.manage\')">Cancel</button>\n                <button class="btn btn-primary" type="submit" ng-click="logForm(selfAssessmentForm)">Save</button>\n            </div>\n            <div ng-if="vm.client.clientData.authorization.clientAuthorized">\n                <button type="button" class="btn btn-primary" ng-click="redirectTo(\'setup.borrower.manage\')">Go Back</button>\n            </div>\n        </div>\n    </div>\n</form>\n');
            $templateCache.put('setup/borrower/risk-start.html', '<div class="form-group row">\n\n\t<div class="col-md-4">\n\t\t<button id="invoice-info" ng-click="getRiskAnalysis($event, \'setup.borrower.risk.info\')" class="btn btn-primary">Connect your account</button>\n\t</div>\n\n\t<div class="col-md-6">\n\t\t<p class="seperate">Fetch the invoice information from your Accounts system.</p>\n\t</div>\n\n\n    <div class="col-md-12">\n    \t<button type="button" ng-click="cancelRisk($event)" class="btn btn-secondary">Cancel</button>\n    \t<button class="btn btn-primary" disabled>Save</button>\n    </div>\n</div>');
            $templateCache.put('setup/borrower/user-details.html', '<div class="col-md-6 col-md-offset-3 padding-lg bg-ppLightBlue borderless border-radius-md">\n    <form ng-submit="saveUserDetails()" novalidate>\n\n        <div class="form-group row padding-y-lg">\n            <div class="col-md-10 col-md-offset-1\n                        padding-y-lg font-size-ml text-spaced-sm font-weight-bold\n            text-color-ppNavyBlue">\n                User details\n            </div>\n        </div>\n\n        <div class="form-group row">\n            <label for="user-name" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right font-weight-bold">Username</label>\n            <div class="col-md-6">\n                <input type="text"\n                       id="user-name"\n                       name="user-name"\n                       placeholder="User Name"\n                       class="form-control"\n                       ng-model="vm.username"\n                       required>\n            </div>\n        </div>\n\n        <div class="form-group row margin-bottom-md">\n            <label for="title" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right font-weight-bold">Title</label>\n            <div class="col-md-6">\n                <input type="text"\n                       id="title"\n                       name="title"\n                       placeholder="Title"\n                       class="form-control"\n                       ng-model="vm.user.profile.title"\n                       required>\n            </div>\n        </div>\n\n        <div class="form-group row">\n            <label for="first-name" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right">First Name</label>\n            <div class="col-md-6">\n                <input type="text"\n                       id="first-name"\n                       name="first-name"\n                       placeholder="Full Name"\n                       class="form-control "\n                       ng-model="vm.firstName"\n                       required>\n            </div>\n        </div>\n\n    <div class="form-group row">\n            <label for="last-name" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right">Last Name</label>\n            <div class="col-md-6">\n                <input type="text"\n                       id="last-name"\n                       name="last-name"\n                       placeholder="Last Name"\n                       class="form-control "\n                       ng-model="vm.lastName"\n                       required>\n            </div>\n        </div>\n\n        <div class="form-group row">\n            <label for="email" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right">Email Address</label>\n            <div class="col-md-6">\n                <input type="email"\n                       id="email"\n                       name="email"\n                       placeholder="Email"\n                       class="form-control "\n                       ng-model="vm.email"\n                       required>\n            </div>\n        </div>\n\n        <div class="form-group row">\n            <label for="mobile" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right">Mobile</label>\n            <div class="col-md-6">\n                <input type="text"\n                       id="mobile"\n                       name="mobile"\n                       placeholder="Mobile"\n                       class="form-control "\n                       ng-model="vm.mobile"\n                       required>\n            </div>\n        </div>\n\n        <div class="form-group row">\n            <label for="notifications" class="col-md-3 col-md-offset-1 form-control-label\n           text-spaced-xs text-xs-right">Notification Preference</label>\n            <div class="col-md-4">\n                <input type="checkbox" />\n                <label>Email</label>\n            </div>\n            <div class="col-md-4">\n                <input type="checkbox" />\n                <label>Mobile</label>\n            </div>\n        </div>\n\n        <div class="form-group row margin-top-md">\n            <div class="col-md-offset-4 col-md-6">\n                <button class="btn btn-primary btn-block" type="submit" >\n                    Save Details\n                </button>\n            </div>\n        </div>\n\n    </form>\n</div>\n');
            $templateCache.put('setup/lender/account-authenticate.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8">\n           <form name="bankAuthForm"\n                  ng-submit="bankAuthForm.$valid"\n                  novalidate>\n                <div class="alert alert-danger margin-bottom-sm" role="alert" ng-if="client.clientData.authorization.bankAccountTestSent == true && client.clientData.authorization.bankAccountConfirmed == true">\n                      <p class="text-align-left">You have already registered and confirmed a bank account. Are you sure you want to register a new one?</p>\n                </div>\n\n                <h4>Manage My Bank Account</h4>\n                <p>You will need to register &amp; verify your bank account for receiving your Investment returns.</p>\n\n                <div class="form-group">\n                    <label for="accountName" class="form-control-label">Bank Account Name</label>\n                    <input type="text"\n                           id="accountName"\n                           name="accountName"\n                           placeholder="Bank Account Name"\n                           class="form-control"\n                           ng-model="vm.accounts.authenticate.accountName"\n                           required>\n                    <div ng-messages="bankAuthForm.accountName.$error"\n                         ng-if="bankAuthForm.$submitted"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your bank account name</div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="accountNum" class="form-control-label">Bank Account Number</label>\n                    <input type="text"\n                           id="accountNum"\n                           name="accountNum"\n                           placeholder="Bank Account Number"\n                           class="form-control"\n                           maxlength="8"\n                           ng-model="vm.accounts.authenticate.accountNum"\n                           numbers-only\n                           required>\n                    <div ng-messages="bankAuthForm.accountNum.$error"\n                         ng-if="bankAuthForm.$submitted"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your bank account number</div>\n                        <div ng-message="maxlength">An account number cannot be more than 8 digits</div>\n                    </div>\n                </div>\n\n                <fieldset class="form-group"\n                    ng-class="{ \'has-error\' : bankAuthForm.email.$invalid && bankAuthForm.$submitted}">\n                    <label for="sortcode" class="form-control-label">Sort Code</label>\n                    <div class="form-group">\n                        <div class="input-group" id="email">\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey1"\n                                   name="valKey1"\n                                   maxlength="2"\n                                   placeholder="XX"\n                                   ng-model="vm.accounts.authenticate.sortCode.a"\n                                   auto-focus\n                                   tabindex="1"\n                                   required>\n                            <div class="input-group-addon">-</div>\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey2"\n                                   name="valKey2"\n                                   maxlength="2"\n                                   placeholder="XX"\n                                   ng-model="vm.accounts.authenticate.sortCode.b"\n                                   auto-focus\n                                   tabindex="2"\n                                   required>\n                            <div class="input-group-addon">-</div>\n                            <input type="text"\n                                   class="form-control"\n                                   id="valKey3"\n                                   name="valKey3"\n                                   maxlength="2"\n                                   placeholder="XX"\n                                   ng-model="vm.accounts.authenticate.sortCode.c"\n                                   auto-focus\n                                   tabindex="3"\n                                   required>\n                        </div>\n\n                        <div ng-show="(bankAuthForm.valKey1.$invalid ||\n                            bankAuthForm.valKey2.$invalid ||\n                            bankAuthForm.valKey3.$invalid) && bankAuthForm.$submitted"\n                            class="text-color-danger"\n                            role="alert">\n                            <p>Please provide your sortcode </p>\n                        </div>\n                    </div>\n                </fieldset>\n\n                <div class="info-box">\n                    <h5>Next Steps</h5>\n                    <ol>\n                        <li>Click Verify My\xA0Bank Account.</li>\n                        <li>Check your bank statement for a deposit of \xA30.01 from PeerPay Abacus.</li>\n                        <li>Note the payment reference associated with the deposit.</li>\n                        <li>Enter the 16 character token part of the payment reference.</li>\n                    </ol>\n                </div>\n\n                <div ui-view>\n                    <div class="text-align-right" style="margin-top: 20px;">\n                        <button id="continue"\n                                type="button"\n                                ng-click="backToManage()"\n                                class="btn btn-secondary">\n                            Cancel\n                        </button>\n                        <button id="continue"\n                                type="submit"\n                                ng-click="inputAccount($event, bankAuthForm)"\n                                class="btn btn-primary">\n                            Save\n                        </button>\n                    </div>\n                </div>\n\n            </form>\n\n        </div>\n\n    </div>\n</div>\n');
            $templateCache.put('setup/lender/confirm-deposit.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8">\n            <form name="bankTestForm"\n                  ng-submit="bankTestForm.$valid && postBankAuthentication(bankTestForm)"\n                  novalidate>\n                <h4 class="drop">Confirm Deposit</h4>\n                <p>We are pleased to welcome you as a Lender to the PeerPay Service.</p>\n                <p>To complete this procedure you should now deposit the funds you committed to in your Investor Risk Profile into the Bank Account detailed below using the payment reference below so we can identify your deposit.</p>\n                <div class="form-group">\n                    <label for="accountNum" class="form-control-label">Committed Funding</label>\n                    <input type="text"\n                           id="accountNum"\n                           name="accountNum"\n                           placeholder="Comitted Funding"\n                           class="form-control"\n                           maxlength="8"\n                           ng-model="vm.client.clientData.lenderRiskProfile.depositAmount"\n                           readonly\n                    >\n                    <div ng-messages="bankTestForm.accountNum.$error"\n                         ng-if="bankTestForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your committed funding</div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="accountNum" class="form-control-label">Sort Code</label>\n                    <input type="text"\n                           id="accountNum"\n                           name="accountNum"\n                           placeholder="Sort Code"\n                           class="form-control"\n                           maxlength="8"\n                           ng-model="vm.accounts.accounts.sortCode"\n                           readonly\n                    >\n                    <div ng-messages="bankTestForm.accountNum.$error"\n                         ng-if="bankTestForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your sort code</div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="accountNum" class="form-control-label">Account Number</label>\n                    <input type="text"\n                           id="accountNum"\n                           name="accountNum"\n                           placeholder="Bank Account Number"\n                           class="form-control"\n                           maxlength="8"\n                           ng-model="vm.accounts.accounts.accountNum"\n                           readonly\n                    >\n                    <div ng-messages="bankTestForm.accountNum.$error"\n                         ng-if="bankTestForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your bank account number</div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="accountNum" class="form-control-label">Payment Reference</label>\n                    <input type="text"\n                           id="accountNum"\n                           name="accountNum"\n                           placeholder="Payment Reference"\n                           class="form-control"\n                           maxlength="8"\n                           ng-model="vm.client.clientData.paymentReference"\n                           readonly\n                    >\n                    <div ng-messages="bankTestForm.accountNum.$error"\n                         ng-if="bankTestForm.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">Please provide your payment reference</div>\n                    </div>\n                </div>\n\n                <div class="text-align-right">\n                    <button id="continue" ng-click="cancelConfirmDeposit($event)" class="btn btn-secondary">Cancel</button>\n                    <button id="continue" ng-click="paymentInitiated($event)" class="btn btn-primary">Payment Initiated</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n\n');
            $templateCache.put('setup/lender/manage.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n\n        <div class="col-md-8 options">\n\n            <!-- company details -->\n            <div class="Card" ng-class="steps.isDisabled(\'companyDetailsConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm your Details</h4>\n                <p>Check and update your details.</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.details\')"\n                        ng-disabled="steps.isDisabled(\'companyDetailsConfirmed\')">{{companyConfirmBtn}}</button>\n            </div>\n\n            <!-- terms -->\n            <div class="Card" ng-class="steps.isDisabled(\'tsCsConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm Terms and Conditions</h4>\n                <p>Confirm and view terms and conditions of the service.</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.terms\')"\n                        ng-disabled="steps.isDisabled(\'tsCsConfirmed\')">Terms of Service</button>\n            </div>\n\n            <!-- risk profile -->\n            <div class="Card" ng-class="steps.isDisabled(\'clientCompletedRiskProfile\') ? \'Card--disabled\' : \'\'">\n                <h4>Manage Investor Risk Profile</h4>\n                <p>View and complete your investor risk profile information</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.risk\')"\n                        ng-disabled="steps.isDisabled(\'clientCompletedRiskProfile\')">Risk Profile</button>\n            </div>\n\n            <!-- manage bank account -->\n            <div class="Card" ng-class="steps.isDisabled(\'bankAccountTestSent\') ? \'Card--disabled\' : \'\'">\n                <h4>Manage My Bank Accounts</h4>\n                <p>Enter bank account details.</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.accounts.authenticate\')"\n                        ng-disabled="steps.isDisabled(\'bankAccountTestSent\')">\n                    Setup Account\n                </button>\n            </div>\n\n            <!-- confirm bank account -->\n            <div class="Card" ng-class="steps.isDisabled(\'bankAccountConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm Bank Account</h4>\n                <p>Confirm bank account details.</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.accounts.verify\')"\n                        ng-disabled="steps.isDisabled(\'bankAccountConfirmed\')">\n                    Confirm Account\n                </button>\n            </div>\n\n            <!-- confirm deposit -->\n            <div class="Card" ng-class="steps.isDisabled(\'depositPaymentConfirmed\') ? \'Card--disabled\' : \'\'">\n                <h4>Confirm My Deposit</h4>\n                <p>Check and update your details.</p>\n                <button class="arrow-btn" ng-click="redirectTo(\'setup.lender.deposit\')"\n                        ng-disabled="steps.isDisabled(\'depositPaymentConfirmed\')">Confirm Deposit</button>\n            </div>\n\n        </div>\n    </div>\n</div>');
            $templateCache.put('setup/lender/risk-profile-disabled.html', '<div class="container-fluid bg-ppLightBlue">\n    <div class="row">\n        <div class="col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2 padding-lg borderless border-radius-md">\n            <form name="ppForm"\n                  ng-submit="isValid(ppForm, $event) && confirmRiskProfile(ppForm, $event)"\n                  novalidate>\n\n                <div class="row padding-y-lg">\n                    <div class="col-md-10 padding-y-lg font-size-ml text-spaced-sm font-weight-bold text-color-ppNavyBlue">\n                        Lender Risk Profile\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="lenderType" class="col-md-4 form-control-label text-spaced-xs text-xs-right">Source of funds</label>\n                    <div class="col-md-8">\n                        <input type="text"\n                               id="lenderType"\n                               name="lenderType"\n                               class="form-control"\n                               ng-model="vm.client.lenderType"\n                               readonly>\n                    </div>\n                </div>\n\n                <div class="form-group row margin-bottom-md">\n                    <label for="availableFundsAmount" class="col-md-4 form-control-label text-spaced-xs text-xs-right">Amount of available funds</label>\n                    <div class="col-md-8">\n                        <div class="input-group">\n                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                            <input type="text"\n                                   id="availableFundsAmount"\n                                   name="availableFundsAmount"\n                                   class="form-control"\n                                   required\n                                   readonly\n                                   ng-model="vm.client.clientData.lenderRiskProfile.availableFundsAmount">\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="depositAmount" class="col-md-4 form-control-label text-spaced-xs text-xs-right">Value of funds to be deposited with PeerPay</label>\n                    <div class="col-md-8">\n                        <div class="input-group">\n                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                            <input type="text"\n                                   id="depositAmount"\n                                   name="depositAmount"\n                                   class="form-control"\n                                   required\n                                   ng-model="vm.client.clientData.lenderRiskProfile.depositAmount"\n                                   readonly>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group row">\n                    <label for="depositAmount" class="col-md-4 form-control-label text-spaced-xs text-xs-right">Date of Company Financial Year End</label>\n                    <div class="col-md-8" ng-if="vm.client.clientData.lenderRiskProfile.financialYearEnd">\n                        <div class="input-group">\n                            <input type="text" readonly="readonly" class="form-control" value="{{vm.client.clientData.lenderRiskProfile.financialYearEnd}}" />\n                        </div>\n                    </div>\n                </div>\n\n                <div class="row margin-bottom-md">\n                    <div class="col-md-12">\n                        <p>Lending Spread by risk levels</p>\n                        <table class="table table-striped table-bordered table-hover table-condensed">\n                            <thead>\n                                <tr class="capitalise font-weight-bold">\n                                    <td></td>\n                                    <td>Percentage</td>\n                                    <td>Amount</td>\n                                    <td>Max amount per invoice</td>\n                                    <td>Max percentage per invoice</td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>\n                                        <label for="lendSpreadLowPercentage" class="col-md-3 form-control-label text-spaced-xs text-xs-right"><span class="text-color-green">LOW</span></label>\n                                    </td>\n                                    <td>\n                                        <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage" />\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.lowRiskAmount" />\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text"\n                                                   id="maxAmountLowRisk"\n                                                   name="maxAmountLowRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxAmountLowRisk"\n                                                   readonly>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <input type="text"\n                                                   id="maxInvPctLowRisk"\n                                                   name="maxInvPctLowRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk"\n                                                   readonly\n                                                    >\n                                            <span class="input-group-addon" id="basic-addon1">%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label for="lendSpreadMediumPercentage" class="col-md-3 form-control-label text-spaced-xs text-xs-right"><span class="text-color-amber">MEDIUM</span></label>\n                                    </td>\n                                    <td>\n                                        <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage" />\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.mediumRiskAmount" />\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text"\n                                                   id="maxAmountMediumRisk"\n                                                   name="maxAmountMediumRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxAmountMediumRisk"\n                                                   readonly\n                                                    >\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <input type="text"\n                                                   id="maxInvPctMediumRisk"\n                                                   name="maxInvPctMediumRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctMediumRisk"\n                                                   readonly\n                                                    >\n                                            <span class="input-group-addon" id="basic-addon1">%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>\n                                        <label for="lendSpreadHighPercentage" class="col-md-3 form-control-label text-spaced-xs text-xs-right"><span class="text-color-red">HIGH</span></label>\n                                    </td>\n                                    <td>\n                                        <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage" />\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.highRiskAmount" />\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                            <input type="text"\n                                                   id="maxAmountHighRisk"\n                                                   name="maxAmountHighRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxAmountHighRisk"\n                                                   readonly>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div class="input-group">\n                                            <input type="text"\n                                                   id="maxInvPctHighRisk"\n                                                   name="maxInvPctHighRisk"\n                                                   class="form-control"\n                                                   ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctHighRisk"\n                                                   readonly\n                                                    >\n                                            <span class="input-group-addon" id="basic-addon1">%</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-12">\n                        <div id="details_form" ng-repeat="field in forms.lenderRiskProfile">\n                            <fieldset class="form-group row"\n                                      ng-class="{ \'has-error\' : ppForm.$submitted && ppForm[field.name].$invalid }">\n\n                                <label for="{{field.name}}" class="col-sm-4 control-label" ng-show="field.label">\n                                    <div ng-bind-html="field.label | sanitize"></div>\n                                </label>\n\n                                <div class="col-sm-8">\n\n                                    <select id="{{field.name}}"\n                                            name="{{field.name}}"\n                                            class="form-control"\n                                            ng-model="vm.client.clientData[field.nested_model_namespace][field.model_name]"\n                                            disabled>\n                                        <option ng-repeat="option in field.options" value="{{option.key}}">{{option.label}}</option>\n                                    </select>\n\n                                    <div ng-show="ppForm.$submitted && ppForm[field.name].$invalid" class="text-color-danger">{{field.required.error_message}}</div>\n\n                                </div>\n                            </fieldset>\n                        </div>\n                    </div>\n                </div>\n\n                <div ui-view>\n                    <div class="form-group row margin-top-md">\n                        <div class="col-md-offset-4 col-md-6">\n                            <button class="btn btn-primary btn-block" type="button" ng-click="backToManage()">\n                                Go Back\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </form>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/lender/risk-profile.html', '<div class="container container--drop">\n    <div class="row">\n        <div class="col-md-4 sidebar">\n            <setup-sidebar></setup-sidebar>\n        </div>\n        <div class="col-md-8">\n\n            <form name="lenderRiskForm"\n                  ng-submit="isValid(lenderRiskForm, $event) && confirmRiskProfile(lenderRiskForm, $event)"\n                  novalidate>\n\n                <h4>Investor Risk Profile</h4>\n\n                <div class="form-group">\n                    <label for="lenderType" class="form-control-label">Source of funds</label>\n                    <input type="text"\n                           id="lenderType"\n                           name="lenderType"\n                           class="form-control"\n                           ng-model="vm.client.lenderType"\n                           disabled>\n                </div>\n\n                <div class="form-group">\n                    <label for="availableFundsAmount" class="form-control-label">Amount of available funds</label>\n                    <div class="input-group">\n                        <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                        <input type="{{readOnly ? \'text\' : \'number\'}}"\n                               id="availableFundsAmount"\n                               name="availableFundsAmount"\n                               class="form-control"\n                               min="10000"\n                               required\n                               ng-model="vm.client.clientData.lenderRiskProfile.availableFundsAmount"\n                               decimal-place\n                               ng-readonly="readOnly"\n                               >\n                    </div>\n                    <!-- <span class="help-block" ng-show="lenderRiskForm.availableFundsAmount.$error.decimal">\n                        Invalid Amount!\n                    </span> -->\n                    <div ng-messages="lenderRiskForm.availableFundsAmount.$error"\n                         ng-if="lenderRiskForm.$submitted"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="required">* Required </div>\n                    </div>\n                    <div ng-messages="lenderRiskForm.availableFundsAmount.$error"\n                         ng-if="lenderRiskForm.depositAmount.$dirty"\n                         class="text-color-danger"\n                         role="alert">\n                        <div ng-message="decimal">* Amount must be two decimal places </div>\n                        <div ng-message="min">* Does not meet the minimum of \xA310,000 </div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="depositAmount" class="form-control-label">Value of funds to be deposited with PeerPay</label>\n                    <div class="input-group">\n                        <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                        <input type="{{readOnly ? \'text\' : \'number\'}}"\n                               id="depositAmount"\n                               name="depositAmount"\n                               class="form-control"\n                               min="10000"\n                               ng-change="calculateRiskTotals()"\n                               required\n                               ng-model="vm.client.clientData.lenderRiskProfile.depositAmount"\n                               smaller-or-equal="vm.client.clientData.lenderRiskProfile.availableFundsAmount"\n                               decimal-place\n                               ng-readonly="readOnly">\n                        <div ng-messages="lenderRiskForm.depositAmount.$error"\n                             ng-if="lenderRiskForm.$submitted"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="required">* Required </div>\n                            <div ng-message="min">* Does not meet the minimum of \xA310,000 </div>\n                            <div ng-message="decimal">* Amount must be two decimal places </div>\n                        </div>\n                        <div ng-messages="lenderRiskForm.depositAmount.$error"\n                             ng-if="lenderRiskForm.depositAmount.$dirty"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="decimal">* Amount must be two decimal places </div>\n                            <div ng-message="smallerOrEqual">Value of funds deposited must be smaller or equal to available funds</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group" ng-if="!readOnly">\n                    <label for="file-selector" class="form-control-label">Loads Accountants confirmation of Amount of available funds</label>\n                    <div class="input-group">\n                        <label class="file" for="file-selector">\n                            <input azure-upload\n                                   limit="1"\n                                   mimetypes="pdf"\n                                   container="funds-confirmation"\n                                   input-name="fundsConfirmation"\n                                   save-on-upload="true"\n                                   ng-model="storage.registry.fundsConfirmation"\n                                   type="file"\n                                   id="file-selector"\n                                   name="fundsConfirmation"\n                                   required\n                                   ng-readonly="readOnly">\n                            <span class="file-custom"></span>\n                        </label>\n                        <div class="padding-left-sm padding-top-md">\n                            <p ng-repeat="file in storage.registry.fundsConfirmation">\n                                {{file.name}}\n                                <span ng-click="deleteFile(file)" class="font-size-lg fa fa-times-circle-o"></span>\n                            </p>\n                        </div>\n                        <div ng-messages="lenderRiskForm.fundsConfirmation.$error"\n                             ng-if="lenderRiskForm.$submitted"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="required">* File required </div>\n                        </div>\n                        <div ng-messages="lenderRiskForm.fundsConfirmation.$error"\n                             class="text-color-danger"\n                             role="alert">\n                            <div ng-message="mimetypes">* Only pdf files are allowed</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group" ng-if="vm.client.lenderType != \'individual\'">\n                    <label for="financialYearEnd" class="form-control-label">Date of Company Financial Year End</label>\n                    <div ng-if="vm.client.clientData.lenderRiskProfile.financialYearEnd">\n                        <div class="input-group">\n                            <input type="text"\n                                   disabled="disabled"\n                                   class="form-control"\n                                   value="{{vm.client.clientData.lenderRiskProfile.financialYearEnd.day + \'/\' + vm.client.clientData.lenderRiskProfile.financialYearEnd.month}}" />\n                        </div>\n                    </div>\n\n                    <div ng-if="!vm.client.clientData.lenderRiskProfile.financialYearEnd">\n                        <div class="col-sm-4">\n                            <select id="financialYearEndDay" name="financialYearEndDay" class="form-control"\n                                    ng-model="vm.client.clientData.lenderRiskProfile.financialYearEnd.day"\n                                    ng-options="o for o in {{days}} | daysOfMonth:vm.client.clientData.lenderRiskProfile.financialYearEnd.month"\n                                    required>\n                                <option value="">dd</option>\n                            </select>\n                            <div ng-messages="lenderRiskForm.financialYearEndDay.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert"\n                                 required>\n                                <div ng-message="required">* Required </div>\n                            </div>\n                        </div>\n                        <div class="col-sm-4">\n                            <select id="financialYearEndMonth" name="financialYearEndMonth" class="form-control"\n                                    ng-model="vm.client.clientData.lenderRiskProfile.financialYearEnd.month"\n                                    ng-options="o for o in {{months}}"\n                                    required>\n                                <option value="">mm</option>\n                            </select>\n                            <div ng-messages="lenderRiskForm.financialYearEndMonth.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <hr />\n\n                <h4 class="drop">Lending spread risk for Low risk loan</h4>\n                <div class="row">\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Percentage</label>\n                            <select id="lendSpreadLowPercentage"\n                                    name="lendSpreadLowPercentage"\n                                    class="form-control"\n                                    ng-change="checkPercentages(true)"\n                                    ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage"\n                                    ng-options="o for o in {{percentages}}"\n                                    required\n                                    ng-disabled="readOnly">\n                                <option value="">Select</option>\n                            </select>\n                            <div ng-messages="lenderRiskForm.lendSpreadLowPercentage.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Amount</label>\n                            <div class="input-group">\n                                <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.lowRiskAmount" rounded-number\n                                ng-readonly="readOnly" />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Max amount per invoice</label>\n                            <div class="input-group">\n                                <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                <input type="text"\n                                       id="maxAmountLowRisk"\n                                       name="maxAmountLowRisk"\n                                       class="form-control"\n                                       perc-amount-validation="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage"\n                                       ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage > 0"\n                                       ng-model="vm.client.clientData.lenderRiskProfile.maxAmountLowRisk"\n                                       rounded-number\n                                       ng-readonly="readOnly"\n                                        >\n                            </div>\n                            <div ng-messages="lenderRiskForm.maxAmountLowRisk.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                                <div ng-message="percAmountValidation">Value is invalid, please check corresponding spread percentage.</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Max percentage per invoice</label>\n                            <div class="input-group">\n                                <input type="{{readOnly ? \'text\' : \'number\'}}"\n                                       id="maxInvPctLowRisk"\n                                       name="maxInvPctLowRisk"\n                                       class="form-control"\n                                       max="10"\n                                       ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage > 0"\n                                       perc-validation="vm.client.clientData.lenderRiskProfile.lendSpreadLowPercentage"\n                                       ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctLowRisk"\n                                       ng-readonly="readOnly"\n                                        >\n                                <span class="input-group-addon" id="basic-addon1">%</span>\n                            </div>\n                            <div ng-messages="lenderRiskForm.maxInvPctLowRisk.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                                <div ng-message="number">Not a valid number </div>\n                                <div ng-message="maxPerc">Max Percentage is 10</div>\n                                <div ng-message="minPerc">Value is invalid, please check corresponding spread</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n\n\n                    <h4 class="drop">Lending spread risk for Medium risk loan</h4>\n                    <div class="row">\n                        <div class="col-md-3">\n                            <div class="form-group">\n                                <label class="form-control-label smaller">Percentage</label>\n                                <select id="lendSpreadMediumPercentage"\n                                        name="lendSpreadMediumPercentage"\n                                        class="form-control"\n                                        ng-change="checkPercentages(true)"\n                                        ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage"\n                                        ng-options="o for o in {{percentages}}"\n                                        required\n                                        ng-disabled="readOnly">\n                                    <option value="">Select</option>\n                                </select>\n                                <div ng-messages="lenderRiskForm.lendSpreadMediumPercentage.$error"\n                                     ng-if="lenderRiskForm.$submitted"\n                                     class="text-color-danger"\n                                     role="alert">\n                                    <div ng-message="required">* Required </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="col-md-3">\n                            <div class="form-group">\n                                <label class="form-control-label smaller">Amount</label>\n                                <div class="input-group">\n                                    <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                    <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.mediumRiskAmount" rounded-number\n                                    ng-readonly="readOnly" />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="col-md-3">\n                            <div class="form-group">\n                                <label class="form-control-label smaller">Max amount per invoice</label>\n                                <div class="input-group">\n                                    <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                    <input type="text"\n                                           id="maxAmountMediumRisk"\n                                           name="maxAmountMediumRisk"\n                                           class="form-control"\n                                           perc-amount-validation="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage"\n                                           ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage > 0"\n                                           ng-model="vm.client.clientData.lenderRiskProfile.maxAmountMediumRisk"\n                                           rounded-number\n                                           ng-readonly="readOnly"\n                                            >\n                                </div>\n                                <div ng-messages="lenderRiskForm.maxAmountMediumRisk.$error"\n                                     ng-if="lenderRiskForm.$submitted"\n                                     class="text-color-danger"\n                                     role="alert">\n                                    <div ng-message="required">* Required </div>\n                                    <div ng-message="percAmountValidation">Value is invalid, please check corresponding spread percentage.</div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="col-md-3">\n                            <div class="form-group">\n                                <label class="form-control-label smaller">Max percentage per invoice</label>\n                                <div class="input-group">\n                                    <input type="{{readOnly ? \'text\' : \'number\'}}"\n                                           id="maxInvPctMediumRisk"\n                                           name="maxInvPctMediumRisk"\n                                           class="form-control"\n                                           max="10"\n                                           ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage > 0"\n                                           perc-validation="vm.client.clientData.lenderRiskProfile.lendSpreadMediumPercentage"\n                                           ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctMediumRisk"\n                                           ng-readonly="readOnly"\n                                            >\n                                    <span class="input-group-addon" id="basic-addon1">%</span>\n                                </div>\n                                <div ng-messages="lenderRiskForm.maxInvPctMediumRisk.$error"\n                                     ng-if="lenderRiskForm.$submitted"\n                                     class="text-color-danger"\n                                     role="alert">\n                                    <div ng-message="required">* Required </div>\n                                    <div ng-message="number">Not a valid number </div>\n                                    <div ng-message="maxPerc">Max Percentage is 10</div>\n                                    <div ng-message="minPerc">Value is invalid, please check corresponding spread\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <h4 class="drop">Lending spread risk for High risk loan</h4>\n                <div class="row">\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Percentage</label>\n                            <select id="lendSpreadHighPercentage"\n                                        name="lendSpreadHighPercentage"\n                                        class="form-control"\n                                        ng-change="checkPercentages(true)"\n                                        ng-model="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage"\n                                        ng-options="o for o in {{percentages}}"\n                                        required\n                                        ng-disabled="readOnly">\n                                <option value="">Select</option>\n                            </select>\n                            <div ng-messages="lenderRiskForm.lendSpreadHighPercentage.$error"\n                                ng-if="lenderRiskForm.$submitted"\n                                class="text-color-danger"\n                                role="alert">\n                                <div ng-message="required">* Required </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Amount</label>\n                            <div class="input-group">\n                                <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                <input type="text" readonly="readonly" class="form-control" ng-model="vm.client.clientData.lenderRiskProfile.highRiskAmount" rounded-number\n                                ng-readonly="readOnly" />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Max amount per invoice</label>\n                            <div class="input-group">\n                                <span class="input-group-addon" id="basic-addon1">&pound;</span>\n                                <input type="text"\n                                       id="maxAmountHighRisk"\n                                       name="maxAmountHighRisk"\n                                       class="form-control"\n                                       perc-amount-validation="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage"\n                                       ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage > 0"\n                                       ng-model="vm.client.clientData.lenderRiskProfile.maxAmountHighRisk"\n                                       rounded-number\n                                       ng-readonly="readOnly"\n                                        >\n                            </div>\n                            <div ng-messages="lenderRiskForm.maxAmountHighRisk.$error"\n                                 ng-if="lenderRiskForm.$submitted"\n                                 class="text-color-danger"\n                                 role="alert">\n                                <div ng-message="required">* Required </div>\n                                <div ng-message="percAmountValidation">Value is invalid, please check corresponding spread percentage.</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-3">\n                        <div class="form-group">\n                            <label class="form-control-label smaller">Max percentage per invoice</label>\n                            <div class="input-group">\n                                <input type="{{readOnly ? \'text\' : \'number\'}}"\n                                        id="maxInvPctHighRisk"\n                                        name="maxInvPctHighRisk"\n                                        class="form-control"\n                                        max="10"\n                                        ng-required="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage > 0"\n                                        perc-validation="vm.client.clientData.lenderRiskProfile.lendSpreadHighPercentage"\n                                        ng-model="vm.client.clientData.lenderRiskProfile.maxInvPctHighRisk"\n                                        ng-readonly="readOnly">\n                                    <span class="input-group-addon" id="basic-addon1">%</span>\n                            </div>\n                            <div ng-messages="lenderRiskForm.maxInvPctHighRisk.$error"\n                                ng-if="lenderRiskForm.$submitted"\n                                class="text-color-danger"\n                                role="alert">\n                                <div ng-message="required">* Required </div>\n                                <div ng-message="number">Not a valid number </div>\n                                <div ng-message="maxPerc">Max Percentage is 10</div>\n                                <div ng-message="minPerc">Value is invalid, please check corresponding spread</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        ng-show="percentageError"\n                        class="text-color-danger col-md-12"\n                        role="alert">\n                        <div ng-show="percentageError">Lending Spread Percentages must add up to 100%</div>\n                    </div>\n                </div>\n                <hr />\n                <configurable-form ng-form="lenderRiskForm"\n                                   name="lenderRiskProfile"\n                                   model-root="vm.client.clientData.lenderRiskProfile"\n                                   read-only="vm.client.clientData.authorization.clientAuthorized">\n\n                </configurable-form>\n\n\n                <div ui-view>\n                    <div class="form-group margin-top-md">\n                        <div class="text-align-right">\n                            <div ng-if="!readOnly">\n                                <button class="btn btn-secondary" type="button" ng-click="cancelRiskProfile($event)">\n                                    Cancel\n                                </button>\n                                <button class="btn btn-primary" type="submit">\n                                    Save\n                                </button>\n                            </div>\n                            <div ng-if="readOnly">\n                                <button class="btn btn-primary" type="button" ng-click="cancelRiskProfile($event)">\n                                    Go Back\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n');
            $templateCache.put('setup/lender/terms.html', '<div class="container container--drop">\n    <form ng-submit="confirmLenderTerms()">\n\n        <div class="form-group row padding-y-lg">\n            <h2>\n                Confirm Terms of Service\n            </h2>\n        </div>\n\n        <p>To proceed with your registration on the service you are required to confirm that:</p>\n        <ol>\n            <li>You meet the criteria neccessary for a Sophisticated Investor</li>\n            <li>Your accept the Terms of Service</li>\n        </ol>\n\n\n        <div class="form-group">\n            <h4>Sophisticated investor Criteria</h4>\n            <!-- @todo Sophisticated Terms of service to be injected here -->\n            <div class="textbox" id="terms" compile-html="lenderSophisticatedInvestor"></div>\n        </div>\n\n        <div class="form-group">\n            <h4>Terms of Service</h4>\n            <div class="textbox" id="terms" compile-html="lenderTermsOfService"></div>\n        </div>\n\n        <div class="form-group row">\n            <div class="text-align-right">\n                <button class="btn btn-primary" type="submit">\n                    Confirm &amp; Continue\n                </button>\n                <button class="btn btn-secondary ng-click="cancelLenderTerms($event)">\n                    Cancel\n                </button>\n            </div>\n        </div>\n\n    </form>\n</div>\n');
            $templateCache.put('setup/borrower/sidebar/default.html', '<aside class="Sidebar">\n    <section class="Sidebar__header">\n        <div class="row">\n            <div class="col-md-6 text-align-left">Setup Status</div>\n            <div class="col-md-6 text-align-right Sidebar__header--light">{{ steps.getPercentage() }}%</div>\n        </div>\n    </section>\n\n    <section class="Sidebar__process">\n        <div class="Sidebar__process__percentage" style="width: {{ steps.getPercentage() }}%"></div>\n    </section>\n\n    <ul class="Sidebar__links">\n        <li ng-repeat="step in steps.data[clientType] track by $index"\n            ng-class="{\'completed\': step.status}"><a href="#">{{step.label}}</a></li>\n    </ul>\n</aside>\n');
        }
    ]);
    angular.module('templates.users', []).run([
        '$templateCache',
        function ($templateCache) {
            $templateCache.put('users/invitation-expired.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="user.client.clientType" title="Users"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="vm.summary.userInvitationExpired.value === 0">No invitations expired</p>\n                <div class="table-responsive" ng-show="vm.summary.userInvitationExpired.value > 0">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                        <tr class="font-weight-bold capitalise">\n                            <td>User name</td>\n                            <td>Client</td>\n                            <td>Invitation Sent On</td>\n                            <td>Invitation Sent By</td>\n                            <td></td>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="user in vm.summary.userInvitationExpired.entities">\n                            <td>{{user.firstName + \' \' + user.lastName}}</td>\n                            <td>{{user.client.clientName}}</td>\n                            <td>{{user.invite.createDate  | date:\'dd MMM yyyy\'}}</td>\n                            <td>{{user.invite.pageData.invitingUserFirstName + " " + user.invite.pageData.invitingUserLastName}}</td>\n                            <td>\n                                <button class="btn btn-primary" ng-click="resendUserInvitation($event, user)">Resend Invitation</button>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
            $templateCache.put('users/primary-outstanding.html', '<div class="container-fluid padding-lg">\n    <header-buttons client-type="provider" title="Users"></header-buttons>\n    <div class="col-md-12 padding-lg bg-ppLightBlue borderless border-radius-md">\n        <div class="row">\n            <div class="col-md-12">\n                <p class="text-color-red" ng-show="vm.summary.userPrimaryOutstanding.value === 0">No primary users outstanding</p>\n                <div class="table-responsive" ng-show="vm.summary.userPrimaryOutstanding.value > 0">\n                    <table class="table table-striped table-bordered table-hover table-condensed">\n                        <thead>\n                        <tr class="font-weight-bold capitalise">\n                            <td>Client Name</td>\n                            <td>Primary Contact</td>\n                            <td>Primary Email</td>\n                            <td>Invitation Sent On</td>\n                            <td>Invitation Sent By</td>\n                            <td>Resend Invitation</td>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="user in vm.summary.userPrimaryOutstanding.entities">\n                            <td>{{user.client.clientName}}</td>\n                            <td>{{user.firstName + \' \' + user.lastName}}</td>\n                            <td>{{user.email}}</td>\n                            <td>{{user.invite.createDate  | date:\'dd MMM yyyy\'}}</td>\n                            <td>{{user.invite.pageData.invitingUserFirstName + " " + user.invite.pageData.invitingUserLastName}}</td>\n                            <td>\n                                <button class="btn btn-primary" ng-click="resendUserInvitation($event, user)">Resend Invitation</button>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>');
        }
    ]);
}());
//# sourceMappingURL=data:application/json;base64,
